//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler1.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapSearchFluttifyPlugin (SubHandler1)
- (NSDictionary<NSString*, Handler>*) getSubHandler1 {
    return @{
        @"AMapDrivingRouteSearchRequest::get_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::get_plateProvince");
            }
        
            // ref object
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.plateProvince;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapDrivingRouteSearchRequest::get_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::get_plateNumber");
            }
        
            // ref object
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.plateNumber;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapDrivingRouteSearchRequest::get_ferry": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::get_ferry");
            }
        
            // ref object
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.ferry;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDrivingRouteSearchRequest::get_cartype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::get_cartype");
            }
        
            // ref object
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.cartype;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapWalkingRouteSearchRequest::get_multipath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalkingRouteSearchRequest::get_multipath");
            }
        
            // ref object
            AMapWalkingRouteSearchRequest* ref = (AMapWalkingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.multipath;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransitRouteSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::get_strategy");
            }
        
            // ref object
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.strategy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransitRouteSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::get_city");
            }
        
            // ref object
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.city;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransitRouteSearchRequest::get_destinationCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::get_destinationCity");
            }
        
            // ref object
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.destinationCity;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransitRouteSearchRequest::get_nightflag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::get_nightflag");
            }
        
            // ref object
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            BOOL result = ref.nightflag;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransitRouteSearchRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::get_requireExtension");
            }
        
            // ref object
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            BOOL result = ref.requireExtension;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRidingRouteSearchRequest::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRidingRouteSearchRequest::get_type");
            }
        
            // ref object
            AMapRidingRouteSearchRequest* ref = (AMapRidingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.type;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteSearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteSearchResponse::get_count");
            }
        
            // ref object
            AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.count;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteSearchResponse::get_route": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteSearchResponse::get_route");
            }
        
            // ref object
            AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapRoute* result = ref.route;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_strategy");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.strategy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_waypoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_waypoints");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapGeoPoint*>* result = ref.waypoints;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_originId");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.originId;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_destinationId");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.destinationId;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_origintype");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.origintype;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_destinationtype");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.destinationtype;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_plateProvince");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.plateProvince;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_plateNumber");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.plateNumber;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_size");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapTruckSizeType result = ref.size;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_height");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.height;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_width");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.width;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_load": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_load");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.load;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_weight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_weight");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.weight;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTruckRouteSearchRequest::get_axis": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::get_axis");
            }
        
            // ref object
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.axis;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceSearchRequest::get_origins": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceSearchRequest::get_origins");
            }
        
            // ref object
            AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapGeoPoint*>* result = ref.origins;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceSearchRequest::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceSearchRequest::get_destination");
            }
        
            // ref object
            AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.destination;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceSearchRequest::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceSearchRequest::get_type");
            }
        
            // ref object
            AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.type;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceSearchResponse::get_results": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceSearchResponse::get_results");
            }
        
            // ref object
            AMapDistanceSearchResponse* ref = (AMapDistanceSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapDistanceResult*>* result = ref.results;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapWeatherSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWeatherSearchRequest::get_city");
            }
        
            // ref object
            AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.city;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapWeatherSearchRequest::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWeatherSearchRequest::get_type");
            }
        
            // ref object
            AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapWeatherType result = ref.type;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapWeatherSearchResponse::get_lives": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWeatherSearchResponse::get_lives");
            }
        
            // ref object
            AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapLocalWeatherLive*>* result = ref.lives;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapWeatherSearchResponse::get_forecasts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWeatherSearchResponse::get_forecasts");
            }
        
            // ref object
            AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapLocalWeatherForecast*>* result = ref.forecasts;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadTrafficSearchBaseRequest::get_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchBaseRequest::get_level");
            }
        
            // ref object
            AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.level;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadTrafficSearchBaseRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchBaseRequest::get_requireExtension");
            }
        
            // ref object
            AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            BOOL result = ref.requireExtension;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadTrafficSearchRequest::get_roadName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchRequest::get_roadName");
            }
        
            // ref object
            AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.roadName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadTrafficSearchRequest::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchRequest::get_adcode");
            }
        
            // ref object
            AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadTrafficCircleSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficCircleSearchRequest::get_location");
            }
        
            // ref object
            AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadTrafficCircleSearchRequest::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficCircleSearchRequest::get_radius");
            }
        
            // ref object
            AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.radius;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadTrafficSearchResponse::get_trafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchResponse::get_trafficInfo");
            }
        
            // ref object
            AMapRoadTrafficSearchResponse* ref = (AMapRoadTrafficSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapTrafficInfo* result = ref.trafficInfo;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchRequest::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::get_center");
            }
        
            // ref object
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.center;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchRequest::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::get_radius");
            }
        
            // ref object
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.radius;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchRequest::get_searchType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::get_searchType");
            }
        
            // ref object
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapNearbySearchType result = ref.searchType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchRequest::get_timeRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::get_timeRange");
            }
        
            // ref object
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.timeRange;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchRequest::get_limit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::get_limit");
            }
        
            // ref object
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.limit;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchResponse::get_count");
            }
        
            // ref object
            AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.count;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchResponse::get_infos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchResponse::get_infos");
            }
        
            // ref object
            AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapNearbyUserInfo*>* result = ref.infos;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudSearchBaseRequest::get_tableID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::get_tableID");
            }
        
            // ref object
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.tableID;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudSearchBaseRequest::get_filter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::get_filter");
            }
        
            // ref object
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<NSString*>* result = ref.filter;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudSearchBaseRequest::get_sortFields": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::get_sortFields");
            }
        
            // ref object
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.sortFields;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudSearchBaseRequest::get_sortType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::get_sortType");
            }
        
            // ref object
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapCloudSortType result = ref.sortType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudSearchBaseRequest::get_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::get_offset");
            }
        
            // ref object
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.offset;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudSearchBaseRequest::get_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::get_page");
            }
        
            // ref object
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.page;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOIAroundSearchRequest::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOIAroundSearchRequest::get_center");
            }
        
            // ref object
            AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.center;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOIAroundSearchRequest::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOIAroundSearchRequest::get_radius");
            }
        
            // ref object
            AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.radius;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOIAroundSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOIAroundSearchRequest::get_keywords");
            }
        
            // ref object
            AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.keywords;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOIPolygonSearchRequest::get_polygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOIPolygonSearchRequest::get_polygon");
            }
        
            // ref object
            AMapCloudPOIPolygonSearchRequest* ref = (AMapCloudPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPolygon* result = ref.polygon;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOIPolygonSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOIPolygonSearchRequest::get_keywords");
            }
        
            // ref object
            AMapCloudPOIPolygonSearchRequest* ref = (AMapCloudPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.keywords;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOIIDSearchRequest::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOIIDSearchRequest::get_uid");
            }
        
            // ref object
            AMapCloudPOIIDSearchRequest* ref = (AMapCloudPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.uid;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOILocalSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOILocalSearchRequest::get_keywords");
            }
        
            // ref object
            AMapCloudPOILocalSearchRequest* ref = (AMapCloudPOILocalSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.keywords;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOILocalSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOILocalSearchRequest::get_city");
            }
        
            // ref object
            AMapCloudPOILocalSearchRequest* ref = (AMapCloudPOILocalSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.city;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOISearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOISearchResponse::get_count");
            }
        
            // ref object
            AMapCloudPOISearchResponse* ref = (AMapCloudPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.count;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOISearchResponse::get_POIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOISearchResponse::get_POIs");
            }
        
            // ref object
            AMapCloudPOISearchResponse* ref = (AMapCloudPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapCloudPOI*>* result = ref.POIs;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocationShareSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationShareSearchRequest::get_location");
            }
        
            // ref object
            AMapLocationShareSearchRequest* ref = (AMapLocationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocationShareSearchRequest::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocationShareSearchRequest::get_name");
            }
        
            // ref object
            AMapLocationShareSearchRequest* ref = (AMapLocationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIShareSearchRequest::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIShareSearchRequest::get_uid");
            }
        
            // ref object
            AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIShareSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIShareSearchRequest::get_location");
            }
        
            // ref object
            AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIShareSearchRequest::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIShareSearchRequest::get_name");
            }
        
            // ref object
            AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIShareSearchRequest::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIShareSearchRequest::get_address");
            }
        
            // ref object
            AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.address;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteShareSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteShareSearchRequest::get_strategy");
            }
        
            // ref object
            AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.strategy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteShareSearchRequest::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteShareSearchRequest::get_type");
            }
        
            // ref object
            AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.type;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteShareSearchRequest::get_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteShareSearchRequest::get_startCoordinate");
            }
        
            // ref object
            AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.startCoordinate;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteShareSearchRequest::get_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteShareSearchRequest::get_destinationCoordinate");
            }
        
            // ref object
            AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.destinationCoordinate;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteShareSearchRequest::get_startName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteShareSearchRequest::get_startName");
            }
        
            // ref object
            AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.startName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteShareSearchRequest::get_destinationName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteShareSearchRequest::get_destinationName");
            }
        
            // ref object
            AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.destinationName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapNavigationShareSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNavigationShareSearchRequest::get_strategy");
            }
        
            // ref object
            AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.strategy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNavigationShareSearchRequest::get_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNavigationShareSearchRequest::get_startCoordinate");
            }
        
            // ref object
            AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.startCoordinate;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNavigationShareSearchRequest::get_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNavigationShareSearchRequest::get_destinationCoordinate");
            }
        
            // ref object
            AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.destinationCoordinate;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapShareSearchResponse::get_shareURL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapShareSearchResponse::get_shareURL");
            }
        
            // ref object
            AMapShareSearchResponse* ref = (AMapShareSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.shareURL;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_beginTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_beginTime");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.beginTime;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_interval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_interval");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.interval;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_timeCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_timeCount");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.timeCount;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_strategy");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.strategy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_originId");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.originId;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_destinationId");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.destinationId;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_origintype");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.origintype;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_destinationtype");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.destinationtype;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_parentId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_parentId");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.parentId;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_plateProvince");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.plateProvince;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_plateNumber");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.plateNumber;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchRequest::get_cartype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::get_cartype");
            }
        
            // ref object
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.cartype;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchResponse::get_paths": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchResponse::get_paths");
            }
        
            // ref object
            AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapPath*>* result = ref.paths;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureRouteSearchResponse::get_timeInfos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchResponse::get_timeInfos");
            }
        
            // ref object
            AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapFutureTimeInfo*>* result = ref.timeInfos;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapGeoPoint::get_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeoPoint::get_latitude");
            }
        
            // ref object
            AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.latitude;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapGeoPoint::get_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeoPoint::get_longitude");
            }
        
            // ref object
            AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.longitude;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapGeoPolygon::get_points": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeoPolygon::get_points");
            }
        
            // ref object
            AMapGeoPolygon* ref = (AMapGeoPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapGeoPoint*>* result = ref.points;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapCity::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::get_city");
            }
        
            // ref object
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.city;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCity::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::get_citycode");
            }
        
            // ref object
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.citycode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCity::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::get_adcode");
            }
        
            // ref object
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCity::get_num": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::get_num");
            }
        
            // ref object
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.num;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCity::get_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::get_districts");
            }
        
            // ref object
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapDistrict*>* result = ref.districts;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapSuggestion::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSuggestion::get_keywords");
            }
        
            // ref object
            AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<NSString*>* result = ref.keywords;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapSuggestion::get_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSuggestion::get_cities");
            }
        
            // ref object
            AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapCity*>* result = ref.cities;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapTip::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::get_uid");
            }
        
            // ref object
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTip::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::get_name");
            }
        
            // ref object
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTip::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::get_adcode");
            }
        
            // ref object
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTip::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::get_district");
            }
        
            // ref object
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.district;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTip::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::get_address");
            }
        
            // ref object
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.address;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTip::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::get_location");
            }
        
            // ref object
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTip::get_typecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::get_typecode");
            }
        
            // ref object
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.typecode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapImage::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapImage::get_title");
            }
        
            // ref object
            AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.title;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapImage::get_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapImage::get_url");
            }
        
            // ref object
            AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.url;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIExtension::get_rating": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIExtension::get_rating");
            }
        
            // ref object
            AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.rating;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIExtension::get_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIExtension::get_cost");
            }
        
            // ref object
            AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.cost;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIExtension::get_openTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIExtension::get_openTime");
            }
        
            // ref object
            AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.openTime;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapIndoorData::get_floor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapIndoorData::get_floor");
            }
        
            // ref object
            AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.floor;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapIndoorData::get_floorName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapIndoorData::get_floorName");
            }
        
            // ref object
            AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.floorName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapIndoorData::get_pid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapIndoorData::get_pid");
            }
        
            // ref object
            AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.pid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapSubPOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::get_uid");
            }
        
            // ref object
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapSubPOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::get_name");
            }
        
            // ref object
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapSubPOI::get_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::get_sname");
            }
        
            // ref object
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.sname;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapSubPOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::get_location");
            }
        
            // ref object
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapSubPOI::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::get_address");
            }
        
            // ref object
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.address;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapSubPOI::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::get_distance");
            }
        
            // ref object
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapSubPOI::get_subtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::get_subtype");
            }
        
            // ref object
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.subtype;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoutePOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::get_uid");
            }
        
            // ref object
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoutePOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::get_name");
            }
        
            // ref object
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoutePOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::get_location");
            }
        
            // ref object
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoutePOI::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::get_distance");
            }
        
            // ref object
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoutePOI::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::get_duration");
            }
        
            // ref object
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_uid");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_name");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_type");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.type;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_typecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_typecode");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.typecode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_location");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_address");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.address;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_tel");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.tel;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_distance");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_parkingType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_parkingType");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.parkingType;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_shopID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_shopID");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.shopID;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_postcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_postcode");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.postcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_website": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_website");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.website;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_email": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_email");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.email;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_province");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.province;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_pcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_pcode");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.pcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_city");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.city;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_citycode");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.citycode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_district");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.district;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_adcode");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_gridcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_gridcode");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.gridcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_enterLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_enterLocation");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.enterLocation;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_exitLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_exitLocation");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.exitLocation;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_direction");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.direction;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_hasIndoorMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_hasIndoorMap");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            BOOL result = ref.hasIndoorMap;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_businessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_businessArea");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.businessArea;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_indoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_indoorData");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapIndoorData* result = ref.indoorData;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_subPOIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_subPOIs");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapSubPOI*>* result = ref.subPOIs;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_images": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_images");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapImage*>* result = ref.images;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOI::get_extensionInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::get_extensionInfo");
            }
        
            // ref object
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapPOIExtension* result = ref.extensionInfo;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapAOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::get_uid");
            }
        
            // ref object
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::get_name");
            }
        
            // ref object
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAOI::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::get_adcode");
            }
        
            // ref object
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::get_location");
            }
        
            // ref object
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapAOI::get_area": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::get_area");
            }
        
            // ref object
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            CGFloat result = ref.area;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoad::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::get_uid");
            }
        
            // ref object
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoad::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::get_name");
            }
        
            // ref object
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoad::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::get_distance");
            }
        
            // ref object
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoad::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::get_direction");
            }
        
            // ref object
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.direction;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoad::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::get_location");
            }
        
            // ref object
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadInter::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::get_distance");
            }
        
            // ref object
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadInter::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::get_direction");
            }
        
            // ref object
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.direction;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadInter::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::get_location");
            }
        
            // ref object
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadInter::get_firstId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::get_firstId");
            }
        
            // ref object
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.firstId;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadInter::get_firstName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::get_firstName");
            }
        
            // ref object
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.firstName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadInter::get_secondId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::get_secondId");
            }
        
            // ref object
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.secondId;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoadInter::get_secondName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::get_secondName");
            }
        
            // ref object
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.secondName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStreetNumber::get_street": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::get_street");
            }
        
            // ref object
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.street;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStreetNumber::get_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::get_number");
            }
        
            // ref object
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.number;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStreetNumber::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::get_location");
            }
        
            // ref object
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapStreetNumber::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::get_distance");
            }
        
            // ref object
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapStreetNumber::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::get_direction");
            }
        
            // ref object
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.direction;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapBusinessArea::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusinessArea::get_name");
            }
        
            // ref object
            AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapBusinessArea::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusinessArea::get_location");
            }
        
            // ref object
            AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_country": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_country");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.country;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_province");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.province;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_city");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.city;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_citycode");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.citycode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_district");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.district;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_adcode");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_township");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.township;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_towncode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_towncode");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.towncode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_neighborhood");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.neighborhood;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_building");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.building;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_streetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_streetNumber");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapStreetNumber* result = ref.streetNumber;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapAddressComponent::get_businessAreas": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::get_businessAreas");
            }
        
            // ref object
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapBusinessArea*>* result = ref.businessAreas;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapReGeocode::get_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::get_formattedAddress");
            }
        
            // ref object
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSString* result = ref.formattedAddress;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapReGeocode::get_addressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::get_addressComponent");
            }
        
            // ref object
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            AMapAddressComponent* result = ref.addressComponent;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"AMapReGeocode::get_roads": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::get_roads");
            }
        
            // ref object
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            NSArray<AMapRoad*>* result = ref.roads;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int i = 0; i < result.count; i++) {
                NSObject* object = [result objectAtIndex:i];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        
    };
}

@end
