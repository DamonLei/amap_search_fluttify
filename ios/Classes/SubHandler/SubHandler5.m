//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler5.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapSearchFluttifyPlugin (SubHandler5)
- (NSDictionary<NSString*, Handler>*) getSubHandler5 {
    return @{
        @"AMapRoute::get_taxiCost_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CGFloat result = ref.taxiCost;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoute::get_paths_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapPath*>* result = ref.paths;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: @(object.hash)];
                    HEAP[@([object hash])] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoute::get_transits_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapTransit*>* result = ref.transits;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: @(object.hash)];
                    HEAP[@([object hash])] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapDistanceResult::get_originID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.originID;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapDistanceResult::get_destID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.destID;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapDistanceResult::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.distance;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapDistanceResult::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.duration;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapDistanceResult::get_info_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.info;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapDistanceResult::get_code_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.code;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.adcode;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.province;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.city;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_weather_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.weather;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_temperature_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.temperature;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_windDirection_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.windDirection;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_windPower_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.windPower;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_humidity_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.humidity;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherLive::get_reportTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.reportTime;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_date_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.date;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_week_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.week;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_dayWeather_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.dayWeather;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_nightWeather_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.nightWeather;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_dayTemp_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.dayTemp;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_nightTemp_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.nightTemp;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_dayWind_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.dayWind;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_nightWind_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.nightWind;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_dayPower_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.dayPower;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalDayWeatherForecast::get_nightPower_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.nightPower;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherForecast::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.adcode;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherForecast::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.province;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherForecast::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.city;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherForecast::get_reportTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.reportTime;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapLocalWeatherForecast::get_casts_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapLocalDayWeatherForecast*>* result = ref.casts;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: @(object.hash)];
                    HEAP[@([object hash])] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbyUserInfo::get_userID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.userID;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbyUserInfo::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapGeoPoint* result = ref.location;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbyUserInfo::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CGFloat result = ref.distance;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbyUserInfo::get_updatetime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSTimeInterval result = ref.updatetime;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficEvaluation::get_evaluationDescription_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.evaluationDescription;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficEvaluation::get_status_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.status;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficEvaluation::get_expedite_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.expedite;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficEvaluation::get_congested_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.congested;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficEvaluation::get_blocked_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.blocked;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficEvaluation::get_unknown_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.unknown;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficRoad::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.name;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficRoad::get_status_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.status;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficRoad::get_direction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.direction;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficRoad::get_angle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                float result = ref.angle;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficRoad::get_speed_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                float result = ref.speed;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficRoad::get_polyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.polyline;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficInfo::get_statusDescription_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.statusDescription;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficInfo::get_evaluation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapTrafficEvaluation* result = ref.evaluation;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapTrafficInfo::get_roads_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapTrafficRoad*>* result = ref.roads;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: @(object.hash)];
                    HEAP[@([object hash])] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudImage::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.uid;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudImage::get_preurl_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.preurl;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudImage::get_url_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.url;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudPOI::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.uid;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudPOI::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.name;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudPOI::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapGeoPoint* result = ref.location;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudPOI::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.address;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudPOI::get_createTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.createTime;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudPOI::get_updateTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.updateTime;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudPOI::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.distance;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapCloudPOI::get_images_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapCloudImage*>* result = ref.images;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: @(object.hash)];
                    HEAP[@([object hash])] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbyUploadInfo::get_userID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.userID;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbyUploadInfo::get_coordinateType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapSearchCoordinateType result = ref.coordinateType;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbyUploadInfo::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CLLocationCoordinate2D result = ref.coordinate;
        
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbySearchManager::get_uploadTimeInterval_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSTimeInterval result = ref.uploadTimeInterval;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNearbySearchManager::get_isAutoUploading_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.isAutoUploading;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapSearchAPI::get_timeout_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.timeout;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapSearchAPI::get_language_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapSearchLanguage result = ref.language;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchBaseRequest::set_types": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchBaseRequest::set_types");
            }
        
            // args
            // jsonable arg
            NSString* types = (NSString*) args[@"types"];
        
            // ref
            AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.types = types;
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_sortrule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchBaseRequest::set_sortrule");
            }
        
            // args
            // jsonable arg
            NSInteger sortrule = [args[@"sortrule"] longValue];
        
            // ref
            AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.sortrule = sortrule;
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchBaseRequest::set_offset");
            }
        
            // args
            // jsonable arg
            NSInteger offset = [args[@"offset"] longValue];
        
            // ref
            AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.offset = offset;
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchBaseRequest::set_page");
            }
        
            // args
            // jsonable arg
            NSInteger page = [args[@"page"] longValue];
        
            // ref
            AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.page = page;
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchBaseRequest::set_building");
            }
        
            // args
            // jsonable arg
            NSString* building = (NSString*) args[@"building"];
        
            // ref
            AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.building = building;
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchBaseRequest::set_requireExtension");
            }
        
            // args
            // jsonable arg
            BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
            // ref
            AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.requireExtension = requireExtension;
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_requireSubPOIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchBaseRequest::set_requireSubPOIs");
            }
        
            // args
            // jsonable arg
            BOOL requireSubPOIs = [args[@"requireSubPOIs"] boolValue];
        
            // ref
            AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.requireSubPOIs = requireSubPOIs;
            methodResult(@"success");
        },
        
        @"AMapPOIIDSearchRequest::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIIDSearchRequest::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapPOIIDSearchRequest* ref = (AMapPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapPOIKeywordsSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIKeywordsSearchRequest::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapPOIKeywordsSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIKeywordsSearchRequest::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapPOIKeywordsSearchRequest::set_cityLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIKeywordsSearchRequest::set_cityLimit");
            }
        
            // args
            // jsonable arg
            BOOL cityLimit = [args[@"cityLimit"] boolValue];
        
            // ref
            AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cityLimit = cityLimit;
            methodResult(@"success");
        },
        
        @"AMapPOIKeywordsSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIKeywordsSearchRequest::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
            // ref
            AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapPOIAroundSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIAroundSearchRequest::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapPOIAroundSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIAroundSearchRequest::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
            // ref
            AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapPOIAroundSearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIAroundSearchRequest::set_radius");
            }
        
            // args
            // jsonable arg
            NSInteger radius = [args[@"radius"] longValue];
        
            // ref
            AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"AMapPOIAroundSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIAroundSearchRequest::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapPOIPolygonSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIPolygonSearchRequest::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapPOIPolygonSearchRequest::set_polygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIPolygonSearchRequest::set_polygon");
            }
        
            // args
            // ref arg
            AMapGeoPolygon* polygon = (AMapGeoPolygon*) HEAP[@([args[@"polygon"] integerValue])];
        
            // ref
            AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polygon = polygon;
            methodResult(@"success");
        },
        
        @"AMapPOISearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapPOISearchResponse::set_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchResponse::set_suggestion");
            }
        
            // args
            // ref arg
            AMapSuggestion* suggestion = (AMapSuggestion*) HEAP[@([args[@"suggestion"] integerValue])];
        
            // ref
            AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.suggestion = suggestion;
            methodResult(@"success");
        },
        
        @"AMapPOISearchResponse::set_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOISearchResponse::set_pois");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
            NSMutableArray<AMapPOI*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
            for (int __i__ = 0; __i__ < poisRefArray.count; __i__++) {
                AMapPOI* item = (AMapPOI*) HEAP[[poisRefArray objectAtIndex:__i__]];
                [pois addObject:item];
            }
        
            // ref
            AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pois = pois;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchRequest::set_origin");
            }
        
            // args
            // ref arg
            AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
        
            // ref
            AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchRequest::set_destination");
            }
        
            // args
            // ref arg
            AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
        
            // ref
            AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_searchType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchRequest::set_searchType");
            }
        
            // args
            // enum arg
            AMapRoutePOISearchType searchType = (AMapRoutePOISearchType) [args[@"searchType"] integerValue];
        
            // ref
            AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.searchType = searchType;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchRequest::set_strategy");
            }
        
            // args
            // jsonable arg
            NSInteger strategy = [args[@"strategy"] longValue];
        
            // ref
            AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strategy = strategy;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_range": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchRequest::set_range");
            }
        
            // args
            // jsonable arg
            NSInteger range = [args[@"range"] longValue];
        
            // ref
            AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.range = range;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_polylineStr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchRequest::set_polylineStr");
            }
        
            // args
            // jsonable arg
            NSString* polylineStr = (NSString*) args[@"polylineStr"];
        
            // ref
            AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polylineStr = polylineStr;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchRequest::set_polyline");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* polylineRefArray = (NSArray<NSNumber*> *) args[@"polyline"];
            NSMutableArray<AMapGeoPoint*>* polyline = [NSMutableArray arrayWithCapacity:polylineRefArray.count];
            for (int __i__ = 0; __i__ < polylineRefArray.count; __i__++) {
                AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[polylineRefArray objectAtIndex:__i__]];
                [polyline addObject:item];
            }
        
            // ref
            AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polyline = polyline;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchResponse::set_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOISearchResponse::set_pois");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
            NSMutableArray<AMapRoutePOI*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
            for (int __i__ = 0; __i__ < poisRefArray.count; __i__++) {
                AMapRoutePOI* item = (AMapRoutePOI*) HEAP[[poisRefArray objectAtIndex:__i__]];
                [pois addObject:item];
            }
        
            // ref
            AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pois = pois;
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapInputTipsSearchRequest::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapInputTipsSearchRequest::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_types": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapInputTipsSearchRequest::set_types");
            }
        
            // args
            // jsonable arg
            NSString* types = (NSString*) args[@"types"];
        
            // ref
            AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.types = types;
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_cityLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapInputTipsSearchRequest::set_cityLimit");
            }
        
            // args
            // jsonable arg
            BOOL cityLimit = [args[@"cityLimit"] boolValue];
        
            // ref
            AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cityLimit = cityLimit;
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapInputTipsSearchRequest::set_location");
            }
        
            // args
            // jsonable arg
            NSString* location = (NSString*) args[@"location"];
        
            // ref
            AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapInputTipsSearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchResponse::set_tips": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapInputTipsSearchResponse::set_tips");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* tipsRefArray = (NSArray<NSNumber*> *) args[@"tips"];
            NSMutableArray<AMapTip*>* tips = [NSMutableArray arrayWithCapacity:tipsRefArray.count];
            for (int __i__ = 0; __i__ < tipsRefArray.count; __i__++) {
                AMapTip* item = (AMapTip*) HEAP[[tipsRefArray objectAtIndex:__i__]];
                [tips addObject:item];
            }
        
            // ref
            AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tips = tips;
            methodResult(@"success");
        },
        
        @"AMapGeocodeSearchRequest::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocodeSearchRequest::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"AMapGeocodeSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocodeSearchRequest::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapGeocodeSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocodeSearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapGeocodeSearchResponse::set_geocodes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocodeSearchResponse::set_geocodes");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* geocodesRefArray = (NSArray<NSNumber*> *) args[@"geocodes"];
            NSMutableArray<AMapGeocode*>* geocodes = [NSMutableArray arrayWithCapacity:geocodesRefArray.count];
            for (int __i__ = 0; __i__ < geocodesRefArray.count; __i__++) {
                AMapGeocode* item = (AMapGeocode*) HEAP[[geocodesRefArray objectAtIndex:__i__]];
                [geocodes addObject:item];
            }
        
            // ref
            AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.geocodes = geocodes;
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocodeSearchRequest::set_requireExtension");
            }
        
            // args
            // jsonable arg
            BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
            // ref
            AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.requireExtension = requireExtension;
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocodeSearchRequest::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
            // ref
            AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocodeSearchRequest::set_radius");
            }
        
            // args
            // jsonable arg
            NSInteger radius = [args[@"radius"] longValue];
        
            // ref
            AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchRequest::set_poitype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocodeSearchRequest::set_poitype");
            }
        
            // args
            // jsonable arg
            NSString* poitype = (NSString*) args[@"poitype"];
        
            // ref
            AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.poitype = poitype;
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchResponse::set_regeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocodeSearchResponse::set_regeocode");
            }
        
            // args
            // ref arg
            AMapReGeocode* regeocode = (AMapReGeocode*) HEAP[@([args[@"regeocode"] integerValue])];
        
            // ref
            AMapReGeocodeSearchResponse* ref = (AMapReGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.regeocode = regeocode;
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStopSearchRequest::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStopSearchRequest::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchRequest::set_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStopSearchRequest::set_offset");
            }
        
            // args
            // jsonable arg
            NSInteger offset = [args[@"offset"] longValue];
        
            // ref
            AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.offset = offset;
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchRequest::set_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStopSearchRequest::set_page");
            }
        
            // args
            // jsonable arg
            NSInteger page = [args[@"page"] longValue];
        
            // ref
            AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.page = page;
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStopSearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchResponse::set_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStopSearchResponse::set_suggestion");
            }
        
            // args
            // ref arg
            AMapSuggestion* suggestion = (AMapSuggestion*) HEAP[@([args[@"suggestion"] integerValue])];
        
            // ref
            AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.suggestion = suggestion;
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchResponse::set_busstops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStopSearchResponse::set_busstops");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* busstopsRefArray = (NSArray<NSNumber*> *) args[@"busstops"];
            NSMutableArray<AMapBusStop*>* busstops = [NSMutableArray arrayWithCapacity:busstopsRefArray.count];
            for (int __i__ = 0; __i__ < busstopsRefArray.count; __i__++) {
                AMapBusStop* item = (AMapBusStop*) HEAP[[busstopsRefArray objectAtIndex:__i__]];
                [busstops addObject:item];
            }
        
            // ref
            AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.busstops = busstops;
            methodResult(@"success");
        },
        
        @"AMapBusLineBaseSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineBaseSearchRequest::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapBusLineBaseSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineBaseSearchRequest::set_requireExtension");
            }
        
            // args
            // jsonable arg
            BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
            // ref
            AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.requireExtension = requireExtension;
            methodResult(@"success");
        },
        
        @"AMapBusLineBaseSearchRequest::set_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineBaseSearchRequest::set_offset");
            }
        
            // args
            // jsonable arg
            NSInteger offset = [args[@"offset"] longValue];
        
            // ref
            AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.offset = offset;
            methodResult(@"success");
        },
        
        @"AMapBusLineBaseSearchRequest::set_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineBaseSearchRequest::set_page");
            }
        
            // args
            // jsonable arg
            NSInteger page = [args[@"page"] longValue];
        
            // ref
            AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.page = page;
            methodResult(@"success");
        },
        
        @"AMapBusLineNameSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineNameSearchRequest::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapBusLineNameSearchRequest* ref = (AMapBusLineNameSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapBusLineIDSearchRequest::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineIDSearchRequest::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapBusLineIDSearchRequest* ref = (AMapBusLineIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapBusLineSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineSearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapBusLineSearchResponse::set_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineSearchResponse::set_suggestion");
            }
        
            // args
            // ref arg
            AMapSuggestion* suggestion = (AMapSuggestion*) HEAP[@([args[@"suggestion"] integerValue])];
        
            // ref
            AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.suggestion = suggestion;
            methodResult(@"success");
        },
        
        @"AMapBusLineSearchResponse::set_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLineSearchResponse::set_buslines");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* buslinesRefArray = (NSArray<NSNumber*> *) args[@"buslines"];
            NSMutableArray<AMapBusLine*>* buslines = [NSMutableArray arrayWithCapacity:buslinesRefArray.count];
            for (int __i__ = 0; __i__ < buslinesRefArray.count; __i__++) {
                AMapBusLine* item = (AMapBusLine*) HEAP[[buslinesRefArray objectAtIndex:__i__]];
                [buslines addObject:item];
            }
        
            // ref
            AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.buslines = buslines;
            methodResult(@"success");
        },
        
        @"AMapDistrictSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrictSearchRequest::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapDistrictSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrictSearchRequest::set_requireExtension");
            }
        
            // args
            // jsonable arg
            BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
            // ref
            AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.requireExtension = requireExtension;
            methodResult(@"success");
        },
        
        @"AMapDistrictSearchRequest::set_showBusinessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrictSearchRequest::set_showBusinessArea");
            }
        
            // args
            // jsonable arg
            BOOL showBusinessArea = [args[@"showBusinessArea"] boolValue];
        
            // ref
            AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.showBusinessArea = showBusinessArea;
            methodResult(@"success");
        },
        
        @"AMapDistrictSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrictSearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapDistrictSearchResponse* ref = (AMapDistrictSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapDistrictSearchResponse::set_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrictSearchResponse::set_districts");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* districtsRefArray = (NSArray<NSNumber*> *) args[@"districts"];
            NSMutableArray<AMapDistrict*>* districts = [NSMutableArray arrayWithCapacity:districtsRefArray.count];
            for (int __i__ = 0; __i__ < districtsRefArray.count; __i__++) {
                AMapDistrict* item = (AMapDistrict*) HEAP[[districtsRefArray objectAtIndex:__i__]];
                [districts addObject:item];
            }
        
            // ref
            AMapDistrictSearchResponse* ref = (AMapDistrictSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.districts = districts;
            methodResult(@"success");
        },
        
        @"AMapRouteSearchBaseRequest::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteSearchBaseRequest::set_origin");
            }
        
            // args
            // ref arg
            AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
        
            // ref
            AMapRouteSearchBaseRequest* ref = (AMapRouteSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"AMapRouteSearchBaseRequest::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteSearchBaseRequest::set_destination");
            }
        
            // args
            // ref arg
            AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
        
            // ref
            AMapRouteSearchBaseRequest* ref = (AMapRouteSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_strategy");
            }
        
            // args
            // jsonable arg
            NSInteger strategy = [args[@"strategy"] longValue];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strategy = strategy;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_waypoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_waypoints");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* waypointsRefArray = (NSArray<NSNumber*> *) args[@"waypoints"];
            NSMutableArray<AMapGeoPoint*>* waypoints = [NSMutableArray arrayWithCapacity:waypointsRefArray.count];
            for (int __i__ = 0; __i__ < waypointsRefArray.count; __i__++) {
                AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[waypointsRefArray objectAtIndex:__i__]];
                [waypoints addObject:item];
            }
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.waypoints = waypoints;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_avoidpolygons": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_avoidpolygons");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* avoidpolygonsRefArray = (NSArray<NSNumber*> *) args[@"avoidpolygons"];
            NSMutableArray<AMapGeoPolygon*>* avoidpolygons = [NSMutableArray arrayWithCapacity:avoidpolygonsRefArray.count];
            for (int __i__ = 0; __i__ < avoidpolygonsRefArray.count; __i__++) {
                AMapGeoPolygon* item = (AMapGeoPolygon*) HEAP[[avoidpolygonsRefArray objectAtIndex:__i__]];
                [avoidpolygons addObject:item];
            }
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.avoidpolygons = avoidpolygons;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_avoidroad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_avoidroad");
            }
        
            // args
            // jsonable arg
            NSString* avoidroad = (NSString*) args[@"avoidroad"];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.avoidroad = avoidroad;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_originId");
            }
        
            // args
            // jsonable arg
            NSString* originId = (NSString*) args[@"originId"];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.originId = originId;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_destinationId");
            }
        
            // args
            // jsonable arg
            NSString* destinationId = (NSString*) args[@"destinationId"];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destinationId = destinationId;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_origintype");
            }
        
            // args
            // jsonable arg
            NSString* origintype = (NSString*) args[@"origintype"];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origintype = origintype;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_destinationtype");
            }
        
            // args
            // jsonable arg
            NSString* destinationtype = (NSString*) args[@"destinationtype"];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destinationtype = destinationtype;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_requireExtension");
            }
        
            // args
            // jsonable arg
            BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.requireExtension = requireExtension;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_plateProvince");
            }
        
            // args
            // jsonable arg
            NSString* plateProvince = (NSString*) args[@"plateProvince"];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.plateProvince = plateProvince;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_plateNumber");
            }
        
            // args
            // jsonable arg
            NSString* plateNumber = (NSString*) args[@"plateNumber"];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.plateNumber = plateNumber;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_ferry": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_ferry");
            }
        
            // args
            // jsonable arg
            NSInteger ferry = [args[@"ferry"] longValue];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.ferry = ferry;
            methodResult(@"success");
        },
        
        @"AMapDrivingRouteSearchRequest::set_cartype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDrivingRouteSearchRequest::set_cartype");
            }
        
            // args
            // jsonable arg
            NSInteger cartype = [args[@"cartype"] longValue];
        
            // ref
            AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cartype = cartype;
            methodResult(@"success");
        },
        
        @"AMapWalkingRouteSearchRequest::set_multipath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalkingRouteSearchRequest::set_multipath");
            }
        
            // args
            // jsonable arg
            NSInteger multipath = [args[@"multipath"] longValue];
        
            // ref
            AMapWalkingRouteSearchRequest* ref = (AMapWalkingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.multipath = multipath;
            methodResult(@"success");
        },
        
        @"AMapTransitRouteSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::set_strategy");
            }
        
            // args
            // jsonable arg
            NSInteger strategy = [args[@"strategy"] longValue];
        
            // ref
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strategy = strategy;
            methodResult(@"success");
        },
        
        @"AMapTransitRouteSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapTransitRouteSearchRequest::set_destinationCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::set_destinationCity");
            }
        
            // args
            // jsonable arg
            NSString* destinationCity = (NSString*) args[@"destinationCity"];
        
            // ref
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destinationCity = destinationCity;
            methodResult(@"success");
        },
        
        @"AMapTransitRouteSearchRequest::set_nightflag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::set_nightflag");
            }
        
            // args
            // jsonable arg
            BOOL nightflag = [args[@"nightflag"] boolValue];
        
            // ref
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.nightflag = nightflag;
            methodResult(@"success");
        },
        
        @"AMapTransitRouteSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransitRouteSearchRequest::set_requireExtension");
            }
        
            // args
            // jsonable arg
            BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
            // ref
            AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.requireExtension = requireExtension;
            methodResult(@"success");
        },
        
        @"AMapRidingRouteSearchRequest::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRidingRouteSearchRequest::set_type");
            }
        
            // args
            // jsonable arg
            NSInteger type = [args[@"type"] longValue];
        
            // ref
            AMapRidingRouteSearchRequest* ref = (AMapRidingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.type = type;
            methodResult(@"success");
        },
        
        @"AMapRouteSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteSearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapRouteSearchResponse::set_route": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteSearchResponse::set_route");
            }
        
            // args
            // ref arg
            AMapRoute* route = (AMapRoute*) HEAP[@([args[@"route"] integerValue])];
        
            // ref
            AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.route = route;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_strategy");
            }
        
            // args
            // jsonable arg
            NSInteger strategy = [args[@"strategy"] longValue];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strategy = strategy;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_waypoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_waypoints");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* waypointsRefArray = (NSArray<NSNumber*> *) args[@"waypoints"];
            NSMutableArray<AMapGeoPoint*>* waypoints = [NSMutableArray arrayWithCapacity:waypointsRefArray.count];
            for (int __i__ = 0; __i__ < waypointsRefArray.count; __i__++) {
                AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[waypointsRefArray objectAtIndex:__i__]];
                [waypoints addObject:item];
            }
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.waypoints = waypoints;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_originId");
            }
        
            // args
            // jsonable arg
            NSString* originId = (NSString*) args[@"originId"];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.originId = originId;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_destinationId");
            }
        
            // args
            // jsonable arg
            NSString* destinationId = (NSString*) args[@"destinationId"];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destinationId = destinationId;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_origintype");
            }
        
            // args
            // jsonable arg
            NSString* origintype = (NSString*) args[@"origintype"];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origintype = origintype;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_destinationtype");
            }
        
            // args
            // jsonable arg
            NSString* destinationtype = (NSString*) args[@"destinationtype"];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destinationtype = destinationtype;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_plateProvince");
            }
        
            // args
            // jsonable arg
            NSString* plateProvince = (NSString*) args[@"plateProvince"];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.plateProvince = plateProvince;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_plateNumber");
            }
        
            // args
            // jsonable arg
            NSString* plateNumber = (NSString*) args[@"plateNumber"];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.plateNumber = plateNumber;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_size");
            }
        
            // args
            // enum arg
            AMapTruckSizeType size = (AMapTruckSizeType) [args[@"size"] integerValue];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.size = size;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_height");
            }
        
            // args
            // jsonable arg
            CGFloat height = [args[@"height"] floatValue];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.height = height;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_width");
            }
        
            // args
            // jsonable arg
            CGFloat width = [args[@"width"] floatValue];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.width = width;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_load": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_load");
            }
        
            // args
            // jsonable arg
            CGFloat load = [args[@"load"] floatValue];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.load = load;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_weight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_weight");
            }
        
            // args
            // jsonable arg
            CGFloat weight = [args[@"weight"] floatValue];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.weight = weight;
            methodResult(@"success");
        },
        
        @"AMapTruckRouteSearchRequest::set_axis": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTruckRouteSearchRequest::set_axis");
            }
        
            // args
            // jsonable arg
            NSInteger axis = [args[@"axis"] longValue];
        
            // ref
            AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.axis = axis;
            methodResult(@"success");
        },
        
        @"AMapDistanceSearchRequest::set_origins": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceSearchRequest::set_origins");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* originsRefArray = (NSArray<NSNumber*> *) args[@"origins"];
            NSMutableArray<AMapGeoPoint*>* origins = [NSMutableArray arrayWithCapacity:originsRefArray.count];
            for (int __i__ = 0; __i__ < originsRefArray.count; __i__++) {
                AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[originsRefArray objectAtIndex:__i__]];
                [origins addObject:item];
            }
        
            // ref
            AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origins = origins;
            methodResult(@"success");
        },
        
        @"AMapDistanceSearchRequest::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceSearchRequest::set_destination");
            }
        
            // args
            // ref arg
            AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
        
            // ref
            AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapDistanceSearchRequest::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceSearchRequest::set_type");
            }
        
            // args
            // jsonable arg
            NSInteger type = [args[@"type"] longValue];
        
            // ref
            AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.type = type;
            methodResult(@"success");
        },
        
        @"AMapDistanceSearchResponse::set_results": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceSearchResponse::set_results");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* resultsRefArray = (NSArray<NSNumber*> *) args[@"results"];
            NSMutableArray<AMapDistanceResult*>* results = [NSMutableArray arrayWithCapacity:resultsRefArray.count];
            for (int __i__ = 0; __i__ < resultsRefArray.count; __i__++) {
                AMapDistanceResult* item = (AMapDistanceResult*) HEAP[[resultsRefArray objectAtIndex:__i__]];
                [results addObject:item];
            }
        
            // ref
            AMapDistanceSearchResponse* ref = (AMapDistanceSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.results = results;
            methodResult(@"success");
        },
        
        @"AMapWeatherSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWeatherSearchRequest::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapWeatherSearchRequest::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWeatherSearchRequest::set_type");
            }
        
            // args
            // enum arg
            AMapWeatherType type = (AMapWeatherType) [args[@"type"] integerValue];
        
            // ref
            AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.type = type;
            methodResult(@"success");
        },
        
        @"AMapWeatherSearchResponse::set_lives": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWeatherSearchResponse::set_lives");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* livesRefArray = (NSArray<NSNumber*> *) args[@"lives"];
            NSMutableArray<AMapLocalWeatherLive*>* lives = [NSMutableArray arrayWithCapacity:livesRefArray.count];
            for (int __i__ = 0; __i__ < livesRefArray.count; __i__++) {
                AMapLocalWeatherLive* item = (AMapLocalWeatherLive*) HEAP[[livesRefArray objectAtIndex:__i__]];
                [lives addObject:item];
            }
        
            // ref
            AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.lives = lives;
            methodResult(@"success");
        },
        
        @"AMapWeatherSearchResponse::set_forecasts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWeatherSearchResponse::set_forecasts");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* forecastsRefArray = (NSArray<NSNumber*> *) args[@"forecasts"];
            NSMutableArray<AMapLocalWeatherForecast*>* forecasts = [NSMutableArray arrayWithCapacity:forecastsRefArray.count];
            for (int __i__ = 0; __i__ < forecastsRefArray.count; __i__++) {
                AMapLocalWeatherForecast* item = (AMapLocalWeatherForecast*) HEAP[[forecastsRefArray objectAtIndex:__i__]];
                [forecasts addObject:item];
            }
        
            // ref
            AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.forecasts = forecasts;
            methodResult(@"success");
        },
        
        @"AMapRoadTrafficSearchBaseRequest::set_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchBaseRequest::set_level");
            }
        
            // args
            // jsonable arg
            NSInteger level = [args[@"level"] longValue];
        
            // ref
            AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.level = level;
            methodResult(@"success");
        },
        
        @"AMapRoadTrafficSearchBaseRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchBaseRequest::set_requireExtension");
            }
        
            // args
            // jsonable arg
            BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
            // ref
            AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.requireExtension = requireExtension;
            methodResult(@"success");
        },
        
        @"AMapRoadTrafficSearchRequest::set_roadName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchRequest::set_roadName");
            }
        
            // args
            // jsonable arg
            NSString* roadName = (NSString*) args[@"roadName"];
        
            // ref
            AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.roadName = roadName;
            methodResult(@"success");
        },
        
        @"AMapRoadTrafficSearchRequest::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchRequest::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapRoadTrafficCircleSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficCircleSearchRequest::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
            // ref
            AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapRoadTrafficCircleSearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficCircleSearchRequest::set_radius");
            }
        
            // args
            // jsonable arg
            NSInteger radius = [args[@"radius"] longValue];
        
            // ref
            AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"AMapRoadTrafficSearchResponse::set_trafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadTrafficSearchResponse::set_trafficInfo");
            }
        
            // args
            // ref arg
            AMapTrafficInfo* trafficInfo = (AMapTrafficInfo*) HEAP[@([args[@"trafficInfo"] integerValue])];
        
            // ref
            AMapRoadTrafficSearchResponse* ref = (AMapRoadTrafficSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.trafficInfo = trafficInfo;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchRequest::set_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::set_center");
            }
        
            // args
            // ref arg
            AMapGeoPoint* center = (AMapGeoPoint*) HEAP[@([args[@"center"] integerValue])];
        
            // ref
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.center = center;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::set_radius");
            }
        
            // args
            // jsonable arg
            NSInteger radius = [args[@"radius"] longValue];
        
            // ref
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchRequest::set_searchType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::set_searchType");
            }
        
            // args
            // enum arg
            AMapNearbySearchType searchType = (AMapNearbySearchType) [args[@"searchType"] integerValue];
        
            // ref
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.searchType = searchType;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchRequest::set_timeRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::set_timeRange");
            }
        
            // args
            // jsonable arg
            NSInteger timeRange = [args[@"timeRange"] longValue];
        
            // ref
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.timeRange = timeRange;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchRequest::set_limit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchRequest::set_limit");
            }
        
            // args
            // jsonable arg
            NSInteger limit = [args[@"limit"] longValue];
        
            // ref
            AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.limit = limit;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchResponse::set_count");
            }
        
            // args
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.count = count;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchResponse::set_infos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchResponse::set_infos");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* infosRefArray = (NSArray<NSNumber*> *) args[@"infos"];
            NSMutableArray<AMapNearbyUserInfo*>* infos = [NSMutableArray arrayWithCapacity:infosRefArray.count];
            for (int __i__ = 0; __i__ < infosRefArray.count; __i__++) {
                AMapNearbyUserInfo* item = (AMapNearbyUserInfo*) HEAP[[infosRefArray objectAtIndex:__i__]];
                [infos addObject:item];
            }
        
            // ref
            AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.infos = infos;
            methodResult(@"success");
        },
        
        @"AMapCloudSearchBaseRequest::set_tableID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::set_tableID");
            }
        
            // args
            // jsonable arg
            NSString* tableID = (NSString*) args[@"tableID"];
        
            // ref
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tableID = tableID;
            methodResult(@"success");
        },
        
        @"AMapCloudSearchBaseRequest::set_filter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::set_filter");
            }
        
            // args
            // jsonable arg
            NSArray<NSString*>* filter = (NSArray<NSString*>*) args[@"filter"];
        
            // ref
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.filter = filter;
            methodResult(@"success");
        },
        
        @"AMapCloudSearchBaseRequest::set_sortFields": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudSearchBaseRequest::set_sortFields");
            }
        
            // args
            // jsonable arg
            NSString* sortFields = (NSString*) args[@"sortFields"];
        
            // ref
            AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.sortFields = sortFields;
            methodResult(@"success");
        },
        
    };
}

@end
