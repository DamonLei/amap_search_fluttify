//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler7.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapSearchFluttifyPlugin (SubHandler7)
- (NSDictionary<NSString*, Handler>*) getSubHandler7 {
    return @{
        @"AMapStep::set_orientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_orientation");
            }
        
            // args
            // jsonable arg
            NSString* orientation = (NSString*) args[@"orientation"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.orientation = orientation;
            methodResult(@"success");
        },
        
        @"AMapStep::set_road": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_road");
            }
        
            // args
            // jsonable arg
            NSString* road = (NSString*) args[@"road"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.road = road;
            methodResult(@"success");
        },
        
        @"AMapStep::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] integerValue];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapStep::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] integerValue];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapStep::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_polyline");
            }
        
            // args
            // jsonable arg
            NSString* polyline = (NSString*) args[@"polyline"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polyline = polyline;
            methodResult(@"success");
        },
        
        @"AMapStep::set_action": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_action");
            }
        
            // args
            // jsonable arg
            NSString* action = (NSString*) args[@"action"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.action = action;
            methodResult(@"success");
        },
        
        @"AMapStep::set_assistantAction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_assistantAction");
            }
        
            // args
            // jsonable arg
            NSString* assistantAction = (NSString*) args[@"assistantAction"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.assistantAction = assistantAction;
            methodResult(@"success");
        },
        
        @"AMapStep::set_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_tolls");
            }
        
            // args
            // jsonable arg
            CGFloat tolls = [args[@"tolls"] floatValue];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tolls = tolls;
            methodResult(@"success");
        },
        
        @"AMapStep::set_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_tollDistance");
            }
        
            // args
            // jsonable arg
            NSInteger tollDistance = [args[@"tollDistance"] integerValue];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tollDistance = tollDistance;
            methodResult(@"success");
        },
        
        @"AMapStep::set_tollRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_tollRoad");
            }
        
            // args
            // jsonable arg
            NSString* tollRoad = (NSString*) args[@"tollRoad"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tollRoad = tollRoad;
            methodResult(@"success");
        },
        
        @"AMapStep::set_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_cities");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* citiesRefArray = (NSArray<NSNumber*> *) args[@"cities"];
            NSMutableArray<AMapCity*>* cities = [NSMutableArray arrayWithCapacity:citiesRefArray.count];
            for (int i = 0; i < citiesRefArray.count; i++) {
                AMapCity* item = (AMapCity*) HEAP[[citiesRefArray objectAtIndex:i]];
                [cities addObject:item];
            }
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cities = cities;
            methodResult(@"success");
        },
        
        @"AMapStep::set_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_tmcs");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* tmcsRefArray = (NSArray<NSNumber*> *) args[@"tmcs"];
            NSMutableArray<AMapTMC*>* tmcs = [NSMutableArray arrayWithCapacity:tmcsRefArray.count];
            for (int i = 0; i < tmcsRefArray.count; i++) {
                AMapTMC* item = (AMapTMC*) HEAP[[tmcsRefArray objectAtIndex:i]];
                [tmcs addObject:item];
            }
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tmcs = tmcs;
            methodResult(@"success");
        },
        
        @"AMapPath::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] integerValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapPath::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] integerValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapPath::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_strategy");
            }
        
            // args
            // jsonable arg
            NSString* strategy = (NSString*) args[@"strategy"];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strategy = strategy;
            methodResult(@"success");
        },
        
        @"AMapPath::set_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_steps");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* stepsRefArray = (NSArray<NSNumber*> *) args[@"steps"];
            NSMutableArray<AMapStep*>* steps = [NSMutableArray arrayWithCapacity:stepsRefArray.count];
            for (int i = 0; i < stepsRefArray.count; i++) {
                AMapStep* item = (AMapStep*) HEAP[[stepsRefArray objectAtIndex:i]];
                [steps addObject:item];
            }
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.steps = steps;
            methodResult(@"success");
        },
        
        @"AMapPath::set_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_tolls");
            }
        
            // args
            // jsonable arg
            CGFloat tolls = [args[@"tolls"] floatValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tolls = tolls;
            methodResult(@"success");
        },
        
        @"AMapPath::set_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_tollDistance");
            }
        
            // args
            // jsonable arg
            NSInteger tollDistance = [args[@"tollDistance"] integerValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tollDistance = tollDistance;
            methodResult(@"success");
        },
        
        @"AMapPath::set_totalTrafficLights": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_totalTrafficLights");
            }
        
            // args
            // jsonable arg
            NSInteger totalTrafficLights = [args[@"totalTrafficLights"] integerValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.totalTrafficLights = totalTrafficLights;
            methodResult(@"success");
        },
        
        @"AMapPath::set_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_restriction");
            }
        
            // args
            // jsonable arg
            NSInteger restriction = [args[@"restriction"] integerValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.restriction = restriction;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfoElement::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] integerValue];
        
            // ref
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfoElement::set_pathindex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::set_pathindex");
            }
        
            // args
            // jsonable arg
            NSInteger pathindex = [args[@"pathindex"] integerValue];
        
            // ref
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pathindex = pathindex;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfoElement::set_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::set_restriction");
            }
        
            // args
            // jsonable arg
            NSInteger restriction = [args[@"restriction"] integerValue];
        
            // ref
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.restriction = restriction;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfoElement::set_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::set_tmcs");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* tmcsRefArray = (NSArray<NSNumber*> *) args[@"tmcs"];
            NSMutableArray<AMapTMC*>* tmcs = [NSMutableArray arrayWithCapacity:tmcsRefArray.count];
            for (int i = 0; i < tmcsRefArray.count; i++) {
                AMapTMC* item = (AMapTMC*) HEAP[[tmcsRefArray objectAtIndex:i]];
                [tmcs addObject:item];
            }
        
            // ref
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tmcs = tmcs;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfo::set_startTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfo::set_startTime");
            }
        
            // args
            // jsonable arg
            NSString* startTime = (NSString*) args[@"startTime"];
        
            // ref
            AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.startTime = startTime;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfo::set_elements": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfo::set_elements");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* elementsRefArray = (NSArray<NSNumber*> *) args[@"elements"];
            NSMutableArray<AMapFutureTimeInfoElement*>* elements = [NSMutableArray arrayWithCapacity:elementsRefArray.count];
            for (int i = 0; i < elementsRefArray.count; i++) {
                AMapFutureTimeInfoElement* item = (AMapFutureTimeInfoElement*) HEAP[[elementsRefArray objectAtIndex:i]];
                [elements addObject:item];
            }
        
            // ref
            AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.elements = elements;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_origin");
            }
        
            // args
            // ref arg
            AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_destination");
            }
        
            // args
            // ref arg
            AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] integerValue];
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] integerValue];
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_steps");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* stepsRefArray = (NSArray<NSNumber*> *) args[@"steps"];
            NSMutableArray<AMapStep*>* steps = [NSMutableArray arrayWithCapacity:stepsRefArray.count];
            for (int i = 0; i < stepsRefArray.count; i++) {
                AMapStep* item = (AMapStep*) HEAP[[stepsRefArray objectAtIndex:i]];
                [steps addObject:item];
            }
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.steps = steps;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_origin");
            }
        
            // args
            // ref arg
            AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_destination");
            }
        
            // args
            // ref arg
            AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] integerValue];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] integerValue];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_sname");
            }
        
            // args
            // jsonable arg
            NSString* sname = (NSString*) args[@"sname"];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.sname = sname;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_tname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_tname");
            }
        
            // args
            // jsonable arg
            NSString* tname = (NSString*) args[@"tname"];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tname = tname;
            methodResult(@"success");
        },
        
        @"AMapRailwayStation::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapRailwayStation::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapRailwayStation::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
            // ref
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapRailwayStation::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapRailwayStation::set_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::set_time");
            }
        
            // args
            // jsonable arg
            NSString* time = (NSString*) args[@"time"];
        
            // ref
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.time = time;
            methodResult(@"success");
        },
        
        @"AMapRailwayStation::set_wait": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::set_wait");
            }
        
            // args
            // jsonable arg
            NSInteger wait = [args[@"wait"] integerValue];
        
            // ref
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.wait = wait;
            methodResult(@"success");
        },
        
        @"AMapRailwayStation::set_isStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::set_isStart");
            }
        
            // args
            // jsonable arg
            BOOL isStart = [args[@"isStart"] boolValue];
        
            // ref
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isStart = isStart;
            methodResult(@"success");
        },
        
        @"AMapRailwayStation::set_isEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::set_isEnd");
            }
        
            // args
            // jsonable arg
            BOOL isEnd = [args[@"isEnd"] boolValue];
        
            // ref
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isEnd = isEnd;
            methodResult(@"success");
        },
        
        @"AMapRailwaySpace::set_code": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwaySpace::set_code");
            }
        
            // args
            // jsonable arg
            NSString* code = (NSString*) args[@"code"];
        
            // ref
            AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.code = code;
            methodResult(@"success");
        },
        
        @"AMapRailwaySpace::set_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwaySpace::set_cost");
            }
        
            // args
            // jsonable arg
            CGFloat cost = [args[@"cost"] floatValue];
        
            // ref
            AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cost = cost;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_trip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_trip");
            }
        
            // args
            // jsonable arg
            NSString* trip = (NSString*) args[@"trip"];
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.trip = trip;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_type");
            }
        
            // args
            // jsonable arg
            NSString* type = (NSString*) args[@"type"];
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.type = type;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] integerValue];
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_time");
            }
        
            // args
            // jsonable arg
            NSInteger time = [args[@"time"] integerValue];
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.time = time;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_departureStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_departureStation");
            }
        
            // args
            // ref arg
            AMapRailwayStation* departureStation = (AMapRailwayStation*) HEAP[@([args[@"departureStation"] integerValue])];
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.departureStation = departureStation;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_arrivalStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_arrivalStation");
            }
        
            // args
            // ref arg
            AMapRailwayStation* arrivalStation = (AMapRailwayStation*) HEAP[@([args[@"arrivalStation"] integerValue])];
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.arrivalStation = arrivalStation;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_spaces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_spaces");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* spacesRefArray = (NSArray<NSNumber*> *) args[@"spaces"];
            NSMutableArray<AMapRailwaySpace*>* spaces = [NSMutableArray arrayWithCapacity:spacesRefArray.count];
            for (int i = 0; i < spacesRefArray.count; i++) {
                AMapRailwaySpace* item = (AMapRailwaySpace*) HEAP[[spacesRefArray objectAtIndex:i]];
                [spaces addObject:item];
            }
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.spaces = spaces;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_viaStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_viaStops");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* viaStopsRefArray = (NSArray<NSNumber*> *) args[@"viaStops"];
            NSMutableArray<AMapRailwayStation*>* viaStops = [NSMutableArray arrayWithCapacity:viaStopsRefArray.count];
            for (int i = 0; i < viaStopsRefArray.count; i++) {
                AMapRailwayStation* item = (AMapRailwayStation*) HEAP[[viaStopsRefArray objectAtIndex:i]];
                [viaStops addObject:item];
            }
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.viaStops = viaStops;
            methodResult(@"success");
        },
        
        @"AMapRailway::set_alters": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::set_alters");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* altersRefArray = (NSArray<NSNumber*> *) args[@"alters"];
            NSMutableArray<AMapRailway*>* alters = [NSMutableArray arrayWithCapacity:altersRefArray.count];
            for (int i = 0; i < altersRefArray.count; i++) {
                AMapRailway* item = (AMapRailway*) HEAP[[altersRefArray objectAtIndex:i]];
                [alters addObject:item];
            }
        
            // ref
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.alters = alters;
            methodResult(@"success");
        },
        
        @"AMapSegment::set_walking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::set_walking");
            }
        
            // args
            // ref arg
            AMapWalking* walking = (AMapWalking*) HEAP[@([args[@"walking"] integerValue])];
        
            // ref
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.walking = walking;
            methodResult(@"success");
        },
        
        @"AMapSegment::set_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::set_buslines");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* buslinesRefArray = (NSArray<NSNumber*> *) args[@"buslines"];
            NSMutableArray<AMapBusLine*>* buslines = [NSMutableArray arrayWithCapacity:buslinesRefArray.count];
            for (int i = 0; i < buslinesRefArray.count; i++) {
                AMapBusLine* item = (AMapBusLine*) HEAP[[buslinesRefArray objectAtIndex:i]];
                [buslines addObject:item];
            }
        
            // ref
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.buslines = buslines;
            methodResult(@"success");
        },
        
        @"AMapSegment::set_taxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::set_taxi");
            }
        
            // args
            // ref arg
            AMapTaxi* taxi = (AMapTaxi*) HEAP[@([args[@"taxi"] integerValue])];
        
            // ref
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.taxi = taxi;
            methodResult(@"success");
        },
        
        @"AMapSegment::set_railway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::set_railway");
            }
        
            // args
            // ref arg
            AMapRailway* railway = (AMapRailway*) HEAP[@([args[@"railway"] integerValue])];
        
            // ref
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.railway = railway;
            methodResult(@"success");
        },
        
        @"AMapSegment::set_enterName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::set_enterName");
            }
        
            // args
            // jsonable arg
            NSString* enterName = (NSString*) args[@"enterName"];
        
            // ref
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.enterName = enterName;
            methodResult(@"success");
        },
        
        @"AMapSegment::set_enterLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::set_enterLocation");
            }
        
            // args
            // ref arg
            AMapGeoPoint* enterLocation = (AMapGeoPoint*) HEAP[@([args[@"enterLocation"] integerValue])];
        
            // ref
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.enterLocation = enterLocation;
            methodResult(@"success");
        },
        
        @"AMapSegment::set_exitName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::set_exitName");
            }
        
            // args
            // jsonable arg
            NSString* exitName = (NSString*) args[@"exitName"];
        
            // ref
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.exitName = exitName;
            methodResult(@"success");
        },
        
        @"AMapSegment::set_exitLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::set_exitLocation");
            }
        
            // args
            // ref arg
            AMapGeoPoint* exitLocation = (AMapGeoPoint*) HEAP[@([args[@"exitLocation"] integerValue])];
        
            // ref
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.exitLocation = exitLocation;
            methodResult(@"success");
        },
        
        @"AMapTransit::set_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::set_cost");
            }
        
            // args
            // jsonable arg
            CGFloat cost = [args[@"cost"] floatValue];
        
            // ref
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cost = cost;
            methodResult(@"success");
        },
        
        @"AMapTransit::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] integerValue];
        
            // ref
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapTransit::set_nightflag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::set_nightflag");
            }
        
            // args
            // jsonable arg
            BOOL nightflag = [args[@"nightflag"] boolValue];
        
            // ref
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.nightflag = nightflag;
            methodResult(@"success");
        },
        
        @"AMapTransit::set_walkingDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::set_walkingDistance");
            }
        
            // args
            // jsonable arg
            NSInteger walkingDistance = [args[@"walkingDistance"] integerValue];
        
            // ref
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.walkingDistance = walkingDistance;
            methodResult(@"success");
        },
        
        @"AMapTransit::set_segments": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::set_segments");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* segmentsRefArray = (NSArray<NSNumber*> *) args[@"segments"];
            NSMutableArray<AMapSegment*>* segments = [NSMutableArray arrayWithCapacity:segmentsRefArray.count];
            for (int i = 0; i < segmentsRefArray.count; i++) {
                AMapSegment* item = (AMapSegment*) HEAP[[segmentsRefArray objectAtIndex:i]];
                [segments addObject:item];
            }
        
            // ref
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.segments = segments;
            methodResult(@"success");
        },
        
        @"AMapTransit::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] integerValue];
        
            // ref
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapRoute::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::set_origin");
            }
        
            // args
            // ref arg
            AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
        
            // ref
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"AMapRoute::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::set_destination");
            }
        
            // args
            // ref arg
            AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
        
            // ref
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapRoute::set_taxiCost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::set_taxiCost");
            }
        
            // args
            // jsonable arg
            CGFloat taxiCost = [args[@"taxiCost"] floatValue];
        
            // ref
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.taxiCost = taxiCost;
            methodResult(@"success");
        },
        
        @"AMapRoute::set_paths": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::set_paths");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* pathsRefArray = (NSArray<NSNumber*> *) args[@"paths"];
            NSMutableArray<AMapPath*>* paths = [NSMutableArray arrayWithCapacity:pathsRefArray.count];
            for (int i = 0; i < pathsRefArray.count; i++) {
                AMapPath* item = (AMapPath*) HEAP[[pathsRefArray objectAtIndex:i]];
                [paths addObject:item];
            }
        
            // ref
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.paths = paths;
            methodResult(@"success");
        },
        
        @"AMapRoute::set_transits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::set_transits");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* transitsRefArray = (NSArray<NSNumber*> *) args[@"transits"];
            NSMutableArray<AMapTransit*>* transits = [NSMutableArray arrayWithCapacity:transitsRefArray.count];
            for (int i = 0; i < transitsRefArray.count; i++) {
                AMapTransit* item = (AMapTransit*) HEAP[[transitsRefArray objectAtIndex:i]];
                [transits addObject:item];
            }
        
            // ref
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.transits = transits;
            methodResult(@"success");
        },
        
        @"AMapDistanceResult::set_originID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::set_originID");
            }
        
            // args
            // jsonable arg
            NSInteger originID = [args[@"originID"] integerValue];
        
            // ref
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.originID = originID;
            methodResult(@"success");
        },
        
        @"AMapDistanceResult::set_destID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::set_destID");
            }
        
            // args
            // jsonable arg
            NSInteger destID = [args[@"destID"] integerValue];
        
            // ref
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destID = destID;
            methodResult(@"success");
        },
        
        @"AMapDistanceResult::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] integerValue];
        
            // ref
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapDistanceResult::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] integerValue];
        
            // ref
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapDistanceResult::set_info": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::set_info");
            }
        
            // args
            // jsonable arg
            NSString* info = (NSString*) args[@"info"];
        
            // ref
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.info = info;
            methodResult(@"success");
        },
        
        @"AMapDistanceResult::set_code": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::set_code");
            }
        
            // args
            // jsonable arg
            NSInteger code = [args[@"code"] integerValue];
        
            // ref
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.code = code;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_province");
            }
        
            // args
            // jsonable arg
            NSString* province = (NSString*) args[@"province"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.province = province;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_weather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_weather");
            }
        
            // args
            // jsonable arg
            NSString* weather = (NSString*) args[@"weather"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.weather = weather;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_temperature": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_temperature");
            }
        
            // args
            // jsonable arg
            NSString* temperature = (NSString*) args[@"temperature"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.temperature = temperature;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_windDirection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_windDirection");
            }
        
            // args
            // jsonable arg
            NSString* windDirection = (NSString*) args[@"windDirection"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.windDirection = windDirection;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_windPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_windPower");
            }
        
            // args
            // jsonable arg
            NSString* windPower = (NSString*) args[@"windPower"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.windPower = windPower;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_humidity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_humidity");
            }
        
            // args
            // jsonable arg
            NSString* humidity = (NSString*) args[@"humidity"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.humidity = humidity;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherLive::set_reportTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::set_reportTime");
            }
        
            // args
            // jsonable arg
            NSString* reportTime = (NSString*) args[@"reportTime"];
        
            // ref
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.reportTime = reportTime;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_date": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_date");
            }
        
            // args
            // jsonable arg
            NSString* date = (NSString*) args[@"date"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.date = date;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_week": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_week");
            }
        
            // args
            // jsonable arg
            NSString* week = (NSString*) args[@"week"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.week = week;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_dayWeather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_dayWeather");
            }
        
            // args
            // jsonable arg
            NSString* dayWeather = (NSString*) args[@"dayWeather"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.dayWeather = dayWeather;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_nightWeather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_nightWeather");
            }
        
            // args
            // jsonable arg
            NSString* nightWeather = (NSString*) args[@"nightWeather"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.nightWeather = nightWeather;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_dayTemp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_dayTemp");
            }
        
            // args
            // jsonable arg
            NSString* dayTemp = (NSString*) args[@"dayTemp"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.dayTemp = dayTemp;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_nightTemp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_nightTemp");
            }
        
            // args
            // jsonable arg
            NSString* nightTemp = (NSString*) args[@"nightTemp"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.nightTemp = nightTemp;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_dayWind": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_dayWind");
            }
        
            // args
            // jsonable arg
            NSString* dayWind = (NSString*) args[@"dayWind"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.dayWind = dayWind;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_nightWind": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_nightWind");
            }
        
            // args
            // jsonable arg
            NSString* nightWind = (NSString*) args[@"nightWind"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.nightWind = nightWind;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_dayPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_dayPower");
            }
        
            // args
            // jsonable arg
            NSString* dayPower = (NSString*) args[@"dayPower"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.dayPower = dayPower;
            methodResult(@"success");
        },
        
        @"AMapLocalDayWeatherForecast::set_nightPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::set_nightPower");
            }
        
            // args
            // jsonable arg
            NSString* nightPower = (NSString*) args[@"nightPower"];
        
            // ref
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.nightPower = nightPower;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherForecast::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherForecast::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::set_province");
            }
        
            // args
            // jsonable arg
            NSString* province = (NSString*) args[@"province"];
        
            // ref
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.province = province;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherForecast::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherForecast::set_reportTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::set_reportTime");
            }
        
            // args
            // jsonable arg
            NSString* reportTime = (NSString*) args[@"reportTime"];
        
            // ref
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.reportTime = reportTime;
            methodResult(@"success");
        },
        
        @"AMapLocalWeatherForecast::set_casts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::set_casts");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* castsRefArray = (NSArray<NSNumber*> *) args[@"casts"];
            NSMutableArray<AMapLocalDayWeatherForecast*>* casts = [NSMutableArray arrayWithCapacity:castsRefArray.count];
            for (int i = 0; i < castsRefArray.count; i++) {
                AMapLocalDayWeatherForecast* item = (AMapLocalDayWeatherForecast*) HEAP[[castsRefArray objectAtIndex:i]];
                [casts addObject:item];
            }
        
            // ref
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.casts = casts;
            methodResult(@"success");
        },
        
        @"AMapNearbyUserInfo::set_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUserInfo::set_userID");
            }
        
            // args
            // jsonable arg
            NSString* userID = (NSString*) args[@"userID"];
        
            // ref
            AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.userID = userID;
            methodResult(@"success");
        },
        
        @"AMapNearbyUserInfo::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUserInfo::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
            // ref
            AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapNearbyUserInfo::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUserInfo::set_distance");
            }
        
            // args
            // jsonable arg
            CGFloat distance = [args[@"distance"] floatValue];
        
            // ref
            AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapNearbyUserInfo::set_updatetime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUserInfo::set_updatetime");
            }
        
            // args
            // jsonable arg
            NSTimeInterval updatetime = [args[@"updatetime"] doubleValue];
        
            // ref
            AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.updatetime = updatetime;
            methodResult(@"success");
        },
        
        @"AMapTrafficEvaluation::set_evaluationDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::set_evaluationDescription");
            }
        
            // args
            // jsonable arg
            NSString* evaluationDescription = (NSString*) args[@"evaluationDescription"];
        
            // ref
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.evaluationDescription = evaluationDescription;
            methodResult(@"success");
        },
        
        @"AMapTrafficEvaluation::set_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::set_status");
            }
        
            // args
            // jsonable arg
            NSInteger status = [args[@"status"] integerValue];
        
            // ref
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.status = status;
            methodResult(@"success");
        },
        
        @"AMapTrafficEvaluation::set_expedite": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::set_expedite");
            }
        
            // args
            // jsonable arg
            NSString* expedite = (NSString*) args[@"expedite"];
        
            // ref
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.expedite = expedite;
            methodResult(@"success");
        },
        
        @"AMapTrafficEvaluation::set_congested": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::set_congested");
            }
        
            // args
            // jsonable arg
            NSString* congested = (NSString*) args[@"congested"];
        
            // ref
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.congested = congested;
            methodResult(@"success");
        },
        
        @"AMapTrafficEvaluation::set_blocked": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::set_blocked");
            }
        
            // args
            // jsonable arg
            NSString* blocked = (NSString*) args[@"blocked"];
        
            // ref
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.blocked = blocked;
            methodResult(@"success");
        },
        
        @"AMapTrafficEvaluation::set_unknown": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::set_unknown");
            }
        
            // args
            // jsonable arg
            NSString* unknown = (NSString*) args[@"unknown"];
        
            // ref
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.unknown = unknown;
            methodResult(@"success");
        },
        
        @"AMapTrafficRoad::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapTrafficRoad::set_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::set_status");
            }
        
            // args
            // jsonable arg
            NSInteger status = [args[@"status"] integerValue];
        
            // ref
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.status = status;
            methodResult(@"success");
        },
        
        @"AMapTrafficRoad::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::set_direction");
            }
        
            // args
            // jsonable arg
            NSString* direction = (NSString*) args[@"direction"];
        
            // ref
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.direction = direction;
            methodResult(@"success");
        },
        
        @"AMapTrafficRoad::set_angle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::set_angle");
            }
        
            // args
            // jsonable arg
            float angle = [args[@"angle"] floatValue];
        
            // ref
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.angle = angle;
            methodResult(@"success");
        },
        
        @"AMapTrafficRoad::set_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::set_speed");
            }
        
            // args
            // jsonable arg
            float speed = [args[@"speed"] floatValue];
        
            // ref
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.speed = speed;
            methodResult(@"success");
        },
        
        @"AMapTrafficRoad::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::set_polyline");
            }
        
            // args
            // jsonable arg
            NSString* polyline = (NSString*) args[@"polyline"];
        
            // ref
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polyline = polyline;
            methodResult(@"success");
        },
        
        @"AMapTrafficInfo::set_statusDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficInfo::set_statusDescription");
            }
        
            // args
            // jsonable arg
            NSString* statusDescription = (NSString*) args[@"statusDescription"];
        
            // ref
            AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.statusDescription = statusDescription;
            methodResult(@"success");
        },
        
        @"AMapTrafficInfo::set_evaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficInfo::set_evaluation");
            }
        
            // args
            // ref arg
            AMapTrafficEvaluation* evaluation = (AMapTrafficEvaluation*) HEAP[@([args[@"evaluation"] integerValue])];
        
            // ref
            AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.evaluation = evaluation;
            methodResult(@"success");
        },
        
        @"AMapTrafficInfo::set_roads": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficInfo::set_roads");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* roadsRefArray = (NSArray<NSNumber*> *) args[@"roads"];
            NSMutableArray<AMapTrafficRoad*>* roads = [NSMutableArray arrayWithCapacity:roadsRefArray.count];
            for (int i = 0; i < roadsRefArray.count; i++) {
                AMapTrafficRoad* item = (AMapTrafficRoad*) HEAP[[roadsRefArray objectAtIndex:i]];
                [roads addObject:item];
            }
        
            // ref
            AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.roads = roads;
            methodResult(@"success");
        },
        
        @"AMapCloudImage::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudImage::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapCloudImage::set_preurl": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudImage::set_preurl");
            }
        
            // args
            // jsonable arg
            NSString* preurl = (NSString*) args[@"preurl"];
        
            // ref
            AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.preurl = preurl;
            methodResult(@"success");
        },
        
        @"AMapCloudImage::set_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudImage::set_url");
            }
        
            // args
            // jsonable arg
            NSString* url = (NSString*) args[@"url"];
        
            // ref
            AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.url = url;
            methodResult(@"success");
        },
        
        @"AMapCloudPOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::set_uid");
            }
        
            // args
            // jsonable arg
            NSInteger uid = [args[@"uid"] integerValue];
        
            // ref
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapCloudPOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapCloudPOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
            // ref
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapCloudPOI::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"AMapCloudPOI::set_createTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::set_createTime");
            }
        
            // args
            // jsonable arg
            NSString* createTime = (NSString*) args[@"createTime"];
        
            // ref
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.createTime = createTime;
            methodResult(@"success");
        },
        
        @"AMapCloudPOI::set_updateTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::set_updateTime");
            }
        
            // args
            // jsonable arg
            NSString* updateTime = (NSString*) args[@"updateTime"];
        
            // ref
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.updateTime = updateTime;
            methodResult(@"success");
        },
        
        @"AMapCloudPOI::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] integerValue];
        
            // ref
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapCloudPOI::set_images": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::set_images");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* imagesRefArray = (NSArray<NSNumber*> *) args[@"images"];
            NSMutableArray<AMapCloudImage*>* images = [NSMutableArray arrayWithCapacity:imagesRefArray.count];
            for (int i = 0; i < imagesRefArray.count; i++) {
                AMapCloudImage* item = (AMapCloudImage*) HEAP[[imagesRefArray objectAtIndex:i]];
                [images addObject:item];
            }
        
            // ref
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.images = images;
            methodResult(@"success");
        },
        
        @"AMapNearbyUploadInfo::set_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUploadInfo::set_userID");
            }
        
            // args
            // jsonable arg
            NSString* userID = (NSString*) args[@"userID"];
        
            // ref
            AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.userID = userID;
            methodResult(@"success");
        },
        
        @"AMapNearbyUploadInfo::set_coordinateType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUploadInfo::set_coordinateType");
            }
        
            // args
            // enum arg
            AMapSearchCoordinateType coordinateType = (AMapSearchCoordinateType) [args[@"coordinateType"] integerValue];
        
            // ref
            AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.coordinateType = coordinateType;
            methodResult(@"success");
        },
        
        @"AMapNearbyUploadInfo::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUploadInfo::set_coordinate");
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.coordinate = coordinate;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchManager::set_uploadTimeInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchManager::set_uploadTimeInterval");
            }
        
            // args
            // jsonable arg
            NSTimeInterval uploadTimeInterval = [args[@"uploadTimeInterval"] doubleValue];
        
            // ref
            AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uploadTimeInterval = uploadTimeInterval;
            methodResult(@"success");
        },
        
        @"AMapNearbySearchManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchManager::set_delegate");
            }
        
            // args
        
        
            // ref
            AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.delegate = self;
            methodResult(@"success");
        },
        
        @"AMapSearchAPI::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSearchAPI::set_delegate");
            }
        
            // args
        
        
            // ref
            AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.delegate = self;
            methodResult(@"success");
        },
        
        @"AMapSearchAPI::set_timeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSearchAPI::set_timeout");
            }
        
            // args
            // jsonable arg
            NSInteger timeout = [args[@"timeout"] integerValue];
        
            // ref
            AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.timeout = timeout;
            methodResult(@"success");
        },
        
        @"AMapSearchAPI::set_language": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSearchAPI::set_language");
            }
        
            // args
            // enum arg
            AMapSearchLanguage language = (AMapSearchLanguage) [args[@"language"] integerValue];
        
            // ref
            AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.language = language;
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_types_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* types = (NSString*) args[@"types"];
        
                // ref
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.types = types;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_sortrule_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger sortrule = [args[@"sortrule"] integerValue];
        
                // ref
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.sortrule = sortrule;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_offset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger offset = [args[@"offset"] integerValue];
        
                // ref
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.offset = offset;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_page_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger page = [args[@"page"] integerValue];
        
                // ref
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.page = page;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_building_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* building = (NSString*) args[@"building"];
        
                // ref
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.building = building;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
                // ref
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.requireExtension = requireExtension;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchBaseRequest::set_requireSubPOIs_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                BOOL requireSubPOIs = [args[@"requireSubPOIs"] boolValue];
        
                // ref
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.requireSubPOIs = requireSubPOIs;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIIDSearchRequest::set_uid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* uid = (NSString*) args[@"uid"];
        
                // ref
                AMapPOIIDSearchRequest* ref = (AMapPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.uid = uid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIKeywordsSearchRequest::set_keywords_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* keywords = (NSString*) args[@"keywords"];
        
                // ref
                AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.keywords = keywords;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIKeywordsSearchRequest::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.city = city;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIKeywordsSearchRequest::set_cityLimit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                BOOL cityLimit = [args[@"cityLimit"] boolValue];
        
                // ref
                AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cityLimit = cityLimit;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIKeywordsSearchRequest::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
                // ref
                AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIAroundSearchRequest::set_keywords_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* keywords = (NSString*) args[@"keywords"];
        
                // ref
                AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.keywords = keywords;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIAroundSearchRequest::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
                // ref
                AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIAroundSearchRequest::set_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger radius = [args[@"radius"] integerValue];
        
                // ref
                AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.radius = radius;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIAroundSearchRequest::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.city = city;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIPolygonSearchRequest::set_keywords_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* keywords = (NSString*) args[@"keywords"];
        
                // ref
                AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.keywords = keywords;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIPolygonSearchRequest::set_polygon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapGeoPolygon* polygon = (AMapGeoPolygon*) HEAP[@([args[@"polygon"] integerValue])];
        
                // ref
                AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.polygon = polygon;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchResponse::set_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.count = count;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchResponse::set_suggestion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapSuggestion* suggestion = (AMapSuggestion*) HEAP[@([args[@"suggestion"] integerValue])];
        
                // ref
                AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.suggestion = suggestion;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOISearchResponse::set_pois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
                NSMutableArray<AMapPOI*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
                for (int i = 0; i < poisRefArray.count; i++) {
                    AMapPOI* item = (AMapPOI*) HEAP[[poisRefArray objectAtIndex:i]];
                    [pois addObject:item];
                }
        
                // ref
                AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pois = pois;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_origin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
        
                // ref
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.origin = origin;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_destination_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
        
                // ref
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.destination = destination;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_searchType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // enum arg
                AMapRoutePOISearchType searchType = (AMapRoutePOISearchType) [args[@"searchType"] integerValue];
        
                // ref
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.searchType = searchType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_strategy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger strategy = [args[@"strategy"] integerValue];
        
                // ref
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.strategy = strategy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_range_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger range = [args[@"range"] integerValue];
        
                // ref
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.range = range;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_polylineStr_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* polylineStr = (NSString*) args[@"polylineStr"];
        
                // ref
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.polylineStr = polylineStr;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchRequest::set_polyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* polylineRefArray = (NSArray<NSNumber*> *) args[@"polyline"];
                NSMutableArray<AMapGeoPoint*>* polyline = [NSMutableArray arrayWithCapacity:polylineRefArray.count];
                for (int i = 0; i < polylineRefArray.count; i++) {
                    AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[polylineRefArray objectAtIndex:i]];
                    [polyline addObject:item];
                }
        
                // ref
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.polyline = polyline;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchResponse::set_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.count = count;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRoutePOISearchResponse::set_pois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
                NSMutableArray<AMapRoutePOI*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
                for (int i = 0; i < poisRefArray.count; i++) {
                    AMapRoutePOI* item = (AMapRoutePOI*) HEAP[[poisRefArray objectAtIndex:i]];
                    [pois addObject:item];
                }
        
                // ref
                AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pois = pois;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_keywords_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* keywords = (NSString*) args[@"keywords"];
        
                // ref
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.keywords = keywords;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.city = city;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_types_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* types = (NSString*) args[@"types"];
        
                // ref
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.types = types;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_cityLimit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                BOOL cityLimit = [args[@"cityLimit"] boolValue];
        
                // ref
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cityLimit = cityLimit;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchRequest::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* location = (NSString*) args[@"location"];
        
                // ref
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchResponse::set_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.count = count;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapInputTipsSearchResponse::set_tips_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* tipsRefArray = (NSArray<NSNumber*> *) args[@"tips"];
                NSMutableArray<AMapTip*>* tips = [NSMutableArray arrayWithCapacity:tipsRefArray.count];
                for (int i = 0; i < tipsRefArray.count; i++) {
                    AMapTip* item = (AMapTip*) HEAP[[tipsRefArray objectAtIndex:i]];
                    [tips addObject:item];
                }
        
                // ref
                AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.tips = tips;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeocodeSearchRequest::set_address_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* address = (NSString*) args[@"address"];
        
                // ref
                AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.address = address;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeocodeSearchRequest::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.city = city;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeocodeSearchResponse::set_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.count = count;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapGeocodeSearchResponse::set_geocodes_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* geocodesRefArray = (NSArray<NSNumber*> *) args[@"geocodes"];
                NSMutableArray<AMapGeocode*>* geocodes = [NSMutableArray arrayWithCapacity:geocodesRefArray.count];
                for (int i = 0; i < geocodesRefArray.count; i++) {
                    AMapGeocode* item = (AMapGeocode*) HEAP[[geocodesRefArray objectAtIndex:i]];
                    [geocodes addObject:item];
                }
        
                // ref
                AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.geocodes = geocodes;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchRequest::set_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
                // ref
                AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.requireExtension = requireExtension;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchRequest::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
        
                // ref
                AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchRequest::set_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger radius = [args[@"radius"] integerValue];
        
                // ref
                AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.radius = radius;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchRequest::set_poitype_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* poitype = (NSString*) args[@"poitype"];
        
                // ref
                AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.poitype = poitype;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapReGeocodeSearchResponse::set_regeocode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapReGeocode* regeocode = (AMapReGeocode*) HEAP[@([args[@"regeocode"] integerValue])];
        
                // ref
                AMapReGeocodeSearchResponse* ref = (AMapReGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.regeocode = regeocode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchRequest::set_keywords_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* keywords = (NSString*) args[@"keywords"];
        
                // ref
                AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.keywords = keywords;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchRequest::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.city = city;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchRequest::set_offset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger offset = [args[@"offset"] integerValue];
        
                // ref
                AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.offset = offset;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchRequest::set_page_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger page = [args[@"page"] integerValue];
        
                // ref
                AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.page = page;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchResponse::set_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSInteger count = [args[@"count"] integerValue];
        
                // ref
                AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.count = count;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchResponse::set_suggestion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                AMapSuggestion* suggestion = (AMapSuggestion*) HEAP[@([args[@"suggestion"] integerValue])];
        
                // ref
                AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.suggestion = suggestion;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusStopSearchResponse::set_busstops_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // list arg
                NSArray<NSNumber*>* busstopsRefArray = (NSArray<NSNumber*> *) args[@"busstops"];
                NSMutableArray<AMapBusStop*>* busstops = [NSMutableArray arrayWithCapacity:busstopsRefArray.count];
                for (int i = 0; i < busstopsRefArray.count; i++) {
                    AMapBusStop* item = (AMapBusStop*) HEAP[[busstopsRefArray objectAtIndex:i]];
                    [busstops addObject:item];
                }
        
                // ref
                AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.busstops = busstops;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusLineBaseSearchRequest::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.city = city;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapBusLineBaseSearchRequest::set_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                BOOL requireExtension = [args[@"requireExtension"] boolValue];
        
                // ref
                AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.requireExtension = requireExtension;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
    };
}

@end
