//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "AmapSearchFluttifyPlugin.h"
#import <objc/runtime.h>

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, id, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapSearchFluttifyPlugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      @"AMapSearchObject::formattedDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapSearchObject* ref = (AMapSearchObject*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchObject@%@::formattedDescription(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref formattedDescription];
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"AMapGeoPoint::locationWithLatitudeLongitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat lat = [args[@"lat"] floatValue];
          // jsonable arg
          CGFloat lon = [args[@"lon"] floatValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoPoint::locationWithLatitude(暂未实现参数打印)");
          }
      
          // invoke native method
          AMapGeoPoint* result = [AMapGeoPoint locationWithLatitude: lat longitude: lon];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapGeoPolygon::polygonWithPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* pointsRefArray = (NSArray<NSNumber*> *) args[@"points"];
          NSMutableArray<NSArray*>* points = [NSMutableArray arrayWithCapacity:pointsRefArray.count];
          for (int i = 0; i < pointsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[pointsRefArray objectAtIndex:i]];
              [points addObject:item];
          }
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoPolygon::polygonWithPoints(暂未实现参数打印)");
          }
      
          // invoke native method
          AMapGeoPolygon* result = [AMapGeoPolygon polygonWithPoints: points];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapNearbySearchManagerDelegate::nearbyInfoForUploading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapNearbySearchManager* manager = (AMapNearbySearchManager*) HEAP[@([args[@"manager"] integerValue])];
      
          // ref
          id<AMapNearbySearchManagerDelegate> ref = (id<AMapNearbySearchManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapNearbySearchManagerDelegate@%@::nearbyInfoForUploading(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          AMapNearbyUploadInfo* result = [ref nearbyInfoForUploading: manager];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapNearbySearchManagerDelegate::onNearbyInfoUploadedWithError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<AMapNearbySearchManagerDelegate> ref = (id<AMapNearbySearchManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapNearbySearchManagerDelegate@%@::onNearbyInfoUploadedWithError(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onNearbyInfoUploadedWithError : error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapNearbySearchManagerDelegate::onUserInfoClearedWithError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<AMapNearbySearchManagerDelegate> ref = (id<AMapNearbySearchManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapNearbySearchManagerDelegate@%@::onUserInfoClearedWithError(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onUserInfoClearedWithError : error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapNearbySearchManager::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapNearbySearchManager::sharedInstance(暂未实现参数打印)");
          }
      
          // invoke native method
          AMapNearbySearchManager* result = [AMapNearbySearchManager sharedInstance];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapNearbySearchManager::startAutoUploadNearbyInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapNearbySearchManager@%@::startAutoUploadNearbyInfo(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref startAutoUploadNearbyInfo ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapNearbySearchManager::stopAutoUploadNearbyInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapNearbySearchManager@%@::stopAutoUploadNearbyInfo(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopAutoUploadNearbyInfo ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapNearbySearchManager::uploadNearbyInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapNearbyUploadInfo* info = (AMapNearbyUploadInfo*) HEAP[@([args[@"info"] integerValue])];
      
          // ref
          AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapNearbySearchManager@%@::uploadNearbyInfo(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref uploadNearbyInfo: info];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapNearbySearchManager::clearUserInfoWithID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* userID = (NSString*) args[@"userID"];
      
          // ref
          AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapNearbySearchManager@%@::clearUserInfoWithID(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref clearUserInfoWithID: userID];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::init": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::init(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          AMapSearchAPI* result = [ref init];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::cancelAllRequests": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::cancelAllRequests(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancelAllRequests ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapPOIIDSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapPOIIDSearchRequest* request = (AMapPOIIDSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapPOIIDSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapPOIIDSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapPOIKeywordsSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapPOIKeywordsSearchRequest* request = (AMapPOIKeywordsSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapPOIKeywordsSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapPOIKeywordsSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapPOIAroundSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapPOIAroundSearchRequest* request = (AMapPOIAroundSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapPOIAroundSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapPOIAroundSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapPOIPolygonSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapPOIPolygonSearchRequest* request = (AMapPOIPolygonSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapPOIPolygonSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapPOIPolygonSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapRoutePOISearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRoutePOISearchRequest* request = (AMapRoutePOISearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapRoutePOISearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapRoutePOISearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapGeocodeSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeocodeSearchRequest* request = (AMapGeocodeSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapGeocodeSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapGeocodeSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapReGoecodeSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapReGeocodeSearchRequest* request = (AMapReGeocodeSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapReGoecodeSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapReGoecodeSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapInputTipsSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapInputTipsSearchRequest* request = (AMapInputTipsSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapInputTipsSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapInputTipsSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapBusStopSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapBusStopSearchRequest* request = (AMapBusStopSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapBusStopSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapBusStopSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapBusLineIDSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapBusLineIDSearchRequest* request = (AMapBusLineIDSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapBusLineIDSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapBusLineIDSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapBusLineNameSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapBusLineNameSearchRequest* request = (AMapBusLineNameSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapBusLineNameSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapBusLineNameSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapDistrictSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapDistrictSearchRequest* request = (AMapDistrictSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapDistrictSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapDistrictSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapDrivingRouteSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapDrivingRouteSearchRequest* request = (AMapDrivingRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapDrivingRouteSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapDrivingRouteSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapWalkingRouteSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapWalkingRouteSearchRequest* request = (AMapWalkingRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapWalkingRouteSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapWalkingRouteSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapTransitRouteSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapTransitRouteSearchRequest* request = (AMapTransitRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapTransitRouteSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapTransitRouteSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapRidingRouteSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRidingRouteSearchRequest* request = (AMapRidingRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapRidingRouteSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapRidingRouteSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapTruckRouteSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapTruckRouteSearchRequest* request = (AMapTruckRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapTruckRouteSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapTruckRouteSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapFutureRouteSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapFutureRouteSearchRequest* request = (AMapFutureRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapFutureRouteSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapFutureRouteSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapWeatherSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapWeatherSearchRequest* request = (AMapWeatherSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapWeatherSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapWeatherSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapRoadTrafficSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRoadTrafficSearchRequest* request = (AMapRoadTrafficSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapRoadTrafficSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapRoadTrafficSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapRoadTrafficCircleSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRoadTrafficCircleSearchRequest* request = (AMapRoadTrafficCircleSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapRoadTrafficCircleSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapRoadTrafficCircleSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapDistanceSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapDistanceSearchRequest* request = (AMapDistanceSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapDistanceSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapDistanceSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapNearbySearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapNearbySearchRequest* request = (AMapNearbySearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapNearbySearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapNearbySearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapCloudPOIAroundSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapCloudPOIAroundSearchRequest* request = (AMapCloudPOIAroundSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapCloudPOIAroundSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapCloudPOIAroundSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapCloudPOIPolygonSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapCloudPOIPolygonSearchRequest* request = (AMapCloudPOIPolygonSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapCloudPOIPolygonSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapCloudPOIPolygonSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapCloudPOIIDSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapCloudPOIIDSearchRequest* request = (AMapCloudPOIIDSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapCloudPOIIDSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapCloudPOIIDSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapCloudPOILocalSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapCloudPOILocalSearchRequest* request = (AMapCloudPOILocalSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapCloudPOILocalSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapCloudPOILocalSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapLocationShareSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapLocationShareSearchRequest* request = (AMapLocationShareSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapLocationShareSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapLocationShareSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapPOIShareSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapPOIShareSearchRequest* request = (AMapPOIShareSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapPOIShareSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapPOIShareSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapRouteShareSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRouteShareSearchRequest* request = (AMapRouteShareSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapRouteShareSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapRouteShareSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchAPI::AMapNavigationShareSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapNavigationShareSearchRequest* request = (AMapNavigationShareSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchAPI@%@::AMapNavigationShareSearch(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapNavigationShareSearch : request];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::AMapSearchRequestDidFailWithError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id request = (id) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::AMapSearchRequest(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref AMapSearchRequest : request didFailWithError: error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onPOISearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapPOISearchBaseRequest* request = (AMapPOISearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapPOISearchResponse* response = (AMapPOISearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onPOISearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onPOISearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onRoutePOISearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRoutePOISearchRequest* request = (AMapRoutePOISearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapRoutePOISearchResponse* response = (AMapRoutePOISearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onRoutePOISearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onRoutePOISearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onGeocodeSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeocodeSearchRequest* request = (AMapGeocodeSearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapGeocodeSearchResponse* response = (AMapGeocodeSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onGeocodeSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onGeocodeSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onReGeocodeSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapReGeocodeSearchRequest* request = (AMapReGeocodeSearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapReGeocodeSearchResponse* response = (AMapReGeocodeSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onReGeocodeSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onReGeocodeSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onInputTipsSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapInputTipsSearchRequest* request = (AMapInputTipsSearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapInputTipsSearchResponse* response = (AMapInputTipsSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onInputTipsSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onInputTipsSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onBusStopSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapBusStopSearchRequest* request = (AMapBusStopSearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapBusStopSearchResponse* response = (AMapBusStopSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onBusStopSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onBusStopSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onBusLineSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapBusLineBaseSearchRequest* request = (AMapBusLineBaseSearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapBusLineSearchResponse* response = (AMapBusLineSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onBusLineSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onBusLineSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onDistrictSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapDistrictSearchRequest* request = (AMapDistrictSearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapDistrictSearchResponse* response = (AMapDistrictSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onDistrictSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onDistrictSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onRouteSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRouteSearchBaseRequest* request = (AMapRouteSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapRouteSearchResponse* response = (AMapRouteSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onRouteSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onRouteSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onFutureRouteSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRouteSearchBaseRequest* request = (AMapRouteSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapFutureRouteSearchResponse* response = (AMapFutureRouteSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onFutureRouteSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onFutureRouteSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onDistanceSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapDistanceSearchRequest* request = (AMapDistanceSearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapDistanceSearchResponse* response = (AMapDistanceSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onDistanceSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onDistanceSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onWeatherSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapWeatherSearchRequest* request = (AMapWeatherSearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapWeatherSearchResponse* response = (AMapWeatherSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onWeatherSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onWeatherSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onRoadTrafficSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapRoadTrafficSearchBaseRequest* request = (AMapRoadTrafficSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapRoadTrafficSearchResponse* response = (AMapRoadTrafficSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onRoadTrafficSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onRoadTrafficSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onNearbySearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapNearbySearchRequest* request = (AMapNearbySearchRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapNearbySearchResponse* response = (AMapNearbySearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onNearbySearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onNearbySearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onCloudSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapCloudSearchBaseRequest* request = (AMapCloudSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapCloudPOISearchResponse* response = (AMapCloudPOISearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onCloudSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCloudSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchDelegate::onShareSearchDoneResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapShareSearchBaseRequest* request = (AMapShareSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
          // ref arg
          AMapShareSearchResponse* response = (AMapShareSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
          // ref
          id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapSearchDelegate@%@::onShareSearchDone(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onShareSearchDone : request response: response];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapSearchObject::formattedDescription_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapSearchObject* ref = (AMapSearchObject*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSString* result = [ref formattedDescription];
      
              // result
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoPoint::locationWithLatitudeLongitude_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat lat = [args[@"lat"] floatValue];
              // jsonable arg
              CGFloat lon = [args[@"lon"] floatValue];
      
              // ref
        
      
              // invoke native method
              AMapGeoPoint* result = [AMapGeoPoint locationWithLatitude: lat longitude: lon];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoPolygon::polygonWithPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* pointsRefArray = (NSArray<NSNumber*> *) args[@"points"];
              NSMutableArray<NSArray*>* points = [NSMutableArray arrayWithCapacity:pointsRefArray.count];
              for (int i = 0; i < pointsRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[pointsRefArray objectAtIndex:i]];
                  [points addObject:item];
              }
      
              // ref
        
      
              // invoke native method
              AMapGeoPolygon* result = [AMapGeoPolygon polygonWithPoints: points];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapNearbySearchManagerDelegate::nearbyInfoForUploading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapNearbySearchManager* manager = (AMapNearbySearchManager*) HEAP[@([args[@"manager"] integerValue])];
      
              // ref
              id<AMapNearbySearchManagerDelegate> ref = (id<AMapNearbySearchManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              AMapNearbyUploadInfo* result = [ref nearbyInfoForUploading: manager];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapNearbySearchManagerDelegate::onNearbyInfoUploadedWithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<AMapNearbySearchManagerDelegate> ref = (id<AMapNearbySearchManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onNearbyInfoUploadedWithError : error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapNearbySearchManagerDelegate::onUserInfoClearedWithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<AMapNearbySearchManagerDelegate> ref = (id<AMapNearbySearchManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onUserInfoClearedWithError : error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapNearbySearchManager::sharedInstance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
        
      
              // invoke native method
              AMapNearbySearchManager* result = [AMapNearbySearchManager sharedInstance];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapNearbySearchManager::startAutoUploadNearbyInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref startAutoUploadNearbyInfo ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapNearbySearchManager::stopAutoUploadNearbyInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref stopAutoUploadNearbyInfo ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapNearbySearchManager::uploadNearbyInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapNearbyUploadInfo* info = (AMapNearbyUploadInfo*) HEAP[@([args[@"info"] integerValue])];
      
              // ref
              AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref uploadNearbyInfo: info];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapNearbySearchManager::clearUserInfoWithID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* userID = (NSString*) args[@"userID"];
      
              // ref
              AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref clearUserInfoWithID: userID];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::init_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              AMapSearchAPI* result = [ref init];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::cancelAllRequests_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cancelAllRequests ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapPOIIDSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapPOIIDSearchRequest* request = (AMapPOIIDSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapPOIIDSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapPOIKeywordsSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapPOIKeywordsSearchRequest* request = (AMapPOIKeywordsSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapPOIKeywordsSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapPOIAroundSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapPOIAroundSearchRequest* request = (AMapPOIAroundSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapPOIAroundSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapPOIPolygonSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapPOIPolygonSearchRequest* request = (AMapPOIPolygonSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapPOIPolygonSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapRoutePOISearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRoutePOISearchRequest* request = (AMapRoutePOISearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapRoutePOISearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapGeocodeSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeocodeSearchRequest* request = (AMapGeocodeSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapGeocodeSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapReGoecodeSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapReGeocodeSearchRequest* request = (AMapReGeocodeSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapReGoecodeSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapInputTipsSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapInputTipsSearchRequest* request = (AMapInputTipsSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapInputTipsSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapBusStopSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapBusStopSearchRequest* request = (AMapBusStopSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapBusStopSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapBusLineIDSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapBusLineIDSearchRequest* request = (AMapBusLineIDSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapBusLineIDSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapBusLineNameSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapBusLineNameSearchRequest* request = (AMapBusLineNameSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapBusLineNameSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapDistrictSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapDistrictSearchRequest* request = (AMapDistrictSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapDistrictSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapDrivingRouteSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapDrivingRouteSearchRequest* request = (AMapDrivingRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapDrivingRouteSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapWalkingRouteSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapWalkingRouteSearchRequest* request = (AMapWalkingRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapWalkingRouteSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapTransitRouteSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapTransitRouteSearchRequest* request = (AMapTransitRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapTransitRouteSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapRidingRouteSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRidingRouteSearchRequest* request = (AMapRidingRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapRidingRouteSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapTruckRouteSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapTruckRouteSearchRequest* request = (AMapTruckRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapTruckRouteSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapFutureRouteSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapFutureRouteSearchRequest* request = (AMapFutureRouteSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapFutureRouteSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapWeatherSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapWeatherSearchRequest* request = (AMapWeatherSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapWeatherSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapRoadTrafficSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRoadTrafficSearchRequest* request = (AMapRoadTrafficSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapRoadTrafficSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapRoadTrafficCircleSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRoadTrafficCircleSearchRequest* request = (AMapRoadTrafficCircleSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapRoadTrafficCircleSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapDistanceSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapDistanceSearchRequest* request = (AMapDistanceSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapDistanceSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapNearbySearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapNearbySearchRequest* request = (AMapNearbySearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapNearbySearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapCloudPOIAroundSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapCloudPOIAroundSearchRequest* request = (AMapCloudPOIAroundSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapCloudPOIAroundSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapCloudPOIPolygonSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapCloudPOIPolygonSearchRequest* request = (AMapCloudPOIPolygonSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapCloudPOIPolygonSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapCloudPOIIDSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapCloudPOIIDSearchRequest* request = (AMapCloudPOIIDSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapCloudPOIIDSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapCloudPOILocalSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapCloudPOILocalSearchRequest* request = (AMapCloudPOILocalSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapCloudPOILocalSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapLocationShareSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapLocationShareSearchRequest* request = (AMapLocationShareSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapLocationShareSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapPOIShareSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapPOIShareSearchRequest* request = (AMapPOIShareSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapPOIShareSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapRouteShareSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRouteShareSearchRequest* request = (AMapRouteShareSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapRouteShareSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchAPI::AMapNavigationShareSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapNavigationShareSearchRequest* request = (AMapNavigationShareSearchRequest*) HEAP[@([args[@"request"] integerValue])];
      
              // ref
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapNavigationShareSearch : request];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::AMapSearchRequestDidFailWithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id request = (id) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref AMapSearchRequest : request didFailWithError: error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onPOISearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapPOISearchBaseRequest* request = (AMapPOISearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapPOISearchResponse* response = (AMapPOISearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onPOISearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onRoutePOISearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRoutePOISearchRequest* request = (AMapRoutePOISearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapRoutePOISearchResponse* response = (AMapRoutePOISearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onRoutePOISearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onGeocodeSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeocodeSearchRequest* request = (AMapGeocodeSearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapGeocodeSearchResponse* response = (AMapGeocodeSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onGeocodeSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onReGeocodeSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapReGeocodeSearchRequest* request = (AMapReGeocodeSearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapReGeocodeSearchResponse* response = (AMapReGeocodeSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onReGeocodeSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onInputTipsSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapInputTipsSearchRequest* request = (AMapInputTipsSearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapInputTipsSearchResponse* response = (AMapInputTipsSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onInputTipsSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onBusStopSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapBusStopSearchRequest* request = (AMapBusStopSearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapBusStopSearchResponse* response = (AMapBusStopSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onBusStopSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onBusLineSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapBusLineBaseSearchRequest* request = (AMapBusLineBaseSearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapBusLineSearchResponse* response = (AMapBusLineSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onBusLineSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onDistrictSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapDistrictSearchRequest* request = (AMapDistrictSearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapDistrictSearchResponse* response = (AMapDistrictSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onDistrictSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onRouteSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRouteSearchBaseRequest* request = (AMapRouteSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapRouteSearchResponse* response = (AMapRouteSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onRouteSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onFutureRouteSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRouteSearchBaseRequest* request = (AMapRouteSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapFutureRouteSearchResponse* response = (AMapFutureRouteSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onFutureRouteSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onDistanceSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapDistanceSearchRequest* request = (AMapDistanceSearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapDistanceSearchResponse* response = (AMapDistanceSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onDistanceSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onWeatherSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapWeatherSearchRequest* request = (AMapWeatherSearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapWeatherSearchResponse* response = (AMapWeatherSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onWeatherSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onRoadTrafficSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapRoadTrafficSearchBaseRequest* request = (AMapRoadTrafficSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapRoadTrafficSearchResponse* response = (AMapRoadTrafficSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onRoadTrafficSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onNearbySearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapNearbySearchRequest* request = (AMapNearbySearchRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapNearbySearchResponse* response = (AMapNearbySearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onNearbySearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onCloudSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapCloudSearchBaseRequest* request = (AMapCloudSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapCloudPOISearchResponse* response = (AMapCloudPOISearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onCloudSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapSearchDelegate::onShareSearchDoneResponse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapShareSearchBaseRequest* request = (AMapShareSearchBaseRequest*) HEAP[@([args[@"request"] integerValue])];
              // ref arg
              AMapShareSearchResponse* response = (AMapShareSearchResponse*) HEAP[@([args[@"response"] integerValue])];
      
              // ref
              id<AMapSearchDelegate> ref = (id<AMapSearchDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref onShareSearchDone : request response: response];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapPOISearchBaseRequest::get_types": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::get_types");
          }
      
          // ref object
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.types;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchBaseRequest::get_sortrule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::get_sortrule");
          }
      
          // ref object
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.sortrule;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchBaseRequest::get_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::get_offset");
          }
      
          // ref object
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.offset;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchBaseRequest::get_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::get_page");
          }
      
          // ref object
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.page;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchBaseRequest::get_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::get_building");
          }
      
          // ref object
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.building;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchBaseRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::get_requireExtension");
          }
      
          // ref object
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.requireExtension;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchBaseRequest::get_requireSubPOIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::get_requireSubPOIs");
          }
      
          // ref object
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.requireSubPOIs;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIIDSearchRequest::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIIDSearchRequest::get_uid");
          }
      
          // ref object
          AMapPOIIDSearchRequest* ref = (AMapPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIKeywordsSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIKeywordsSearchRequest::get_keywords");
          }
      
          // ref object
          AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIKeywordsSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIKeywordsSearchRequest::get_city");
          }
      
          // ref object
          AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIKeywordsSearchRequest::get_cityLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIKeywordsSearchRequest::get_cityLimit");
          }
      
          // ref object
          AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.cityLimit;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIKeywordsSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIKeywordsSearchRequest::get_location");
          }
      
          // ref object
          AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIAroundSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIAroundSearchRequest::get_keywords");
          }
      
          // ref object
          AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIAroundSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIAroundSearchRequest::get_location");
          }
      
          // ref object
          AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIAroundSearchRequest::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIAroundSearchRequest::get_radius");
          }
      
          // ref object
          AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIAroundSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIAroundSearchRequest::get_city");
          }
      
          // ref object
          AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIPolygonSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIPolygonSearchRequest::get_keywords");
          }
      
          // ref object
          AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIPolygonSearchRequest::get_polygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIPolygonSearchRequest::get_polygon");
          }
      
          // ref object
          AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPolygon* result = ref.polygon;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchResponse::get_count");
          }
      
          // ref object
          AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchResponse::get_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchResponse::get_suggestion");
          }
      
          // ref object
          AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapSuggestion* result = ref.suggestion;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchResponse::get_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchResponse::get_pois");
          }
      
          // ref object
          AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapPOI*>* result = ref.pois;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchRequest::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::get_origin");
          }
      
          // ref object
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.origin;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchRequest::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::get_destination");
          }
      
          // ref object
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.destination;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchRequest::get_searchType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::get_searchType");
          }
      
          // ref object
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapRoutePOISearchType result = ref.searchType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::get_strategy");
          }
      
          // ref object
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.strategy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchRequest::get_range": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::get_range");
          }
      
          // ref object
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.range;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchRequest::get_polylineStr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::get_polylineStr");
          }
      
          // ref object
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.polylineStr;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchRequest::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::get_polyline");
          }
      
          // ref object
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapGeoPoint*>* result = ref.polyline;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchResponse::get_count");
          }
      
          // ref object
          AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOISearchResponse::get_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchResponse::get_pois");
          }
      
          // ref object
          AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapRoutePOI*>* result = ref.pois;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapInputTipsSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::get_keywords");
          }
      
          // ref object
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapInputTipsSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::get_city");
          }
      
          // ref object
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapInputTipsSearchRequest::get_types": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::get_types");
          }
      
          // ref object
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.types;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapInputTipsSearchRequest::get_cityLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::get_cityLimit");
          }
      
          // ref object
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.cityLimit;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapInputTipsSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::get_location");
          }
      
          // ref object
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.location;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapInputTipsSearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchResponse::get_count");
          }
      
          // ref object
          AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapInputTipsSearchResponse::get_tips": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchResponse::get_tips");
          }
      
          // ref object
          AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapTip*>* result = ref.tips;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocodeSearchRequest::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocodeSearchRequest::get_address");
          }
      
          // ref object
          AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocodeSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocodeSearchRequest::get_city");
          }
      
          // ref object
          AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocodeSearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocodeSearchResponse::get_count");
          }
      
          // ref object
          AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocodeSearchResponse::get_geocodes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocodeSearchResponse::get_geocodes");
          }
      
          // ref object
          AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapGeocode*>* result = ref.geocodes;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocodeSearchRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchRequest::get_requireExtension");
          }
      
          // ref object
          AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.requireExtension;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocodeSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchRequest::get_location");
          }
      
          // ref object
          AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocodeSearchRequest::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchRequest::get_radius");
          }
      
          // ref object
          AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocodeSearchRequest::get_poitype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchRequest::get_poitype");
          }
      
          // ref object
          AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.poitype;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocodeSearchResponse::get_regeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchResponse::get_regeocode");
          }
      
          // ref object
          AMapReGeocodeSearchResponse* ref = (AMapReGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapReGeocode* result = ref.regeocode;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStopSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchRequest::get_keywords");
          }
      
          // ref object
          AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStopSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchRequest::get_city");
          }
      
          // ref object
          AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStopSearchRequest::get_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchRequest::get_offset");
          }
      
          // ref object
          AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.offset;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStopSearchRequest::get_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchRequest::get_page");
          }
      
          // ref object
          AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.page;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStopSearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchResponse::get_count");
          }
      
          // ref object
          AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStopSearchResponse::get_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchResponse::get_suggestion");
          }
      
          // ref object
          AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapSuggestion* result = ref.suggestion;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStopSearchResponse::get_busstops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchResponse::get_busstops");
          }
      
          // ref object
          AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapBusStop*>* result = ref.busstops;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineBaseSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineBaseSearchRequest::get_city");
          }
      
          // ref object
          AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineBaseSearchRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineBaseSearchRequest::get_requireExtension");
          }
      
          // ref object
          AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.requireExtension;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineBaseSearchRequest::get_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineBaseSearchRequest::get_offset");
          }
      
          // ref object
          AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.offset;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineBaseSearchRequest::get_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineBaseSearchRequest::get_page");
          }
      
          // ref object
          AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.page;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineNameSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineNameSearchRequest::get_keywords");
          }
      
          // ref object
          AMapBusLineNameSearchRequest* ref = (AMapBusLineNameSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineIDSearchRequest::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineIDSearchRequest::get_uid");
          }
      
          // ref object
          AMapBusLineIDSearchRequest* ref = (AMapBusLineIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineSearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineSearchResponse::get_count");
          }
      
          // ref object
          AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineSearchResponse::get_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineSearchResponse::get_suggestion");
          }
      
          // ref object
          AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapSuggestion* result = ref.suggestion;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLineSearchResponse::get_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineSearchResponse::get_buslines");
          }
      
          // ref object
          AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapBusLine*>* result = ref.buslines;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrictSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchRequest::get_keywords");
          }
      
          // ref object
          AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrictSearchRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchRequest::get_requireExtension");
          }
      
          // ref object
          AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.requireExtension;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrictSearchRequest::get_showBusinessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchRequest::get_showBusinessArea");
          }
      
          // ref object
          AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showBusinessArea;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrictSearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchResponse::get_count");
          }
      
          // ref object
          AMapDistrictSearchResponse* ref = (AMapDistrictSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrictSearchResponse::get_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchResponse::get_districts");
          }
      
          // ref object
          AMapDistrictSearchResponse* ref = (AMapDistrictSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapDistrict*>* result = ref.districts;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteSearchBaseRequest::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteSearchBaseRequest::get_origin");
          }
      
          // ref object
          AMapRouteSearchBaseRequest* ref = (AMapRouteSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.origin;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteSearchBaseRequest::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteSearchBaseRequest::get_destination");
          }
      
          // ref object
          AMapRouteSearchBaseRequest* ref = (AMapRouteSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.destination;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_strategy");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.strategy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_waypoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_waypoints");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapGeoPoint*>* result = ref.waypoints;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_avoidpolygons": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_avoidpolygons");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapGeoPolygon*>* result = ref.avoidpolygons;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_avoidroad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_avoidroad");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.avoidroad;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_originId");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.originId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_destinationId");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.destinationId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_origintype");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.origintype;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_destinationtype");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.destinationtype;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_requireExtension");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.requireExtension;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_plateProvince");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.plateProvince;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_plateNumber");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.plateNumber;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_ferry": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_ferry");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.ferry;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDrivingRouteSearchRequest::get_cartype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::get_cartype");
          }
      
          // ref object
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.cartype;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapWalkingRouteSearchRequest::get_multipath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalkingRouteSearchRequest::get_multipath");
          }
      
          // ref object
          AMapWalkingRouteSearchRequest* ref = (AMapWalkingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.multipath;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransitRouteSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::get_strategy");
          }
      
          // ref object
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.strategy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransitRouteSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::get_city");
          }
      
          // ref object
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransitRouteSearchRequest::get_destinationCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::get_destinationCity");
          }
      
          // ref object
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.destinationCity;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransitRouteSearchRequest::get_nightflag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::get_nightflag");
          }
      
          // ref object
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.nightflag;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransitRouteSearchRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::get_requireExtension");
          }
      
          // ref object
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.requireExtension;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRidingRouteSearchRequest::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRidingRouteSearchRequest::get_type");
          }
      
          // ref object
          AMapRidingRouteSearchRequest* ref = (AMapRidingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.type;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteSearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteSearchResponse::get_count");
          }
      
          // ref object
          AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteSearchResponse::get_route": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteSearchResponse::get_route");
          }
      
          // ref object
          AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapRoute* result = ref.route;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_strategy");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.strategy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_waypoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_waypoints");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapGeoPoint*>* result = ref.waypoints;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_originId");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.originId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_destinationId");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.destinationId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_origintype");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.origintype;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_destinationtype");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.destinationtype;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_plateProvince");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.plateProvince;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_plateNumber");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.plateNumber;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_size");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapTruckSizeType result = ref.size;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_height");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.height;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_width");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.width;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_load": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_load");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.load;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_weight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_weight");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.weight;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTruckRouteSearchRequest::get_axis": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::get_axis");
          }
      
          // ref object
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.axis;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceSearchRequest::get_origins": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceSearchRequest::get_origins");
          }
      
          // ref object
          AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapGeoPoint*>* result = ref.origins;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceSearchRequest::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceSearchRequest::get_destination");
          }
      
          // ref object
          AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.destination;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceSearchRequest::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceSearchRequest::get_type");
          }
      
          // ref object
          AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.type;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceSearchResponse::get_results": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceSearchResponse::get_results");
          }
      
          // ref object
          AMapDistanceSearchResponse* ref = (AMapDistanceSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapDistanceResult*>* result = ref.results;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapWeatherSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWeatherSearchRequest::get_city");
          }
      
          // ref object
          AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapWeatherSearchRequest::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWeatherSearchRequest::get_type");
          }
      
          // ref object
          AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapWeatherType result = ref.type;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapWeatherSearchResponse::get_lives": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWeatherSearchResponse::get_lives");
          }
      
          // ref object
          AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapLocalWeatherLive*>* result = ref.lives;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapWeatherSearchResponse::get_forecasts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWeatherSearchResponse::get_forecasts");
          }
      
          // ref object
          AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapLocalWeatherForecast*>* result = ref.forecasts;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadTrafficSearchBaseRequest::get_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchBaseRequest::get_level");
          }
      
          // ref object
          AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.level;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadTrafficSearchBaseRequest::get_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchBaseRequest::get_requireExtension");
          }
      
          // ref object
          AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.requireExtension;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadTrafficSearchRequest::get_roadName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchRequest::get_roadName");
          }
      
          // ref object
          AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.roadName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadTrafficSearchRequest::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchRequest::get_adcode");
          }
      
          // ref object
          AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadTrafficCircleSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficCircleSearchRequest::get_location");
          }
      
          // ref object
          AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadTrafficCircleSearchRequest::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficCircleSearchRequest::get_radius");
          }
      
          // ref object
          AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadTrafficSearchResponse::get_trafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchResponse::get_trafficInfo");
          }
      
          // ref object
          AMapRoadTrafficSearchResponse* ref = (AMapRoadTrafficSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapTrafficInfo* result = ref.trafficInfo;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchRequest::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::get_center");
          }
      
          // ref object
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.center;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchRequest::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::get_radius");
          }
      
          // ref object
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchRequest::get_searchType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::get_searchType");
          }
      
          // ref object
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapNearbySearchType result = ref.searchType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchRequest::get_timeRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::get_timeRange");
          }
      
          // ref object
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.timeRange;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchRequest::get_limit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::get_limit");
          }
      
          // ref object
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.limit;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchResponse::get_count");
          }
      
          // ref object
          AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchResponse::get_infos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchResponse::get_infos");
          }
      
          // ref object
          AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapNearbyUserInfo*>* result = ref.infos;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudSearchBaseRequest::get_tableID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::get_tableID");
          }
      
          // ref object
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.tableID;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudSearchBaseRequest::get_filter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::get_filter");
          }
      
          // ref object
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<NSString*>* result = ref.filter;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudSearchBaseRequest::get_sortFields": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::get_sortFields");
          }
      
          // ref object
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.sortFields;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudSearchBaseRequest::get_sortType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::get_sortType");
          }
      
          // ref object
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapCloudSortType result = ref.sortType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudSearchBaseRequest::get_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::get_offset");
          }
      
          // ref object
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.offset;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudSearchBaseRequest::get_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::get_page");
          }
      
          // ref object
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.page;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOIAroundSearchRequest::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIAroundSearchRequest::get_center");
          }
      
          // ref object
          AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.center;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOIAroundSearchRequest::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIAroundSearchRequest::get_radius");
          }
      
          // ref object
          AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOIAroundSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIAroundSearchRequest::get_keywords");
          }
      
          // ref object
          AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOIPolygonSearchRequest::get_polygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIPolygonSearchRequest::get_polygon");
          }
      
          // ref object
          AMapCloudPOIPolygonSearchRequest* ref = (AMapCloudPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPolygon* result = ref.polygon;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOIPolygonSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIPolygonSearchRequest::get_keywords");
          }
      
          // ref object
          AMapCloudPOIPolygonSearchRequest* ref = (AMapCloudPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOIIDSearchRequest::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIIDSearchRequest::get_uid");
          }
      
          // ref object
          AMapCloudPOIIDSearchRequest* ref = (AMapCloudPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.uid;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOILocalSearchRequest::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOILocalSearchRequest::get_keywords");
          }
      
          // ref object
          AMapCloudPOILocalSearchRequest* ref = (AMapCloudPOILocalSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOILocalSearchRequest::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOILocalSearchRequest::get_city");
          }
      
          // ref object
          AMapCloudPOILocalSearchRequest* ref = (AMapCloudPOILocalSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOISearchResponse::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOISearchResponse::get_count");
          }
      
          // ref object
          AMapCloudPOISearchResponse* ref = (AMapCloudPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOISearchResponse::get_POIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOISearchResponse::get_POIs");
          }
      
          // ref object
          AMapCloudPOISearchResponse* ref = (AMapCloudPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapCloudPOI*>* result = ref.POIs;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationShareSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationShareSearchRequest::get_location");
          }
      
          // ref object
          AMapLocationShareSearchRequest* ref = (AMapLocationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationShareSearchRequest::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationShareSearchRequest::get_name");
          }
      
          // ref object
          AMapLocationShareSearchRequest* ref = (AMapLocationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIShareSearchRequest::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIShareSearchRequest::get_uid");
          }
      
          // ref object
          AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIShareSearchRequest::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIShareSearchRequest::get_location");
          }
      
          // ref object
          AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIShareSearchRequest::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIShareSearchRequest::get_name");
          }
      
          // ref object
          AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIShareSearchRequest::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIShareSearchRequest::get_address");
          }
      
          // ref object
          AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteShareSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::get_strategy");
          }
      
          // ref object
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.strategy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteShareSearchRequest::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::get_type");
          }
      
          // ref object
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.type;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteShareSearchRequest::get_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::get_startCoordinate");
          }
      
          // ref object
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.startCoordinate;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteShareSearchRequest::get_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::get_destinationCoordinate");
          }
      
          // ref object
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.destinationCoordinate;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteShareSearchRequest::get_startName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::get_startName");
          }
      
          // ref object
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.startName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRouteShareSearchRequest::get_destinationName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::get_destinationName");
          }
      
          // ref object
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.destinationName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapNavigationShareSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNavigationShareSearchRequest::get_strategy");
          }
      
          // ref object
          AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.strategy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNavigationShareSearchRequest::get_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNavigationShareSearchRequest::get_startCoordinate");
          }
      
          // ref object
          AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.startCoordinate;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNavigationShareSearchRequest::get_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNavigationShareSearchRequest::get_destinationCoordinate");
          }
      
          // ref object
          AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.destinationCoordinate;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapShareSearchResponse::get_shareURL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapShareSearchResponse::get_shareURL");
          }
      
          // ref object
          AMapShareSearchResponse* ref = (AMapShareSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.shareURL;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_beginTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_beginTime");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.beginTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_interval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_interval");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.interval;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_timeCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_timeCount");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.timeCount;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_strategy");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.strategy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_originId");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.originId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_destinationId");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.destinationId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_origintype");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.origintype;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_destinationtype");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.destinationtype;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_parentId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_parentId");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.parentId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_plateProvince");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.plateProvince;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_plateNumber");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.plateNumber;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchRequest::get_cartype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::get_cartype");
          }
      
          // ref object
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.cartype;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchResponse::get_paths": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchResponse::get_paths");
          }
      
          // ref object
          AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapPath*>* result = ref.paths;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureRouteSearchResponse::get_timeInfos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchResponse::get_timeInfos");
          }
      
          // ref object
          AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapFutureTimeInfo*>* result = ref.timeInfos;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoPoint::get_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoPoint::get_latitude");
          }
      
          // ref object
          AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.latitude;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoPoint::get_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoPoint::get_longitude");
          }
      
          // ref object
          AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.longitude;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoPolygon::get_points": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoPolygon::get_points");
          }
      
          // ref object
          AMapGeoPolygon* ref = (AMapGeoPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapGeoPoint*>* result = ref.points;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapCity::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::get_city");
          }
      
          // ref object
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCity::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::get_citycode");
          }
      
          // ref object
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCity::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::get_adcode");
          }
      
          // ref object
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCity::get_num": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::get_num");
          }
      
          // ref object
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.num;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCity::get_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::get_districts");
          }
      
          // ref object
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapDistrict*>* result = ref.districts;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapSuggestion::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSuggestion::get_keywords");
          }
      
          // ref object
          AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<NSString*>* result = ref.keywords;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapSuggestion::get_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSuggestion::get_cities");
          }
      
          // ref object
          AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapCity*>* result = ref.cities;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapTip::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::get_uid");
          }
      
          // ref object
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTip::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::get_name");
          }
      
          // ref object
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTip::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::get_adcode");
          }
      
          // ref object
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTip::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::get_district");
          }
      
          // ref object
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.district;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTip::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::get_address");
          }
      
          // ref object
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTip::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::get_location");
          }
      
          // ref object
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTip::get_typecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::get_typecode");
          }
      
          // ref object
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.typecode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapImage::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapImage::get_title");
          }
      
          // ref object
          AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.title;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapImage::get_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapImage::get_url");
          }
      
          // ref object
          AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.url;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIExtension::get_rating": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIExtension::get_rating");
          }
      
          // ref object
          AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.rating;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIExtension::get_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIExtension::get_cost");
          }
      
          // ref object
          AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.cost;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOIExtension::get_openTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIExtension::get_openTime");
          }
      
          // ref object
          AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.openTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapIndoorData::get_floor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapIndoorData::get_floor");
          }
      
          // ref object
          AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.floor;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapIndoorData::get_floorName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapIndoorData::get_floorName");
          }
      
          // ref object
          AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.floorName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapIndoorData::get_pid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapIndoorData::get_pid");
          }
      
          // ref object
          AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.pid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapSubPOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::get_uid");
          }
      
          // ref object
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapSubPOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::get_name");
          }
      
          // ref object
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapSubPOI::get_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::get_sname");
          }
      
          // ref object
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.sname;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapSubPOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::get_location");
          }
      
          // ref object
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapSubPOI::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::get_address");
          }
      
          // ref object
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapSubPOI::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::get_distance");
          }
      
          // ref object
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapSubPOI::get_subtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::get_subtype");
          }
      
          // ref object
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.subtype;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::get_uid");
          }
      
          // ref object
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::get_name");
          }
      
          // ref object
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::get_location");
          }
      
          // ref object
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOI::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::get_distance");
          }
      
          // ref object
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoutePOI::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::get_duration");
          }
      
          // ref object
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_uid");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_name");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_type");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.type;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_typecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_typecode");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.typecode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_location");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_address");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_tel");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.tel;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_distance");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_parkingType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_parkingType");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.parkingType;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_shopID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_shopID");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.shopID;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_postcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_postcode");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.postcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_website": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_website");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.website;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_email": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_email");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.email;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_province");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.province;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_pcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_pcode");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.pcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_city");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_citycode");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_district");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.district;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_adcode");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_gridcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_gridcode");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.gridcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_enterLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_enterLocation");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.enterLocation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_exitLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_exitLocation");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.exitLocation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_direction");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.direction;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_hasIndoorMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_hasIndoorMap");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.hasIndoorMap;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_businessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_businessArea");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.businessArea;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_indoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_indoorData");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapIndoorData* result = ref.indoorData;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_subPOIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_subPOIs");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapSubPOI*>* result = ref.subPOIs;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_images": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_images");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapImage*>* result = ref.images;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOI::get_extensionInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::get_extensionInfo");
          }
      
          // ref object
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapPOIExtension* result = ref.extensionInfo;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapAOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::get_uid");
          }
      
          // ref object
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::get_name");
          }
      
          // ref object
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAOI::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::get_adcode");
          }
      
          // ref object
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::get_location");
          }
      
          // ref object
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapAOI::get_area": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::get_area");
          }
      
          // ref object
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.area;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoad::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::get_uid");
          }
      
          // ref object
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoad::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::get_name");
          }
      
          // ref object
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoad::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::get_distance");
          }
      
          // ref object
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoad::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::get_direction");
          }
      
          // ref object
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.direction;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoad::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::get_location");
          }
      
          // ref object
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadInter::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::get_distance");
          }
      
          // ref object
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadInter::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::get_direction");
          }
      
          // ref object
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.direction;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadInter::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::get_location");
          }
      
          // ref object
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadInter::get_firstId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::get_firstId");
          }
      
          // ref object
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.firstId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadInter::get_firstName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::get_firstName");
          }
      
          // ref object
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.firstName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadInter::get_secondId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::get_secondId");
          }
      
          // ref object
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.secondId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoadInter::get_secondName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::get_secondName");
          }
      
          // ref object
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.secondName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStreetNumber::get_street": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::get_street");
          }
      
          // ref object
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.street;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStreetNumber::get_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::get_number");
          }
      
          // ref object
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.number;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStreetNumber::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::get_location");
          }
      
          // ref object
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapStreetNumber::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::get_distance");
          }
      
          // ref object
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapStreetNumber::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::get_direction");
          }
      
          // ref object
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.direction;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusinessArea::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusinessArea::get_name");
          }
      
          // ref object
          AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusinessArea::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusinessArea::get_location");
          }
      
          // ref object
          AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_country": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_country");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.country;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_province");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.province;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_city");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_citycode");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_district");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.district;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_adcode");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_township");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.township;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_towncode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_towncode");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.towncode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_neighborhood");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.neighborhood;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_building");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.building;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_streetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_streetNumber");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapStreetNumber* result = ref.streetNumber;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapAddressComponent::get_businessAreas": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::get_businessAreas");
          }
      
          // ref object
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapBusinessArea*>* result = ref.businessAreas;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocode::get_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::get_formattedAddress");
          }
      
          // ref object
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.formattedAddress;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocode::get_addressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::get_addressComponent");
          }
      
          // ref object
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapAddressComponent* result = ref.addressComponent;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocode::get_roads": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::get_roads");
          }
      
          // ref object
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapRoad*>* result = ref.roads;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocode::get_roadinters": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::get_roadinters");
          }
      
          // ref object
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapRoadInter*>* result = ref.roadinters;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocode::get_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::get_pois");
          }
      
          // ref object
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapPOI*>* result = ref.pois;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapReGeocode::get_aois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::get_aois");
          }
      
          // ref object
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapAOI*>* result = ref.aois;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_formattedAddress");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.formattedAddress;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_province");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.province;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_city");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_citycode");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_district");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.district;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_adcode");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_township");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.township;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_neighborhood");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.neighborhood;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_building");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.building;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_location");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeocode::get_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::get_level");
          }
      
          // ref object
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.level;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStop::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::get_uid");
          }
      
          // ref object
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStop::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::get_adcode");
          }
      
          // ref object
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStop::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::get_name");
          }
      
          // ref object
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStop::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::get_citycode");
          }
      
          // ref object
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStop::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::get_location");
          }
      
          // ref object
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStop::get_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::get_buslines");
          }
      
          // ref object
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapBusLine*>* result = ref.buslines;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusStop::get_sequence": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::get_sequence");
          }
      
          // ref object
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.sequence;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_uid");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_type");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.type;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_name");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_polyline");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.polyline;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_citycode");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_startStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_startStop");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.startStop;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_endStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_endStop");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.endStop;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_location");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_startTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_startTime");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.startTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_endTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_endTime");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.endTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_company": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_company");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.company;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_distance");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_basicPrice": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_basicPrice");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.basicPrice;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_totalPrice": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_totalPrice");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.totalPrice;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_bounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_bounds");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPolygon* result = ref.bounds;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_busStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_busStops");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapBusStop*>* result = ref.busStops;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_departureStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_departureStop");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapBusStop* result = ref.departureStop;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_arrivalStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_arrivalStop");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapBusStop* result = ref.arrivalStop;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_viaBusStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_viaBusStops");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapBusStop*>* result = ref.viaBusStops;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapBusLine::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::get_duration");
          }
      
          // ref object
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrict::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::get_adcode");
          }
      
          // ref object
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrict::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::get_citycode");
          }
      
          // ref object
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrict::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::get_name");
          }
      
          // ref object
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrict::get_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::get_level");
          }
      
          // ref object
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.level;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrict::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::get_center");
          }
      
          // ref object
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.center;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrict::get_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::get_districts");
          }
      
          // ref object
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapDistrict*>* result = ref.districts;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistrict::get_polylines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::get_polylines");
          }
      
          // ref object
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<NSString*>* result = ref.polylines;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTMC::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTMC::get_distance");
          }
      
          // ref object
          AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTMC::get_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTMC::get_status");
          }
      
          // ref object
          AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.status;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTMC::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTMC::get_polyline");
          }
      
          // ref object
          AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.polyline;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_instruction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_instruction");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.instruction;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_orientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_orientation");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.orientation;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_road": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_road");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.road;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_distance");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_duration");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_polyline");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.polyline;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_action": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_action");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.action;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_assistantAction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_assistantAction");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.assistantAction;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_tolls");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.tolls;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_tollDistance");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.tollDistance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_tollRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_tollRoad");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.tollRoad;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_cities");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapCity*>* result = ref.cities;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapStep::get_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::get_tmcs");
          }
      
          // ref object
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapTMC*>* result = ref.tmcs;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapPath::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::get_distance");
          }
      
          // ref object
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPath::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::get_duration");
          }
      
          // ref object
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPath::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::get_strategy");
          }
      
          // ref object
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.strategy;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapPath::get_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::get_steps");
          }
      
          // ref object
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapStep*>* result = ref.steps;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapPath::get_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::get_tolls");
          }
      
          // ref object
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.tolls;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPath::get_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::get_tollDistance");
          }
      
          // ref object
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.tollDistance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPath::get_totalTrafficLights": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::get_totalTrafficLights");
          }
      
          // ref object
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.totalTrafficLights;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPath::get_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::get_restriction");
          }
      
          // ref object
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.restriction;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureTimeInfoElement::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfoElement::get_duration");
          }
      
          // ref object
          AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureTimeInfoElement::get_pathindex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfoElement::get_pathindex");
          }
      
          // ref object
          AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.pathindex;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureTimeInfoElement::get_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfoElement::get_restriction");
          }
      
          // ref object
          AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.restriction;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureTimeInfoElement::get_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfoElement::get_tmcs");
          }
      
          // ref object
          AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapTMC*>* result = ref.tmcs;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureTimeInfo::get_startTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfo::get_startTime");
          }
      
          // ref object
          AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.startTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapFutureTimeInfo::get_elements": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfo::get_elements");
          }
      
          // ref object
          AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapFutureTimeInfoElement*>* result = ref.elements;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapWalking::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::get_origin");
          }
      
          // ref object
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.origin;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapWalking::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::get_destination");
          }
      
          // ref object
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.destination;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapWalking::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::get_distance");
          }
      
          // ref object
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapWalking::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::get_duration");
          }
      
          // ref object
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapWalking::get_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::get_steps");
          }
      
          // ref object
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapStep*>* result = ref.steps;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapTaxi::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::get_origin");
          }
      
          // ref object
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.origin;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTaxi::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::get_destination");
          }
      
          // ref object
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.destination;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTaxi::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::get_distance");
          }
      
          // ref object
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTaxi::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::get_duration");
          }
      
          // ref object
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTaxi::get_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::get_sname");
          }
      
          // ref object
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.sname;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTaxi::get_tname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::get_tname");
          }
      
          // ref object
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.tname;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwayStation::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::get_uid");
          }
      
          // ref object
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwayStation::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::get_name");
          }
      
          // ref object
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwayStation::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::get_location");
          }
      
          // ref object
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwayStation::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::get_adcode");
          }
      
          // ref object
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwayStation::get_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::get_time");
          }
      
          // ref object
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.time;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwayStation::get_wait": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::get_wait");
          }
      
          // ref object
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.wait;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwayStation::get_isStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::get_isStart");
          }
      
          // ref object
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.isStart;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwayStation::get_isEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::get_isEnd");
          }
      
          // ref object
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.isEnd;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwaySpace::get_code": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwaySpace::get_code");
          }
      
          // ref object
          AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.code;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailwaySpace::get_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwaySpace::get_cost");
          }
      
          // ref object
          AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.cost;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_uid");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_name");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_trip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_trip");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.trip;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_type");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.type;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_distance");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_time");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.time;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_departureStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_departureStation");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapRailwayStation* result = ref.departureStation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_arrivalStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_arrivalStation");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapRailwayStation* result = ref.arrivalStation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_spaces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_spaces");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapRailwaySpace*>* result = ref.spaces;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_viaStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_viaStops");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapRailwayStation*>* result = ref.viaStops;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapRailway::get_alters": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::get_alters");
          }
      
          // ref object
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapRailway*>* result = ref.alters;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapSegment::get_walking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::get_walking");
          }
      
          // ref object
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapWalking* result = ref.walking;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapSegment::get_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::get_buslines");
          }
      
          // ref object
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapBusLine*>* result = ref.buslines;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapSegment::get_taxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::get_taxi");
          }
      
          // ref object
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapTaxi* result = ref.taxi;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapSegment::get_railway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::get_railway");
          }
      
          // ref object
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapRailway* result = ref.railway;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapSegment::get_enterName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::get_enterName");
          }
      
          // ref object
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.enterName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapSegment::get_enterLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::get_enterLocation");
          }
      
          // ref object
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.enterLocation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapSegment::get_exitName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::get_exitName");
          }
      
          // ref object
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.exitName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapSegment::get_exitLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::get_exitLocation");
          }
      
          // ref object
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.exitLocation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransit::get_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::get_cost");
          }
      
          // ref object
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.cost;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransit::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::get_duration");
          }
      
          // ref object
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransit::get_nightflag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::get_nightflag");
          }
      
          // ref object
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.nightflag;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransit::get_walkingDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::get_walkingDistance");
          }
      
          // ref object
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.walkingDistance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransit::get_segments": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::get_segments");
          }
      
          // ref object
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapSegment*>* result = ref.segments;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapTransit::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::get_distance");
          }
      
          // ref object
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoute::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::get_origin");
          }
      
          // ref object
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.origin;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoute::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::get_destination");
          }
      
          // ref object
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.destination;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoute::get_taxiCost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::get_taxiCost");
          }
      
          // ref object
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.taxiCost;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoute::get_paths": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::get_paths");
          }
      
          // ref object
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapPath*>* result = ref.paths;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapRoute::get_transits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::get_transits");
          }
      
          // ref object
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapTransit*>* result = ref.transits;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceResult::get_originID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::get_originID");
          }
      
          // ref object
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.originID;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceResult::get_destID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::get_destID");
          }
      
          // ref object
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.destID;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceResult::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::get_distance");
          }
      
          // ref object
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceResult::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::get_duration");
          }
      
          // ref object
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceResult::get_info": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::get_info");
          }
      
          // ref object
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.info;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapDistanceResult::get_code": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::get_code");
          }
      
          // ref object
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.code;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_adcode");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_province");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.province;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_city");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_weather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_weather");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.weather;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_temperature": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_temperature");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.temperature;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_windDirection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_windDirection");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.windDirection;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_windPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_windPower");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.windPower;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_humidity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_humidity");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.humidity;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherLive::get_reportTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::get_reportTime");
          }
      
          // ref object
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.reportTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_date": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_date");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.date;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_week": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_week");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.week;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_dayWeather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_dayWeather");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.dayWeather;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_nightWeather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_nightWeather");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.nightWeather;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_dayTemp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_dayTemp");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.dayTemp;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_nightTemp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_nightTemp");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.nightTemp;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_dayWind": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_dayWind");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.dayWind;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_nightWind": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_nightWind");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.nightWind;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_dayPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_dayPower");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.dayPower;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalDayWeatherForecast::get_nightPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::get_nightPower");
          }
      
          // ref object
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.nightPower;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherForecast::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::get_adcode");
          }
      
          // ref object
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherForecast::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::get_province");
          }
      
          // ref object
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.province;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherForecast::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::get_city");
          }
      
          // ref object
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherForecast::get_reportTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::get_reportTime");
          }
      
          // ref object
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.reportTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocalWeatherForecast::get_casts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::get_casts");
          }
      
          // ref object
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapLocalDayWeatherForecast*>* result = ref.casts;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbyUserInfo::get_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUserInfo::get_userID");
          }
      
          // ref object
          AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.userID;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbyUserInfo::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUserInfo::get_location");
          }
      
          // ref object
          AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbyUserInfo::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUserInfo::get_distance");
          }
      
          // ref object
          AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbyUserInfo::get_updatetime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUserInfo::get_updatetime");
          }
      
          // ref object
          AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSTimeInterval result = ref.updatetime;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficEvaluation::get_evaluationDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::get_evaluationDescription");
          }
      
          // ref object
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.evaluationDescription;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficEvaluation::get_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::get_status");
          }
      
          // ref object
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.status;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficEvaluation::get_expedite": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::get_expedite");
          }
      
          // ref object
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.expedite;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficEvaluation::get_congested": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::get_congested");
          }
      
          // ref object
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.congested;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficEvaluation::get_blocked": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::get_blocked");
          }
      
          // ref object
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.blocked;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficEvaluation::get_unknown": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::get_unknown");
          }
      
          // ref object
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.unknown;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficRoad::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::get_name");
          }
      
          // ref object
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficRoad::get_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::get_status");
          }
      
          // ref object
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.status;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficRoad::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::get_direction");
          }
      
          // ref object
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.direction;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficRoad::get_angle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::get_angle");
          }
      
          // ref object
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          float result = ref.angle;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficRoad::get_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::get_speed");
          }
      
          // ref object
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          float result = ref.speed;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficRoad::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::get_polyline");
          }
      
          // ref object
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.polyline;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficInfo::get_statusDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficInfo::get_statusDescription");
          }
      
          // ref object
          AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.statusDescription;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficInfo::get_evaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficInfo::get_evaluation");
          }
      
          // ref object
          AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapTrafficEvaluation* result = ref.evaluation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapTrafficInfo::get_roads": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficInfo::get_roads");
          }
      
          // ref object
          AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapTrafficRoad*>* result = ref.roads;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudImage::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudImage::get_uid");
          }
      
          // ref object
          AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudImage::get_preurl": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudImage::get_preurl");
          }
      
          // ref object
          AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.preurl;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudImage::get_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudImage::get_url");
          }
      
          // ref object
          AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.url;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::get_uid");
          }
      
          // ref object
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.uid;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::get_name");
          }
      
          // ref object
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::get_location");
          }
      
          // ref object
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOI::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::get_address");
          }
      
          // ref object
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOI::get_createTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::get_createTime");
          }
      
          // ref object
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.createTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOI::get_updateTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::get_updateTime");
          }
      
          // ref object
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.updateTime;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOI::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::get_distance");
          }
      
          // ref object
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.distance;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapCloudPOI::get_images": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::get_images");
          }
      
          // ref object
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<AMapCloudImage*>* result = ref.images;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbyUploadInfo::get_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUploadInfo::get_userID");
          }
      
          // ref object
          AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.userID;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbyUploadInfo::get_coordinateType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUploadInfo::get_coordinateType");
          }
      
          // ref object
          AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapSearchCoordinateType result = ref.coordinateType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbyUploadInfo::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUploadInfo::get_coordinate");
          }
      
          // ref object
          AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.coordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchManager::get_uploadTimeInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchManager::get_uploadTimeInterval");
          }
      
          // ref object
          AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSTimeInterval result = ref.uploadTimeInterval;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapNearbySearchManager::get_isAutoUploading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchManager::get_isAutoUploading");
          }
      
          // ref object
          AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.isAutoUploading;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapSearchAPI::get_timeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSearchAPI::get_timeout");
          }
      
          // ref object
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.timeout;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapSearchAPI::get_language": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSearchAPI::get_language");
          }
      
          // ref object
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapSearchLanguage result = ref.language;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapPOISearchBaseRequest::get_types_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.types;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchBaseRequest::get_sortrule_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.sortrule;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchBaseRequest::get_offset_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.offset;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchBaseRequest::get_page_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.page;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchBaseRequest::get_building_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.building;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchBaseRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.requireExtension;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchBaseRequest::get_requireSubPOIs_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.requireSubPOIs;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIIDSearchRequest::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIIDSearchRequest* ref = (AMapPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIKeywordsSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIKeywordsSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIKeywordsSearchRequest::get_cityLimit_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.cityLimit;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIKeywordsSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIAroundSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIAroundSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIAroundSearchRequest::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIAroundSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIPolygonSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIPolygonSearchRequest::get_polygon_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPolygon* result = ref.polygon;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchResponse::get_suggestion_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapSuggestion* result = ref.suggestion;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchResponse::get_pois_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapPOI*>* result = ref.pois;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchRequest::get_origin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.origin;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchRequest::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.destination;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchRequest::get_searchType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapRoutePOISearchType result = ref.searchType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchRequest::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.strategy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchRequest::get_range_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.range;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchRequest::get_polylineStr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.polylineStr;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchRequest::get_polyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapGeoPoint*>* result = ref.polyline;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOISearchResponse::get_pois_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapRoutePOI*>* result = ref.pois;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapInputTipsSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapInputTipsSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapInputTipsSearchRequest::get_types_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.types;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapInputTipsSearchRequest::get_cityLimit_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.cityLimit;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapInputTipsSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.location;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapInputTipsSearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapInputTipsSearchResponse::get_tips_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapTip*>* result = ref.tips;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocodeSearchRequest::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocodeSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocodeSearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocodeSearchResponse::get_geocodes_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapGeocode*>* result = ref.geocodes;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocodeSearchRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.requireExtension;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocodeSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocodeSearchRequest::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocodeSearchRequest::get_poitype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.poitype;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocodeSearchResponse::get_regeocode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocodeSearchResponse* ref = (AMapReGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapReGeocode* result = ref.regeocode;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStopSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStopSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStopSearchRequest::get_offset_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.offset;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStopSearchRequest::get_page_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.page;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStopSearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStopSearchResponse::get_suggestion_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapSuggestion* result = ref.suggestion;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStopSearchResponse::get_busstops_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapBusStop*>* result = ref.busstops;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineBaseSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineBaseSearchRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.requireExtension;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineBaseSearchRequest::get_offset_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.offset;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineBaseSearchRequest::get_page_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.page;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineNameSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineNameSearchRequest* ref = (AMapBusLineNameSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineIDSearchRequest::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineIDSearchRequest* ref = (AMapBusLineIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineSearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineSearchResponse::get_suggestion_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapSuggestion* result = ref.suggestion;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLineSearchResponse::get_buslines_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapBusLine*>* result = ref.buslines;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrictSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrictSearchRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.requireExtension;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrictSearchRequest::get_showBusinessArea_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showBusinessArea;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrictSearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrictSearchResponse* ref = (AMapDistrictSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrictSearchResponse::get_districts_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrictSearchResponse* ref = (AMapDistrictSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapDistrict*>* result = ref.districts;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteSearchBaseRequest::get_origin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteSearchBaseRequest* ref = (AMapRouteSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.origin;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteSearchBaseRequest::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteSearchBaseRequest* ref = (AMapRouteSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.destination;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.strategy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_waypoints_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapGeoPoint*>* result = ref.waypoints;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_avoidpolygons_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapGeoPolygon*>* result = ref.avoidpolygons;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_avoidroad_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.avoidroad;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_originId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.originId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_destinationId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.destinationId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_origintype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.origintype;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_destinationtype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.destinationtype;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.requireExtension;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_plateProvince_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.plateProvince;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_plateNumber_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.plateNumber;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_ferry_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.ferry;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDrivingRouteSearchRequest::get_cartype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.cartype;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWalkingRouteSearchRequest::get_multipath_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWalkingRouteSearchRequest* ref = (AMapWalkingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.multipath;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransitRouteSearchRequest::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.strategy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransitRouteSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransitRouteSearchRequest::get_destinationCity_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.destinationCity;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransitRouteSearchRequest::get_nightflag_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.nightflag;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransitRouteSearchRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.requireExtension;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRidingRouteSearchRequest::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRidingRouteSearchRequest* ref = (AMapRidingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.type;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteSearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteSearchResponse::get_route_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapRoute* result = ref.route;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.strategy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_waypoints_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapGeoPoint*>* result = ref.waypoints;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_originId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.originId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_destinationId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.destinationId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_origintype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.origintype;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_destinationtype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.destinationtype;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_plateProvince_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.plateProvince;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_plateNumber_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.plateNumber;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_size_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapTruckSizeType result = ref.size;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_height_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.height;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_width_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.width;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_load_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.load;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_weight_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.weight;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTruckRouteSearchRequest::get_axis_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.axis;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceSearchRequest::get_origins_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapGeoPoint*>* result = ref.origins;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceSearchRequest::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.destination;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceSearchRequest::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.type;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceSearchResponse::get_results_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceSearchResponse* ref = (AMapDistanceSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapDistanceResult*>* result = ref.results;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWeatherSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWeatherSearchRequest::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapWeatherType result = ref.type;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWeatherSearchResponse::get_lives_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapLocalWeatherLive*>* result = ref.lives;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWeatherSearchResponse::get_forecasts_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapLocalWeatherForecast*>* result = ref.forecasts;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadTrafficSearchBaseRequest::get_level_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.level;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadTrafficSearchBaseRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.requireExtension;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadTrafficSearchRequest::get_roadName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.roadName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadTrafficSearchRequest::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadTrafficCircleSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadTrafficCircleSearchRequest::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadTrafficSearchResponse::get_trafficInfo_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadTrafficSearchResponse* ref = (AMapRoadTrafficSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapTrafficInfo* result = ref.trafficInfo;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchRequest::get_center_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.center;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchRequest::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchRequest::get_searchType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapNearbySearchType result = ref.searchType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchRequest::get_timeRange_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.timeRange;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchRequest::get_limit_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.limit;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchResponse::get_infos_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapNearbyUserInfo*>* result = ref.infos;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudSearchBaseRequest::get_tableID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.tableID;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudSearchBaseRequest::get_filter_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<NSString*>* result = ref.filter;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudSearchBaseRequest::get_sortFields_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.sortFields;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudSearchBaseRequest::get_sortType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapCloudSortType result = ref.sortType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudSearchBaseRequest::get_offset_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.offset;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudSearchBaseRequest::get_page_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.page;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOIAroundSearchRequest::get_center_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.center;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOIAroundSearchRequest::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOIAroundSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOIPolygonSearchRequest::get_polygon_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOIPolygonSearchRequest* ref = (AMapCloudPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPolygon* result = ref.polygon;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOIPolygonSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOIPolygonSearchRequest* ref = (AMapCloudPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOIIDSearchRequest::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOIIDSearchRequest* ref = (AMapCloudPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.uid;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOILocalSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOILocalSearchRequest* ref = (AMapCloudPOILocalSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOILocalSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOILocalSearchRequest* ref = (AMapCloudPOILocalSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOISearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOISearchResponse* ref = (AMapCloudPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOISearchResponse::get_POIs_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOISearchResponse* ref = (AMapCloudPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapCloudPOI*>* result = ref.POIs;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationShareSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationShareSearchRequest* ref = (AMapLocationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationShareSearchRequest::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationShareSearchRequest* ref = (AMapLocationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIShareSearchRequest::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIShareSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIShareSearchRequest::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIShareSearchRequest::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteShareSearchRequest::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.strategy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteShareSearchRequest::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.type;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteShareSearchRequest::get_startCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.startCoordinate;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteShareSearchRequest::get_destinationCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.destinationCoordinate;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteShareSearchRequest::get_startName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.startName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRouteShareSearchRequest::get_destinationName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.destinationName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNavigationShareSearchRequest::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.strategy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNavigationShareSearchRequest::get_startCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.startCoordinate;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNavigationShareSearchRequest::get_destinationCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.destinationCoordinate;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapShareSearchResponse::get_shareURL_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapShareSearchResponse* ref = (AMapShareSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.shareURL;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_beginTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.beginTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_interval_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.interval;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_timeCount_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.timeCount;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.strategy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_originId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.originId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_destinationId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.destinationId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_origintype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.origintype;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_destinationtype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.destinationtype;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_parentId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.parentId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_plateProvince_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.plateProvince;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_plateNumber_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.plateNumber;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchRequest::get_cartype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.cartype;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchResponse::get_paths_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapPath*>* result = ref.paths;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureRouteSearchResponse::get_timeInfos_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapFutureTimeInfo*>* result = ref.timeInfos;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoPoint::get_latitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.latitude;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoPoint::get_longitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.longitude;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoPolygon::get_points_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoPolygon* ref = (AMapGeoPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapGeoPoint*>* result = ref.points;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCity::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCity::get_citycode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.citycode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCity::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCity::get_num_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.num;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCity::get_districts_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapDistrict*>* result = ref.districts;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSuggestion::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<NSString*>* result = ref.keywords;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSuggestion::get_cities_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapCity*>* result = ref.cities;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTip::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTip::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTip::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTip::get_district_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.district;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTip::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTip::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTip::get_typecode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.typecode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapImage::get_title_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.title;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapImage::get_url_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.url;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIExtension::get_rating_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.rating;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIExtension::get_cost_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.cost;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOIExtension::get_openTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.openTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapIndoorData::get_floor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.floor;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapIndoorData::get_floorName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.floorName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapIndoorData::get_pid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.pid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSubPOI::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSubPOI::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSubPOI::get_sname_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.sname;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSubPOI::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSubPOI::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSubPOI::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSubPOI::get_subtype_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.subtype;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOI::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOI::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOI::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOI::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoutePOI::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.type;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_typecode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.typecode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_tel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.tel;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_parkingType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.parkingType;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_shopID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.shopID;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_postcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.postcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_website_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.website;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_email_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.email;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.province;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_pcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.pcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_citycode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.citycode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_district_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.district;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_gridcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.gridcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_enterLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.enterLocation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_exitLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.exitLocation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_direction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.direction;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_hasIndoorMap_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.hasIndoorMap;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_businessArea_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.businessArea;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_indoorData_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapIndoorData* result = ref.indoorData;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_subPOIs_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapSubPOI*>* result = ref.subPOIs;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_images_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapImage*>* result = ref.images;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOI::get_extensionInfo_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapPOIExtension* result = ref.extensionInfo;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAOI::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAOI::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAOI::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAOI::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAOI::get_area_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.area;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoad::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoad::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoad::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoad::get_direction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.direction;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoad::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadInter::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadInter::get_direction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.direction;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadInter::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadInter::get_firstId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.firstId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadInter::get_firstName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.firstName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadInter::get_secondId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.secondId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoadInter::get_secondName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.secondName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStreetNumber::get_street_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.street;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStreetNumber::get_number_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.number;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStreetNumber::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStreetNumber::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStreetNumber::get_direction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.direction;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusinessArea::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusinessArea::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_country_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.country;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.province;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_citycode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.citycode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_district_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.district;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_township_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.township;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_towncode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.towncode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_neighborhood_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.neighborhood;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_building_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.building;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_streetNumber_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapStreetNumber* result = ref.streetNumber;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapAddressComponent::get_businessAreas_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapBusinessArea*>* result = ref.businessAreas;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocode::get_formattedAddress_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.formattedAddress;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocode::get_addressComponent_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapAddressComponent* result = ref.addressComponent;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocode::get_roads_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapRoad*>* result = ref.roads;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocode::get_roadinters_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapRoadInter*>* result = ref.roadinters;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocode::get_pois_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapPOI*>* result = ref.pois;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapReGeocode::get_aois_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapAOI*>* result = ref.aois;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_formattedAddress_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.formattedAddress;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.province;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_citycode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.citycode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_district_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.district;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_township_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.township;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_neighborhood_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.neighborhood;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_building_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.building;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeocode::get_level_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.level;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStop::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStop::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStop::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStop::get_citycode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.citycode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStop::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStop::get_buslines_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapBusLine*>* result = ref.buslines;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusStop::get_sequence_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.sequence;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.type;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_polyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.polyline;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_citycode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.citycode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_startStop_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.startStop;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_endStop_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.endStop;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_startTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.startTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_endTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.endTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_company_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.company;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_basicPrice_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.basicPrice;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_totalPrice_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.totalPrice;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_bounds_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPolygon* result = ref.bounds;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_busStops_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapBusStop*>* result = ref.busStops;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_departureStop_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapBusStop* result = ref.departureStop;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_arrivalStop_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapBusStop* result = ref.arrivalStop;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_viaBusStops_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapBusStop*>* result = ref.viaBusStops;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapBusLine::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrict::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrict::get_citycode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.citycode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrict::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrict::get_level_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.level;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrict::get_center_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.center;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrict::get_districts_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapDistrict*>* result = ref.districts;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistrict::get_polylines_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<NSString*>* result = ref.polylines;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTMC::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTMC::get_status_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.status;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTMC::get_polyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.polyline;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_instruction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.instruction;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_orientation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.orientation;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_road_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.road;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_polyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.polyline;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_action_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.action;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_assistantAction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.assistantAction;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_tolls_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.tolls;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_tollDistance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.tollDistance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_tollRoad_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.tollRoad;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_cities_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapCity*>* result = ref.cities;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapStep::get_tmcs_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapTMC*>* result = ref.tmcs;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPath::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPath::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPath::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.strategy;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPath::get_steps_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapStep*>* result = ref.steps;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPath::get_tolls_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.tolls;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPath::get_tollDistance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.tollDistance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPath::get_totalTrafficLights_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.totalTrafficLights;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPath::get_restriction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.restriction;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureTimeInfoElement::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureTimeInfoElement::get_pathindex_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.pathindex;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureTimeInfoElement::get_restriction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.restriction;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureTimeInfoElement::get_tmcs_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapTMC*>* result = ref.tmcs;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureTimeInfo::get_startTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.startTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapFutureTimeInfo::get_elements_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapFutureTimeInfoElement*>* result = ref.elements;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWalking::get_origin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.origin;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWalking::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.destination;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWalking::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWalking::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapWalking::get_steps_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapStep*>* result = ref.steps;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTaxi::get_origin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.origin;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTaxi::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.destination;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTaxi::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTaxi::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTaxi::get_sname_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.sname;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTaxi::get_tname_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.tname;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwayStation::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwayStation::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwayStation::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwayStation::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwayStation::get_time_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.time;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwayStation::get_wait_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.wait;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwayStation::get_isStart_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.isStart;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwayStation::get_isEnd_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.isEnd;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwaySpace::get_code_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.code;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailwaySpace::get_cost_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.cost;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_trip_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.trip;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.type;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_time_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.time;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_departureStation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapRailwayStation* result = ref.departureStation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_arrivalStation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapRailwayStation* result = ref.arrivalStation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_spaces_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapRailwaySpace*>* result = ref.spaces;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_viaStops_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapRailwayStation*>* result = ref.viaStops;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRailway::get_alters_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapRailway*>* result = ref.alters;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSegment::get_walking_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapWalking* result = ref.walking;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSegment::get_buslines_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapBusLine*>* result = ref.buslines;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSegment::get_taxi_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapTaxi* result = ref.taxi;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSegment::get_railway_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapRailway* result = ref.railway;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSegment::get_enterName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.enterName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSegment::get_enterLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.enterLocation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSegment::get_exitName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.exitName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSegment::get_exitLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.exitLocation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransit::get_cost_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.cost;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransit::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransit::get_nightflag_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.nightflag;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransit::get_walkingDistance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.walkingDistance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransit::get_segments_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapSegment*>* result = ref.segments;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTransit::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoute::get_origin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.origin;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoute::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.destination;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoute::get_taxiCost_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.taxiCost;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoute::get_paths_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapPath*>* result = ref.paths;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapRoute::get_transits_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapTransit*>* result = ref.transits;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceResult::get_originID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.originID;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceResult::get_destID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.destID;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceResult::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceResult::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceResult::get_info_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.info;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapDistanceResult::get_code_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.code;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.province;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_weather_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.weather;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_temperature_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.temperature;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_windDirection_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.windDirection;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_windPower_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.windPower;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_humidity_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.humidity;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherLive::get_reportTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.reportTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_date_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.date;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_week_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.week;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_dayWeather_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.dayWeather;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_nightWeather_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.nightWeather;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_dayTemp_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.dayTemp;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_nightTemp_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.nightTemp;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_dayWind_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.dayWind;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_nightWind_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.nightWind;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_dayPower_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.dayPower;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalDayWeatherForecast::get_nightPower_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.nightPower;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherForecast::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherForecast::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.province;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherForecast::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherForecast::get_reportTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.reportTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocalWeatherForecast::get_casts_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapLocalDayWeatherForecast*>* result = ref.casts;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbyUserInfo::get_userID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.userID;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbyUserInfo::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbyUserInfo::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbyUserInfo::get_updatetime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSTimeInterval result = ref.updatetime;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficEvaluation::get_evaluationDescription_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.evaluationDescription;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficEvaluation::get_status_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.status;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficEvaluation::get_expedite_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.expedite;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficEvaluation::get_congested_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.congested;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficEvaluation::get_blocked_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.blocked;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficEvaluation::get_unknown_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.unknown;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficRoad::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficRoad::get_status_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.status;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficRoad::get_direction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.direction;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficRoad::get_angle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              float result = ref.angle;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficRoad::get_speed_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              float result = ref.speed;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficRoad::get_polyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.polyline;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficInfo::get_statusDescription_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.statusDescription;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficInfo::get_evaluation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapTrafficEvaluation* result = ref.evaluation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapTrafficInfo::get_roads_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapTrafficRoad*>* result = ref.roads;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudImage::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudImage::get_preurl_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.preurl;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudImage::get_url_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.url;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOI::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.uid;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOI::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOI::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOI::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOI::get_createTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.createTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOI::get_updateTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.updateTime;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOI::get_distance_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.distance;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapCloudPOI::get_images_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<AMapCloudImage*>* result = ref.images;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbyUploadInfo::get_userID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.userID;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbyUploadInfo::get_coordinateType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapSearchCoordinateType result = ref.coordinateType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbyUploadInfo::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.coordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchManager::get_uploadTimeInterval_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSTimeInterval result = ref.uploadTimeInterval;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapNearbySearchManager::get_isAutoUploading_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.isAutoUploading;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSearchAPI::get_timeout_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.timeout;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapSearchAPI::get_language_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapSearchLanguage result = ref.language;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapPOISearchBaseRequest::set_types": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::set_types");
          }
      
          // args
          // jsonable arg
          NSString* types = (NSString*) args[@"types"];
      
          // ref
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.types = types;
          methodResult(@"success");
      },
      
      @"AMapPOISearchBaseRequest::set_sortrule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::set_sortrule");
          }
      
          // args
          // jsonable arg
          NSInteger sortrule = [args[@"sortrule"] integerValue];
      
          // ref
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sortrule = sortrule;
          methodResult(@"success");
      },
      
      @"AMapPOISearchBaseRequest::set_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::set_offset");
          }
      
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.offset = offset;
          methodResult(@"success");
      },
      
      @"AMapPOISearchBaseRequest::set_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::set_page");
          }
      
          // args
          // jsonable arg
          NSInteger page = [args[@"page"] integerValue];
      
          // ref
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.page = page;
          methodResult(@"success");
      },
      
      @"AMapPOISearchBaseRequest::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::set_building");
          }
      
          // args
          // jsonable arg
          NSString* building = (NSString*) args[@"building"];
      
          // ref
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.building = building;
          methodResult(@"success");
      },
      
      @"AMapPOISearchBaseRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::set_requireExtension");
          }
      
          // args
          // jsonable arg
          BOOL requireExtension = [args[@"requireExtension"] boolValue];
      
          // ref
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.requireExtension = requireExtension;
          methodResult(@"success");
      },
      
      @"AMapPOISearchBaseRequest::set_requireSubPOIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchBaseRequest::set_requireSubPOIs");
          }
      
          // args
          // jsonable arg
          BOOL requireSubPOIs = [args[@"requireSubPOIs"] boolValue];
      
          // ref
          AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.requireSubPOIs = requireSubPOIs;
          methodResult(@"success");
      },
      
      @"AMapPOIIDSearchRequest::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIIDSearchRequest::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapPOIIDSearchRequest* ref = (AMapPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapPOIKeywordsSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIKeywordsSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapPOIKeywordsSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIKeywordsSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapPOIKeywordsSearchRequest::set_cityLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIKeywordsSearchRequest::set_cityLimit");
          }
      
          // args
          // jsonable arg
          BOOL cityLimit = [args[@"cityLimit"] boolValue];
      
          // ref
          AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cityLimit = cityLimit;
          methodResult(@"success");
      },
      
      @"AMapPOIKeywordsSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIKeywordsSearchRequest::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapPOIAroundSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIAroundSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapPOIAroundSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIAroundSearchRequest::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapPOIAroundSearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIAroundSearchRequest::set_radius");
          }
      
          // args
          // jsonable arg
          NSInteger radius = [args[@"radius"] integerValue];
      
          // ref
          AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.radius = radius;
          methodResult(@"success");
      },
      
      @"AMapPOIAroundSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIAroundSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapPOIPolygonSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIPolygonSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapPOIPolygonSearchRequest::set_polygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIPolygonSearchRequest::set_polygon");
          }
      
          // args
          // ref arg
          AMapGeoPolygon* polygon = (AMapGeoPolygon*) HEAP[@([args[@"polygon"] integerValue])];
      
          // ref
          AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polygon = polygon;
          methodResult(@"success");
      },
      
      @"AMapPOISearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapPOISearchResponse::set_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchResponse::set_suggestion");
          }
      
          // args
          // ref arg
          AMapSuggestion* suggestion = (AMapSuggestion*) HEAP[@([args[@"suggestion"] integerValue])];
      
          // ref
          AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.suggestion = suggestion;
          methodResult(@"success");
      },
      
      @"AMapPOISearchResponse::set_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOISearchResponse::set_pois");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
          NSMutableArray<AMapPOI*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
          for (int i = 0; i < poisRefArray.count; i++) {
              AMapPOI* item = (AMapPOI*) HEAP[[poisRefArray objectAtIndex:i]];
              [pois addObject:item];
          }
      
          // ref
          AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pois = pois;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchRequest::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::set_origin");
          }
      
          // args
          // ref arg
          AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
      
          // ref
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origin = origin;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchRequest::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::set_destination");
          }
      
          // args
          // ref arg
          AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
      
          // ref
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destination = destination;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchRequest::set_searchType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::set_searchType");
          }
      
          // args
          // enum arg
          AMapRoutePOISearchType searchType = (AMapRoutePOISearchType) [args[@"searchType"] integerValue];
      
          // ref
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.searchType = searchType;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::set_strategy");
          }
      
          // args
          // jsonable arg
          NSInteger strategy = [args[@"strategy"] integerValue];
      
          // ref
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strategy = strategy;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchRequest::set_range": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::set_range");
          }
      
          // args
          // jsonable arg
          NSInteger range = [args[@"range"] integerValue];
      
          // ref
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.range = range;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchRequest::set_polylineStr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::set_polylineStr");
          }
      
          // args
          // jsonable arg
          NSString* polylineStr = (NSString*) args[@"polylineStr"];
      
          // ref
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polylineStr = polylineStr;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchRequest::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchRequest::set_polyline");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* polylineRefArray = (NSArray<NSNumber*> *) args[@"polyline"];
          NSMutableArray<AMapGeoPoint*>* polyline = [NSMutableArray arrayWithCapacity:polylineRefArray.count];
          for (int i = 0; i < polylineRefArray.count; i++) {
              AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[polylineRefArray objectAtIndex:i]];
              [polyline addObject:item];
          }
      
          // ref
          AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polyline = polyline;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapRoutePOISearchResponse::set_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOISearchResponse::set_pois");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
          NSMutableArray<AMapRoutePOI*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
          for (int i = 0; i < poisRefArray.count; i++) {
              AMapRoutePOI* item = (AMapRoutePOI*) HEAP[[poisRefArray objectAtIndex:i]];
              [pois addObject:item];
          }
      
          // ref
          AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pois = pois;
          methodResult(@"success");
      },
      
      @"AMapInputTipsSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapInputTipsSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapInputTipsSearchRequest::set_types": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::set_types");
          }
      
          // args
          // jsonable arg
          NSString* types = (NSString*) args[@"types"];
      
          // ref
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.types = types;
          methodResult(@"success");
      },
      
      @"AMapInputTipsSearchRequest::set_cityLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::set_cityLimit");
          }
      
          // args
          // jsonable arg
          BOOL cityLimit = [args[@"cityLimit"] boolValue];
      
          // ref
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cityLimit = cityLimit;
          methodResult(@"success");
      },
      
      @"AMapInputTipsSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchRequest::set_location");
          }
      
          // args
          // jsonable arg
          NSString* location = (NSString*) args[@"location"];
      
          // ref
          AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapInputTipsSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapInputTipsSearchResponse::set_tips": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapInputTipsSearchResponse::set_tips");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* tipsRefArray = (NSArray<NSNumber*> *) args[@"tips"];
          NSMutableArray<AMapTip*>* tips = [NSMutableArray arrayWithCapacity:tipsRefArray.count];
          for (int i = 0; i < tipsRefArray.count; i++) {
              AMapTip* item = (AMapTip*) HEAP[[tipsRefArray objectAtIndex:i]];
              [tips addObject:item];
          }
      
          // ref
          AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tips = tips;
          methodResult(@"success");
      },
      
      @"AMapGeocodeSearchRequest::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocodeSearchRequest::set_address");
          }
      
          // args
          // jsonable arg
          NSString* address = (NSString*) args[@"address"];
      
          // ref
          AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.address = address;
          methodResult(@"success");
      },
      
      @"AMapGeocodeSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocodeSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapGeocodeSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocodeSearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapGeocodeSearchResponse::set_geocodes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocodeSearchResponse::set_geocodes");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* geocodesRefArray = (NSArray<NSNumber*> *) args[@"geocodes"];
          NSMutableArray<AMapGeocode*>* geocodes = [NSMutableArray arrayWithCapacity:geocodesRefArray.count];
          for (int i = 0; i < geocodesRefArray.count; i++) {
              AMapGeocode* item = (AMapGeocode*) HEAP[[geocodesRefArray objectAtIndex:i]];
              [geocodes addObject:item];
          }
      
          // ref
          AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.geocodes = geocodes;
          methodResult(@"success");
      },
      
      @"AMapReGeocodeSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchRequest::set_requireExtension");
          }
      
          // args
          // jsonable arg
          BOOL requireExtension = [args[@"requireExtension"] boolValue];
      
          // ref
          AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.requireExtension = requireExtension;
          methodResult(@"success");
      },
      
      @"AMapReGeocodeSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchRequest::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapReGeocodeSearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchRequest::set_radius");
          }
      
          // args
          // jsonable arg
          NSInteger radius = [args[@"radius"] integerValue];
      
          // ref
          AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.radius = radius;
          methodResult(@"success");
      },
      
      @"AMapReGeocodeSearchRequest::set_poitype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchRequest::set_poitype");
          }
      
          // args
          // jsonable arg
          NSString* poitype = (NSString*) args[@"poitype"];
      
          // ref
          AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.poitype = poitype;
          methodResult(@"success");
      },
      
      @"AMapReGeocodeSearchResponse::set_regeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocodeSearchResponse::set_regeocode");
          }
      
          // args
          // ref arg
          AMapReGeocode* regeocode = (AMapReGeocode*) HEAP[@([args[@"regeocode"] integerValue])];
      
          // ref
          AMapReGeocodeSearchResponse* ref = (AMapReGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.regeocode = regeocode;
          methodResult(@"success");
      },
      
      @"AMapBusStopSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapBusStopSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapBusStopSearchRequest::set_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchRequest::set_offset");
          }
      
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.offset = offset;
          methodResult(@"success");
      },
      
      @"AMapBusStopSearchRequest::set_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchRequest::set_page");
          }
      
          // args
          // jsonable arg
          NSInteger page = [args[@"page"] integerValue];
      
          // ref
          AMapBusStopSearchRequest* ref = (AMapBusStopSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.page = page;
          methodResult(@"success");
      },
      
      @"AMapBusStopSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapBusStopSearchResponse::set_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchResponse::set_suggestion");
          }
      
          // args
          // ref arg
          AMapSuggestion* suggestion = (AMapSuggestion*) HEAP[@([args[@"suggestion"] integerValue])];
      
          // ref
          AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.suggestion = suggestion;
          methodResult(@"success");
      },
      
      @"AMapBusStopSearchResponse::set_busstops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStopSearchResponse::set_busstops");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* busstopsRefArray = (NSArray<NSNumber*> *) args[@"busstops"];
          NSMutableArray<AMapBusStop*>* busstops = [NSMutableArray arrayWithCapacity:busstopsRefArray.count];
          for (int i = 0; i < busstopsRefArray.count; i++) {
              AMapBusStop* item = (AMapBusStop*) HEAP[[busstopsRefArray objectAtIndex:i]];
              [busstops addObject:item];
          }
      
          // ref
          AMapBusStopSearchResponse* ref = (AMapBusStopSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.busstops = busstops;
          methodResult(@"success");
      },
      
      @"AMapBusLineBaseSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineBaseSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapBusLineBaseSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineBaseSearchRequest::set_requireExtension");
          }
      
          // args
          // jsonable arg
          BOOL requireExtension = [args[@"requireExtension"] boolValue];
      
          // ref
          AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.requireExtension = requireExtension;
          methodResult(@"success");
      },
      
      @"AMapBusLineBaseSearchRequest::set_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineBaseSearchRequest::set_offset");
          }
      
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.offset = offset;
          methodResult(@"success");
      },
      
      @"AMapBusLineBaseSearchRequest::set_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineBaseSearchRequest::set_page");
          }
      
          // args
          // jsonable arg
          NSInteger page = [args[@"page"] integerValue];
      
          // ref
          AMapBusLineBaseSearchRequest* ref = (AMapBusLineBaseSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.page = page;
          methodResult(@"success");
      },
      
      @"AMapBusLineNameSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineNameSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapBusLineNameSearchRequest* ref = (AMapBusLineNameSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapBusLineIDSearchRequest::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineIDSearchRequest::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapBusLineIDSearchRequest* ref = (AMapBusLineIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapBusLineSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineSearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapBusLineSearchResponse::set_suggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineSearchResponse::set_suggestion");
          }
      
          // args
          // ref arg
          AMapSuggestion* suggestion = (AMapSuggestion*) HEAP[@([args[@"suggestion"] integerValue])];
      
          // ref
          AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.suggestion = suggestion;
          methodResult(@"success");
      },
      
      @"AMapBusLineSearchResponse::set_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLineSearchResponse::set_buslines");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* buslinesRefArray = (NSArray<NSNumber*> *) args[@"buslines"];
          NSMutableArray<AMapBusLine*>* buslines = [NSMutableArray arrayWithCapacity:buslinesRefArray.count];
          for (int i = 0; i < buslinesRefArray.count; i++) {
              AMapBusLine* item = (AMapBusLine*) HEAP[[buslinesRefArray objectAtIndex:i]];
              [buslines addObject:item];
          }
      
          // ref
          AMapBusLineSearchResponse* ref = (AMapBusLineSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.buslines = buslines;
          methodResult(@"success");
      },
      
      @"AMapDistrictSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapDistrictSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchRequest::set_requireExtension");
          }
      
          // args
          // jsonable arg
          BOOL requireExtension = [args[@"requireExtension"] boolValue];
      
          // ref
          AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.requireExtension = requireExtension;
          methodResult(@"success");
      },
      
      @"AMapDistrictSearchRequest::set_showBusinessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchRequest::set_showBusinessArea");
          }
      
          // args
          // jsonable arg
          BOOL showBusinessArea = [args[@"showBusinessArea"] boolValue];
      
          // ref
          AMapDistrictSearchRequest* ref = (AMapDistrictSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showBusinessArea = showBusinessArea;
          methodResult(@"success");
      },
      
      @"AMapDistrictSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapDistrictSearchResponse* ref = (AMapDistrictSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapDistrictSearchResponse::set_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrictSearchResponse::set_districts");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* districtsRefArray = (NSArray<NSNumber*> *) args[@"districts"];
          NSMutableArray<AMapDistrict*>* districts = [NSMutableArray arrayWithCapacity:districtsRefArray.count];
          for (int i = 0; i < districtsRefArray.count; i++) {
              AMapDistrict* item = (AMapDistrict*) HEAP[[districtsRefArray objectAtIndex:i]];
              [districts addObject:item];
          }
      
          // ref
          AMapDistrictSearchResponse* ref = (AMapDistrictSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.districts = districts;
          methodResult(@"success");
      },
      
      @"AMapRouteSearchBaseRequest::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteSearchBaseRequest::set_origin");
          }
      
          // args
          // ref arg
          AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
      
          // ref
          AMapRouteSearchBaseRequest* ref = (AMapRouteSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origin = origin;
          methodResult(@"success");
      },
      
      @"AMapRouteSearchBaseRequest::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteSearchBaseRequest::set_destination");
          }
      
          // args
          // ref arg
          AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
      
          // ref
          AMapRouteSearchBaseRequest* ref = (AMapRouteSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destination = destination;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_strategy");
          }
      
          // args
          // jsonable arg
          NSInteger strategy = [args[@"strategy"] integerValue];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strategy = strategy;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_waypoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_waypoints");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* waypointsRefArray = (NSArray<NSNumber*> *) args[@"waypoints"];
          NSMutableArray<AMapGeoPoint*>* waypoints = [NSMutableArray arrayWithCapacity:waypointsRefArray.count];
          for (int i = 0; i < waypointsRefArray.count; i++) {
              AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[waypointsRefArray objectAtIndex:i]];
              [waypoints addObject:item];
          }
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.waypoints = waypoints;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_avoidpolygons": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_avoidpolygons");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* avoidpolygonsRefArray = (NSArray<NSNumber*> *) args[@"avoidpolygons"];
          NSMutableArray<AMapGeoPolygon*>* avoidpolygons = [NSMutableArray arrayWithCapacity:avoidpolygonsRefArray.count];
          for (int i = 0; i < avoidpolygonsRefArray.count; i++) {
              AMapGeoPolygon* item = (AMapGeoPolygon*) HEAP[[avoidpolygonsRefArray objectAtIndex:i]];
              [avoidpolygons addObject:item];
          }
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.avoidpolygons = avoidpolygons;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_avoidroad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_avoidroad");
          }
      
          // args
          // jsonable arg
          NSString* avoidroad = (NSString*) args[@"avoidroad"];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.avoidroad = avoidroad;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_originId");
          }
      
          // args
          // jsonable arg
          NSString* originId = (NSString*) args[@"originId"];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.originId = originId;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_destinationId");
          }
      
          // args
          // jsonable arg
          NSString* destinationId = (NSString*) args[@"destinationId"];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationId = destinationId;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_origintype");
          }
      
          // args
          // jsonable arg
          NSString* origintype = (NSString*) args[@"origintype"];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origintype = origintype;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_destinationtype");
          }
      
          // args
          // jsonable arg
          NSString* destinationtype = (NSString*) args[@"destinationtype"];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationtype = destinationtype;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_requireExtension");
          }
      
          // args
          // jsonable arg
          BOOL requireExtension = [args[@"requireExtension"] boolValue];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.requireExtension = requireExtension;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_plateProvince");
          }
      
          // args
          // jsonable arg
          NSString* plateProvince = (NSString*) args[@"plateProvince"];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.plateProvince = plateProvince;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_plateNumber");
          }
      
          // args
          // jsonable arg
          NSString* plateNumber = (NSString*) args[@"plateNumber"];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.plateNumber = plateNumber;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_ferry": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_ferry");
          }
      
          // args
          // jsonable arg
          NSInteger ferry = [args[@"ferry"] integerValue];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.ferry = ferry;
          methodResult(@"success");
      },
      
      @"AMapDrivingRouteSearchRequest::set_cartype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDrivingRouteSearchRequest::set_cartype");
          }
      
          // args
          // jsonable arg
          NSInteger cartype = [args[@"cartype"] integerValue];
      
          // ref
          AMapDrivingRouteSearchRequest* ref = (AMapDrivingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cartype = cartype;
          methodResult(@"success");
      },
      
      @"AMapWalkingRouteSearchRequest::set_multipath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalkingRouteSearchRequest::set_multipath");
          }
      
          // args
          // jsonable arg
          NSInteger multipath = [args[@"multipath"] integerValue];
      
          // ref
          AMapWalkingRouteSearchRequest* ref = (AMapWalkingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.multipath = multipath;
          methodResult(@"success");
      },
      
      @"AMapTransitRouteSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::set_strategy");
          }
      
          // args
          // jsonable arg
          NSInteger strategy = [args[@"strategy"] integerValue];
      
          // ref
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strategy = strategy;
          methodResult(@"success");
      },
      
      @"AMapTransitRouteSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapTransitRouteSearchRequest::set_destinationCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::set_destinationCity");
          }
      
          // args
          // jsonable arg
          NSString* destinationCity = (NSString*) args[@"destinationCity"];
      
          // ref
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationCity = destinationCity;
          methodResult(@"success");
      },
      
      @"AMapTransitRouteSearchRequest::set_nightflag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::set_nightflag");
          }
      
          // args
          // jsonable arg
          BOOL nightflag = [args[@"nightflag"] boolValue];
      
          // ref
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.nightflag = nightflag;
          methodResult(@"success");
      },
      
      @"AMapTransitRouteSearchRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransitRouteSearchRequest::set_requireExtension");
          }
      
          // args
          // jsonable arg
          BOOL requireExtension = [args[@"requireExtension"] boolValue];
      
          // ref
          AMapTransitRouteSearchRequest* ref = (AMapTransitRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.requireExtension = requireExtension;
          methodResult(@"success");
      },
      
      @"AMapRidingRouteSearchRequest::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRidingRouteSearchRequest::set_type");
          }
      
          // args
          // jsonable arg
          NSInteger type = [args[@"type"] integerValue];
      
          // ref
          AMapRidingRouteSearchRequest* ref = (AMapRidingRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapRouteSearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteSearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapRouteSearchResponse::set_route": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteSearchResponse::set_route");
          }
      
          // args
          // ref arg
          AMapRoute* route = (AMapRoute*) HEAP[@([args[@"route"] integerValue])];
      
          // ref
          AMapRouteSearchResponse* ref = (AMapRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.route = route;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_strategy");
          }
      
          // args
          // jsonable arg
          NSInteger strategy = [args[@"strategy"] integerValue];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strategy = strategy;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_waypoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_waypoints");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* waypointsRefArray = (NSArray<NSNumber*> *) args[@"waypoints"];
          NSMutableArray<AMapGeoPoint*>* waypoints = [NSMutableArray arrayWithCapacity:waypointsRefArray.count];
          for (int i = 0; i < waypointsRefArray.count; i++) {
              AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[waypointsRefArray objectAtIndex:i]];
              [waypoints addObject:item];
          }
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.waypoints = waypoints;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_originId");
          }
      
          // args
          // jsonable arg
          NSString* originId = (NSString*) args[@"originId"];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.originId = originId;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_destinationId");
          }
      
          // args
          // jsonable arg
          NSString* destinationId = (NSString*) args[@"destinationId"];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationId = destinationId;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_origintype");
          }
      
          // args
          // jsonable arg
          NSString* origintype = (NSString*) args[@"origintype"];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origintype = origintype;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_destinationtype");
          }
      
          // args
          // jsonable arg
          NSString* destinationtype = (NSString*) args[@"destinationtype"];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationtype = destinationtype;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_plateProvince");
          }
      
          // args
          // jsonable arg
          NSString* plateProvince = (NSString*) args[@"plateProvince"];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.plateProvince = plateProvince;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_plateNumber");
          }
      
          // args
          // jsonable arg
          NSString* plateNumber = (NSString*) args[@"plateNumber"];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.plateNumber = plateNumber;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_size");
          }
      
          // args
          // enum arg
          AMapTruckSizeType size = (AMapTruckSizeType) [args[@"size"] integerValue];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.size = size;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_height");
          }
      
          // args
          // jsonable arg
          CGFloat height = [args[@"height"] floatValue];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.height = height;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_width");
          }
      
          // args
          // jsonable arg
          CGFloat width = [args[@"width"] floatValue];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.width = width;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_load": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_load");
          }
      
          // args
          // jsonable arg
          CGFloat load = [args[@"load"] floatValue];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.load = load;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_weight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_weight");
          }
      
          // args
          // jsonable arg
          CGFloat weight = [args[@"weight"] floatValue];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.weight = weight;
          methodResult(@"success");
      },
      
      @"AMapTruckRouteSearchRequest::set_axis": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTruckRouteSearchRequest::set_axis");
          }
      
          // args
          // jsonable arg
          NSInteger axis = [args[@"axis"] integerValue];
      
          // ref
          AMapTruckRouteSearchRequest* ref = (AMapTruckRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.axis = axis;
          methodResult(@"success");
      },
      
      @"AMapDistanceSearchRequest::set_origins": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceSearchRequest::set_origins");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* originsRefArray = (NSArray<NSNumber*> *) args[@"origins"];
          NSMutableArray<AMapGeoPoint*>* origins = [NSMutableArray arrayWithCapacity:originsRefArray.count];
          for (int i = 0; i < originsRefArray.count; i++) {
              AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[originsRefArray objectAtIndex:i]];
              [origins addObject:item];
          }
      
          // ref
          AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origins = origins;
          methodResult(@"success");
      },
      
      @"AMapDistanceSearchRequest::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceSearchRequest::set_destination");
          }
      
          // args
          // ref arg
          AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
      
          // ref
          AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destination = destination;
          methodResult(@"success");
      },
      
      @"AMapDistanceSearchRequest::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceSearchRequest::set_type");
          }
      
          // args
          // jsonable arg
          NSInteger type = [args[@"type"] integerValue];
      
          // ref
          AMapDistanceSearchRequest* ref = (AMapDistanceSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapDistanceSearchResponse::set_results": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceSearchResponse::set_results");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* resultsRefArray = (NSArray<NSNumber*> *) args[@"results"];
          NSMutableArray<AMapDistanceResult*>* results = [NSMutableArray arrayWithCapacity:resultsRefArray.count];
          for (int i = 0; i < resultsRefArray.count; i++) {
              AMapDistanceResult* item = (AMapDistanceResult*) HEAP[[resultsRefArray objectAtIndex:i]];
              [results addObject:item];
          }
      
          // ref
          AMapDistanceSearchResponse* ref = (AMapDistanceSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.results = results;
          methodResult(@"success");
      },
      
      @"AMapWeatherSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWeatherSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapWeatherSearchRequest::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWeatherSearchRequest::set_type");
          }
      
          // args
          // enum arg
          AMapWeatherType type = (AMapWeatherType) [args[@"type"] integerValue];
      
          // ref
          AMapWeatherSearchRequest* ref = (AMapWeatherSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapWeatherSearchResponse::set_lives": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWeatherSearchResponse::set_lives");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* livesRefArray = (NSArray<NSNumber*> *) args[@"lives"];
          NSMutableArray<AMapLocalWeatherLive*>* lives = [NSMutableArray arrayWithCapacity:livesRefArray.count];
          for (int i = 0; i < livesRefArray.count; i++) {
              AMapLocalWeatherLive* item = (AMapLocalWeatherLive*) HEAP[[livesRefArray objectAtIndex:i]];
              [lives addObject:item];
          }
      
          // ref
          AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lives = lives;
          methodResult(@"success");
      },
      
      @"AMapWeatherSearchResponse::set_forecasts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWeatherSearchResponse::set_forecasts");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* forecastsRefArray = (NSArray<NSNumber*> *) args[@"forecasts"];
          NSMutableArray<AMapLocalWeatherForecast*>* forecasts = [NSMutableArray arrayWithCapacity:forecastsRefArray.count];
          for (int i = 0; i < forecastsRefArray.count; i++) {
              AMapLocalWeatherForecast* item = (AMapLocalWeatherForecast*) HEAP[[forecastsRefArray objectAtIndex:i]];
              [forecasts addObject:item];
          }
      
          // ref
          AMapWeatherSearchResponse* ref = (AMapWeatherSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.forecasts = forecasts;
          methodResult(@"success");
      },
      
      @"AMapRoadTrafficSearchBaseRequest::set_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchBaseRequest::set_level");
          }
      
          // args
          // jsonable arg
          NSInteger level = [args[@"level"] integerValue];
      
          // ref
          AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.level = level;
          methodResult(@"success");
      },
      
      @"AMapRoadTrafficSearchBaseRequest::set_requireExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchBaseRequest::set_requireExtension");
          }
      
          // args
          // jsonable arg
          BOOL requireExtension = [args[@"requireExtension"] boolValue];
      
          // ref
          AMapRoadTrafficSearchBaseRequest* ref = (AMapRoadTrafficSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.requireExtension = requireExtension;
          methodResult(@"success");
      },
      
      @"AMapRoadTrafficSearchRequest::set_roadName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchRequest::set_roadName");
          }
      
          // args
          // jsonable arg
          NSString* roadName = (NSString*) args[@"roadName"];
      
          // ref
          AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.roadName = roadName;
          methodResult(@"success");
      },
      
      @"AMapRoadTrafficSearchRequest::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchRequest::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapRoadTrafficSearchRequest* ref = (AMapRoadTrafficSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapRoadTrafficCircleSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficCircleSearchRequest::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapRoadTrafficCircleSearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficCircleSearchRequest::set_radius");
          }
      
          // args
          // jsonable arg
          NSInteger radius = [args[@"radius"] integerValue];
      
          // ref
          AMapRoadTrafficCircleSearchRequest* ref = (AMapRoadTrafficCircleSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.radius = radius;
          methodResult(@"success");
      },
      
      @"AMapRoadTrafficSearchResponse::set_trafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadTrafficSearchResponse::set_trafficInfo");
          }
      
          // args
          // ref arg
          AMapTrafficInfo* trafficInfo = (AMapTrafficInfo*) HEAP[@([args[@"trafficInfo"] integerValue])];
      
          // ref
          AMapRoadTrafficSearchResponse* ref = (AMapRoadTrafficSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.trafficInfo = trafficInfo;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchRequest::set_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::set_center");
          }
      
          // args
          // ref arg
          AMapGeoPoint* center = (AMapGeoPoint*) HEAP[@([args[@"center"] integerValue])];
      
          // ref
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.center = center;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::set_radius");
          }
      
          // args
          // jsonable arg
          NSInteger radius = [args[@"radius"] integerValue];
      
          // ref
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.radius = radius;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchRequest::set_searchType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::set_searchType");
          }
      
          // args
          // enum arg
          AMapNearbySearchType searchType = (AMapNearbySearchType) [args[@"searchType"] integerValue];
      
          // ref
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.searchType = searchType;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchRequest::set_timeRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::set_timeRange");
          }
      
          // args
          // jsonable arg
          NSInteger timeRange = [args[@"timeRange"] integerValue];
      
          // ref
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.timeRange = timeRange;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchRequest::set_limit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchRequest::set_limit");
          }
      
          // args
          // jsonable arg
          NSInteger limit = [args[@"limit"] integerValue];
      
          // ref
          AMapNearbySearchRequest* ref = (AMapNearbySearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.limit = limit;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchResponse::set_infos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchResponse::set_infos");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* infosRefArray = (NSArray<NSNumber*> *) args[@"infos"];
          NSMutableArray<AMapNearbyUserInfo*>* infos = [NSMutableArray arrayWithCapacity:infosRefArray.count];
          for (int i = 0; i < infosRefArray.count; i++) {
              AMapNearbyUserInfo* item = (AMapNearbyUserInfo*) HEAP[[infosRefArray objectAtIndex:i]];
              [infos addObject:item];
          }
      
          // ref
          AMapNearbySearchResponse* ref = (AMapNearbySearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.infos = infos;
          methodResult(@"success");
      },
      
      @"AMapCloudSearchBaseRequest::set_tableID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::set_tableID");
          }
      
          // args
          // jsonable arg
          NSString* tableID = (NSString*) args[@"tableID"];
      
          // ref
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tableID = tableID;
          methodResult(@"success");
      },
      
      @"AMapCloudSearchBaseRequest::set_filter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::set_filter");
          }
      
          // args
          // jsonable arg
          NSString* filter = (NSString*) args[@"filter"];
      
          // ref
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.filter = filter;
          methodResult(@"success");
      },
      
      @"AMapCloudSearchBaseRequest::set_sortFields": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::set_sortFields");
          }
      
          // args
          // jsonable arg
          NSString* sortFields = (NSString*) args[@"sortFields"];
      
          // ref
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sortFields = sortFields;
          methodResult(@"success");
      },
      
      @"AMapCloudSearchBaseRequest::set_sortType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::set_sortType");
          }
      
          // args
          // enum arg
          AMapCloudSortType sortType = (AMapCloudSortType) [args[@"sortType"] integerValue];
      
          // ref
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sortType = sortType;
          methodResult(@"success");
      },
      
      @"AMapCloudSearchBaseRequest::set_offset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::set_offset");
          }
      
          // args
          // jsonable arg
          NSInteger offset = [args[@"offset"] integerValue];
      
          // ref
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.offset = offset;
          methodResult(@"success");
      },
      
      @"AMapCloudSearchBaseRequest::set_page": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudSearchBaseRequest::set_page");
          }
      
          // args
          // jsonable arg
          NSInteger page = [args[@"page"] integerValue];
      
          // ref
          AMapCloudSearchBaseRequest* ref = (AMapCloudSearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.page = page;
          methodResult(@"success");
      },
      
      @"AMapCloudPOIAroundSearchRequest::set_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIAroundSearchRequest::set_center");
          }
      
          // args
          // ref arg
          AMapGeoPoint* center = (AMapGeoPoint*) HEAP[@([args[@"center"] integerValue])];
      
          // ref
          AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.center = center;
          methodResult(@"success");
      },
      
      @"AMapCloudPOIAroundSearchRequest::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIAroundSearchRequest::set_radius");
          }
      
          // args
          // jsonable arg
          NSInteger radius = [args[@"radius"] integerValue];
      
          // ref
          AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.radius = radius;
          methodResult(@"success");
      },
      
      @"AMapCloudPOIAroundSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIAroundSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapCloudPOIAroundSearchRequest* ref = (AMapCloudPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapCloudPOIPolygonSearchRequest::set_polygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIPolygonSearchRequest::set_polygon");
          }
      
          // args
          // ref arg
          AMapGeoPolygon* polygon = (AMapGeoPolygon*) HEAP[@([args[@"polygon"] integerValue])];
      
          // ref
          AMapCloudPOIPolygonSearchRequest* ref = (AMapCloudPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polygon = polygon;
          methodResult(@"success");
      },
      
      @"AMapCloudPOIPolygonSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIPolygonSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapCloudPOIPolygonSearchRequest* ref = (AMapCloudPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapCloudPOIIDSearchRequest::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOIIDSearchRequest::set_uid");
          }
      
          // args
          // jsonable arg
          NSInteger uid = [args[@"uid"] integerValue];
      
          // ref
          AMapCloudPOIIDSearchRequest* ref = (AMapCloudPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapCloudPOILocalSearchRequest::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOILocalSearchRequest::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapCloudPOILocalSearchRequest* ref = (AMapCloudPOILocalSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapCloudPOILocalSearchRequest::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOILocalSearchRequest::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapCloudPOILocalSearchRequest* ref = (AMapCloudPOILocalSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapCloudPOISearchResponse::set_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOISearchResponse::set_count");
          }
      
          // args
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          AMapCloudPOISearchResponse* ref = (AMapCloudPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.count = count;
          methodResult(@"success");
      },
      
      @"AMapCloudPOISearchResponse::set_POIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOISearchResponse::set_POIs");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* POIsRefArray = (NSArray<NSNumber*> *) args[@"POIs"];
          NSMutableArray<AMapCloudPOI*>* POIs = [NSMutableArray arrayWithCapacity:POIsRefArray.count];
          for (int i = 0; i < POIsRefArray.count; i++) {
              AMapCloudPOI* item = (AMapCloudPOI*) HEAP[[POIsRefArray objectAtIndex:i]];
              [POIs addObject:item];
          }
      
          // ref
          AMapCloudPOISearchResponse* ref = (AMapCloudPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.POIs = POIs;
          methodResult(@"success");
      },
      
      @"AMapLocationShareSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationShareSearchRequest::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapLocationShareSearchRequest* ref = (AMapLocationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapLocationShareSearchRequest::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationShareSearchRequest::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapLocationShareSearchRequest* ref = (AMapLocationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapPOIShareSearchRequest::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIShareSearchRequest::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapPOIShareSearchRequest::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIShareSearchRequest::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapPOIShareSearchRequest::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIShareSearchRequest::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapPOIShareSearchRequest::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIShareSearchRequest::set_address");
          }
      
          // args
          // jsonable arg
          NSString* address = (NSString*) args[@"address"];
      
          // ref
          AMapPOIShareSearchRequest* ref = (AMapPOIShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.address = address;
          methodResult(@"success");
      },
      
      @"AMapRouteShareSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::set_strategy");
          }
      
          // args
          // jsonable arg
          NSInteger strategy = [args[@"strategy"] integerValue];
      
          // ref
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strategy = strategy;
          methodResult(@"success");
      },
      
      @"AMapRouteShareSearchRequest::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::set_type");
          }
      
          // args
          // jsonable arg
          NSInteger type = [args[@"type"] integerValue];
      
          // ref
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapRouteShareSearchRequest::set_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::set_startCoordinate");
          }
      
          // args
          // ref arg
          AMapGeoPoint* startCoordinate = (AMapGeoPoint*) HEAP[@([args[@"startCoordinate"] integerValue])];
      
          // ref
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.startCoordinate = startCoordinate;
          methodResult(@"success");
      },
      
      @"AMapRouteShareSearchRequest::set_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::set_destinationCoordinate");
          }
      
          // args
          // ref arg
          AMapGeoPoint* destinationCoordinate = (AMapGeoPoint*) HEAP[@([args[@"destinationCoordinate"] integerValue])];
      
          // ref
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationCoordinate = destinationCoordinate;
          methodResult(@"success");
      },
      
      @"AMapRouteShareSearchRequest::set_startName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::set_startName");
          }
      
          // args
          // jsonable arg
          NSString* startName = (NSString*) args[@"startName"];
      
          // ref
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.startName = startName;
          methodResult(@"success");
      },
      
      @"AMapRouteShareSearchRequest::set_destinationName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRouteShareSearchRequest::set_destinationName");
          }
      
          // args
          // jsonable arg
          NSString* destinationName = (NSString*) args[@"destinationName"];
      
          // ref
          AMapRouteShareSearchRequest* ref = (AMapRouteShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationName = destinationName;
          methodResult(@"success");
      },
      
      @"AMapNavigationShareSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNavigationShareSearchRequest::set_strategy");
          }
      
          // args
          // jsonable arg
          NSInteger strategy = [args[@"strategy"] integerValue];
      
          // ref
          AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strategy = strategy;
          methodResult(@"success");
      },
      
      @"AMapNavigationShareSearchRequest::set_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNavigationShareSearchRequest::set_startCoordinate");
          }
      
          // args
          // ref arg
          AMapGeoPoint* startCoordinate = (AMapGeoPoint*) HEAP[@([args[@"startCoordinate"] integerValue])];
      
          // ref
          AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.startCoordinate = startCoordinate;
          methodResult(@"success");
      },
      
      @"AMapNavigationShareSearchRequest::set_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNavigationShareSearchRequest::set_destinationCoordinate");
          }
      
          // args
          // ref arg
          AMapGeoPoint* destinationCoordinate = (AMapGeoPoint*) HEAP[@([args[@"destinationCoordinate"] integerValue])];
      
          // ref
          AMapNavigationShareSearchRequest* ref = (AMapNavigationShareSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationCoordinate = destinationCoordinate;
          methodResult(@"success");
      },
      
      @"AMapShareSearchResponse::set_shareURL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapShareSearchResponse::set_shareURL");
          }
      
          // args
          // jsonable arg
          NSString* shareURL = (NSString*) args[@"shareURL"];
      
          // ref
          AMapShareSearchResponse* ref = (AMapShareSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.shareURL = shareURL;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_beginTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_beginTime");
          }
      
          // args
          // jsonable arg
          NSString* beginTime = (NSString*) args[@"beginTime"];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.beginTime = beginTime;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_interval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_interval");
          }
      
          // args
          // jsonable arg
          NSInteger interval = [args[@"interval"] integerValue];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.interval = interval;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_timeCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_timeCount");
          }
      
          // args
          // jsonable arg
          NSInteger timeCount = [args[@"timeCount"] integerValue];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.timeCount = timeCount;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_strategy");
          }
      
          // args
          // jsonable arg
          NSInteger strategy = [args[@"strategy"] integerValue];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strategy = strategy;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_originId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_originId");
          }
      
          // args
          // jsonable arg
          NSString* originId = (NSString*) args[@"originId"];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.originId = originId;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_destinationId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_destinationId");
          }
      
          // args
          // jsonable arg
          NSString* destinationId = (NSString*) args[@"destinationId"];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationId = destinationId;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_origintype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_origintype");
          }
      
          // args
          // jsonable arg
          NSString* origintype = (NSString*) args[@"origintype"];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origintype = origintype;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_destinationtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_destinationtype");
          }
      
          // args
          // jsonable arg
          NSString* destinationtype = (NSString*) args[@"destinationtype"];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destinationtype = destinationtype;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_parentId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_parentId");
          }
      
          // args
          // jsonable arg
          NSString* parentId = (NSString*) args[@"parentId"];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.parentId = parentId;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_plateProvince");
          }
      
          // args
          // jsonable arg
          NSString* plateProvince = (NSString*) args[@"plateProvince"];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.plateProvince = plateProvince;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_plateNumber");
          }
      
          // args
          // jsonable arg
          NSString* plateNumber = (NSString*) args[@"plateNumber"];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.plateNumber = plateNumber;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchRequest::set_cartype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchRequest::set_cartype");
          }
      
          // args
          // jsonable arg
          NSInteger cartype = [args[@"cartype"] integerValue];
      
          // ref
          AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cartype = cartype;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchResponse::set_paths": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchResponse::set_paths");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* pathsRefArray = (NSArray<NSNumber*> *) args[@"paths"];
          NSMutableArray<AMapPath*>* paths = [NSMutableArray arrayWithCapacity:pathsRefArray.count];
          for (int i = 0; i < pathsRefArray.count; i++) {
              AMapPath* item = (AMapPath*) HEAP[[pathsRefArray objectAtIndex:i]];
              [paths addObject:item];
          }
      
          // ref
          AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.paths = paths;
          methodResult(@"success");
      },
      
      @"AMapFutureRouteSearchResponse::set_timeInfos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureRouteSearchResponse::set_timeInfos");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* timeInfosRefArray = (NSArray<NSNumber*> *) args[@"timeInfos"];
          NSMutableArray<AMapFutureTimeInfo*>* timeInfos = [NSMutableArray arrayWithCapacity:timeInfosRefArray.count];
          for (int i = 0; i < timeInfosRefArray.count; i++) {
              AMapFutureTimeInfo* item = (AMapFutureTimeInfo*) HEAP[[timeInfosRefArray objectAtIndex:i]];
              [timeInfos addObject:item];
          }
      
          // ref
          AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.timeInfos = timeInfos;
          methodResult(@"success");
      },
      
      @"AMapGeoPoint::set_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoPoint::set_latitude");
          }
      
          // args
          // jsonable arg
          CGFloat latitude = [args[@"latitude"] floatValue];
      
          // ref
          AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.latitude = latitude;
          methodResult(@"success");
      },
      
      @"AMapGeoPoint::set_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoPoint::set_longitude");
          }
      
          // args
          // jsonable arg
          CGFloat longitude = [args[@"longitude"] floatValue];
      
          // ref
          AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.longitude = longitude;
          methodResult(@"success");
      },
      
      @"AMapGeoPolygon::set_points": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoPolygon::set_points");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* pointsRefArray = (NSArray<NSNumber*> *) args[@"points"];
          NSMutableArray<AMapGeoPoint*>* points = [NSMutableArray arrayWithCapacity:pointsRefArray.count];
          for (int i = 0; i < pointsRefArray.count; i++) {
              AMapGeoPoint* item = (AMapGeoPoint*) HEAP[[pointsRefArray objectAtIndex:i]];
              [points addObject:item];
          }
      
          // ref
          AMapGeoPolygon* ref = (AMapGeoPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.points = points;
          methodResult(@"success");
      },
      
      @"AMapCity::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapCity::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::set_citycode");
          }
      
          // args
          // jsonable arg
          NSString* citycode = (NSString*) args[@"citycode"];
      
          // ref
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapCity::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapCity::set_num": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::set_num");
          }
      
          // args
          // jsonable arg
          NSInteger num = [args[@"num"] integerValue];
      
          // ref
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.num = num;
          methodResult(@"success");
      },
      
      @"AMapCity::set_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCity::set_districts");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* districtsRefArray = (NSArray<NSNumber*> *) args[@"districts"];
          NSMutableArray<AMapDistrict*>* districts = [NSMutableArray arrayWithCapacity:districtsRefArray.count];
          for (int i = 0; i < districtsRefArray.count; i++) {
              AMapDistrict* item = (AMapDistrict*) HEAP[[districtsRefArray objectAtIndex:i]];
              [districts addObject:item];
          }
      
          // ref
          AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.districts = districts;
          methodResult(@"success");
      },
      
      @"AMapSuggestion::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSuggestion::set_keywords");
          }
      
          // args
          // jsonable arg
          NSString* keywords = (NSString*) args[@"keywords"];
      
          // ref
          AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.keywords = keywords;
          methodResult(@"success");
      },
      
      @"AMapSuggestion::set_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSuggestion::set_cities");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* citiesRefArray = (NSArray<NSNumber*> *) args[@"cities"];
          NSMutableArray<AMapCity*>* cities = [NSMutableArray arrayWithCapacity:citiesRefArray.count];
          for (int i = 0; i < citiesRefArray.count; i++) {
              AMapCity* item = (AMapCity*) HEAP[[citiesRefArray objectAtIndex:i]];
              [cities addObject:item];
          }
      
          // ref
          AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cities = cities;
          methodResult(@"success");
      },
      
      @"AMapTip::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapTip::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapTip::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapTip::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::set_district");
          }
      
          // args
          // jsonable arg
          NSString* district = (NSString*) args[@"district"];
      
          // ref
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.district = district;
          methodResult(@"success");
      },
      
      @"AMapTip::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::set_address");
          }
      
          // args
          // jsonable arg
          NSString* address = (NSString*) args[@"address"];
      
          // ref
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.address = address;
          methodResult(@"success");
      },
      
      @"AMapTip::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapTip::set_typecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTip::set_typecode");
          }
      
          // args
          // jsonable arg
          NSString* typecode = (NSString*) args[@"typecode"];
      
          // ref
          AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.typecode = typecode;
          methodResult(@"success");
      },
      
      @"AMapImage::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapImage::set_title");
          }
      
          // args
          // jsonable arg
          NSString* title = (NSString*) args[@"title"];
      
          // ref
          AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.title = title;
          methodResult(@"success");
      },
      
      @"AMapImage::set_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapImage::set_url");
          }
      
          // args
          // jsonable arg
          NSString* url = (NSString*) args[@"url"];
      
          // ref
          AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.url = url;
          methodResult(@"success");
      },
      
      @"AMapPOIExtension::set_rating": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIExtension::set_rating");
          }
      
          // args
          // jsonable arg
          CGFloat rating = [args[@"rating"] floatValue];
      
          // ref
          AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rating = rating;
          methodResult(@"success");
      },
      
      @"AMapPOIExtension::set_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIExtension::set_cost");
          }
      
          // args
          // jsonable arg
          CGFloat cost = [args[@"cost"] floatValue];
      
          // ref
          AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cost = cost;
          methodResult(@"success");
      },
      
      @"AMapPOIExtension::set_openTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOIExtension::set_openTime");
          }
      
          // args
          // jsonable arg
          NSString* openTime = (NSString*) args[@"openTime"];
      
          // ref
          AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.openTime = openTime;
          methodResult(@"success");
      },
      
      @"AMapIndoorData::set_floor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapIndoorData::set_floor");
          }
      
          // args
          // jsonable arg
          NSInteger floor = [args[@"floor"] integerValue];
      
          // ref
          AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.floor = floor;
          methodResult(@"success");
      },
      
      @"AMapIndoorData::set_floorName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapIndoorData::set_floorName");
          }
      
          // args
          // jsonable arg
          NSString* floorName = (NSString*) args[@"floorName"];
      
          // ref
          AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.floorName = floorName;
          methodResult(@"success");
      },
      
      @"AMapIndoorData::set_pid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapIndoorData::set_pid");
          }
      
          // args
          // jsonable arg
          NSString* pid = (NSString*) args[@"pid"];
      
          // ref
          AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pid = pid;
          methodResult(@"success");
      },
      
      @"AMapSubPOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapSubPOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapSubPOI::set_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::set_sname");
          }
      
          // args
          // jsonable arg
          NSString* sname = (NSString*) args[@"sname"];
      
          // ref
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sname = sname;
          methodResult(@"success");
      },
      
      @"AMapSubPOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapSubPOI::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::set_address");
          }
      
          // args
          // jsonable arg
          NSString* address = (NSString*) args[@"address"];
      
          // ref
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.address = address;
          methodResult(@"success");
      },
      
      @"AMapSubPOI::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapSubPOI::set_subtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSubPOI::set_subtype");
          }
      
          // args
          // jsonable arg
          NSString* subtype = (NSString*) args[@"subtype"];
      
          // ref
          AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.subtype = subtype;
          methodResult(@"success");
      },
      
      @"AMapRoutePOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapRoutePOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapRoutePOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapRoutePOI::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapRoutePOI::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoutePOI::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_type");
          }
      
          // args
          // jsonable arg
          NSString* type = (NSString*) args[@"type"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_typecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_typecode");
          }
      
          // args
          // jsonable arg
          NSString* typecode = (NSString*) args[@"typecode"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.typecode = typecode;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_address");
          }
      
          // args
          // jsonable arg
          NSString* address = (NSString*) args[@"address"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.address = address;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_tel");
          }
      
          // args
          // jsonable arg
          NSString* tel = (NSString*) args[@"tel"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tel = tel;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_parkingType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_parkingType");
          }
      
          // args
          // jsonable arg
          NSString* parkingType = (NSString*) args[@"parkingType"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.parkingType = parkingType;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_shopID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_shopID");
          }
      
          // args
          // jsonable arg
          NSString* shopID = (NSString*) args[@"shopID"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.shopID = shopID;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_postcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_postcode");
          }
      
          // args
          // jsonable arg
          NSString* postcode = (NSString*) args[@"postcode"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.postcode = postcode;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_website": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_website");
          }
      
          // args
          // jsonable arg
          NSString* website = (NSString*) args[@"website"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.website = website;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_email": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_email");
          }
      
          // args
          // jsonable arg
          NSString* email = (NSString*) args[@"email"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.email = email;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_province");
          }
      
          // args
          // jsonable arg
          NSString* province = (NSString*) args[@"province"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_pcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_pcode");
          }
      
          // args
          // jsonable arg
          NSString* pcode = (NSString*) args[@"pcode"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pcode = pcode;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_citycode");
          }
      
          // args
          // jsonable arg
          NSString* citycode = (NSString*) args[@"citycode"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_district");
          }
      
          // args
          // jsonable arg
          NSString* district = (NSString*) args[@"district"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.district = district;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_gridcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_gridcode");
          }
      
          // args
          // jsonable arg
          NSString* gridcode = (NSString*) args[@"gridcode"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.gridcode = gridcode;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_enterLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_enterLocation");
          }
      
          // args
          // ref arg
          AMapGeoPoint* enterLocation = (AMapGeoPoint*) HEAP[@([args[@"enterLocation"] integerValue])];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.enterLocation = enterLocation;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_exitLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_exitLocation");
          }
      
          // args
          // ref arg
          AMapGeoPoint* exitLocation = (AMapGeoPoint*) HEAP[@([args[@"exitLocation"] integerValue])];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.exitLocation = exitLocation;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_direction");
          }
      
          // args
          // jsonable arg
          NSString* direction = (NSString*) args[@"direction"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.direction = direction;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_hasIndoorMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_hasIndoorMap");
          }
      
          // args
          // jsonable arg
          BOOL hasIndoorMap = [args[@"hasIndoorMap"] boolValue];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.hasIndoorMap = hasIndoorMap;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_businessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_businessArea");
          }
      
          // args
          // jsonable arg
          NSString* businessArea = (NSString*) args[@"businessArea"];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.businessArea = businessArea;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_indoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_indoorData");
          }
      
          // args
          // ref arg
          AMapIndoorData* indoorData = (AMapIndoorData*) HEAP[@([args[@"indoorData"] integerValue])];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.indoorData = indoorData;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_subPOIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_subPOIs");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* subPOIsRefArray = (NSArray<NSNumber*> *) args[@"subPOIs"];
          NSMutableArray<AMapSubPOI*>* subPOIs = [NSMutableArray arrayWithCapacity:subPOIsRefArray.count];
          for (int i = 0; i < subPOIsRefArray.count; i++) {
              AMapSubPOI* item = (AMapSubPOI*) HEAP[[subPOIsRefArray objectAtIndex:i]];
              [subPOIs addObject:item];
          }
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.subPOIs = subPOIs;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_images": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_images");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* imagesRefArray = (NSArray<NSNumber*> *) args[@"images"];
          NSMutableArray<AMapImage*>* images = [NSMutableArray arrayWithCapacity:imagesRefArray.count];
          for (int i = 0; i < imagesRefArray.count; i++) {
              AMapImage* item = (AMapImage*) HEAP[[imagesRefArray objectAtIndex:i]];
              [images addObject:item];
          }
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.images = images;
          methodResult(@"success");
      },
      
      @"AMapPOI::set_extensionInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPOI::set_extensionInfo");
          }
      
          // args
          // ref arg
          AMapPOIExtension* extensionInfo = (AMapPOIExtension*) HEAP[@([args[@"extensionInfo"] integerValue])];
      
          // ref
          AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.extensionInfo = extensionInfo;
          methodResult(@"success");
      },
      
      @"AMapAOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapAOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapAOI::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapAOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapAOI::set_area": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAOI::set_area");
          }
      
          // args
          // jsonable arg
          CGFloat area = [args[@"area"] floatValue];
      
          // ref
          AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.area = area;
          methodResult(@"success");
      },
      
      @"AMapRoad::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapRoad::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapRoad::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapRoad::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::set_direction");
          }
      
          // args
          // jsonable arg
          NSString* direction = (NSString*) args[@"direction"];
      
          // ref
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.direction = direction;
          methodResult(@"success");
      },
      
      @"AMapRoad::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoad::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapRoadInter::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapRoadInter::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::set_direction");
          }
      
          // args
          // jsonable arg
          NSString* direction = (NSString*) args[@"direction"];
      
          // ref
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.direction = direction;
          methodResult(@"success");
      },
      
      @"AMapRoadInter::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapRoadInter::set_firstId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::set_firstId");
          }
      
          // args
          // jsonable arg
          NSString* firstId = (NSString*) args[@"firstId"];
      
          // ref
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.firstId = firstId;
          methodResult(@"success");
      },
      
      @"AMapRoadInter::set_firstName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::set_firstName");
          }
      
          // args
          // jsonable arg
          NSString* firstName = (NSString*) args[@"firstName"];
      
          // ref
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.firstName = firstName;
          methodResult(@"success");
      },
      
      @"AMapRoadInter::set_secondId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::set_secondId");
          }
      
          // args
          // jsonable arg
          NSString* secondId = (NSString*) args[@"secondId"];
      
          // ref
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.secondId = secondId;
          methodResult(@"success");
      },
      
      @"AMapRoadInter::set_secondName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoadInter::set_secondName");
          }
      
          // args
          // jsonable arg
          NSString* secondName = (NSString*) args[@"secondName"];
      
          // ref
          AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.secondName = secondName;
          methodResult(@"success");
      },
      
      @"AMapStreetNumber::set_street": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::set_street");
          }
      
          // args
          // jsonable arg
          NSString* street = (NSString*) args[@"street"];
      
          // ref
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.street = street;
          methodResult(@"success");
      },
      
      @"AMapStreetNumber::set_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::set_number");
          }
      
          // args
          // jsonable arg
          NSString* number = (NSString*) args[@"number"];
      
          // ref
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.number = number;
          methodResult(@"success");
      },
      
      @"AMapStreetNumber::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapStreetNumber::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapStreetNumber::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStreetNumber::set_direction");
          }
      
          // args
          // jsonable arg
          NSString* direction = (NSString*) args[@"direction"];
      
          // ref
          AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.direction = direction;
          methodResult(@"success");
      },
      
      @"AMapBusinessArea::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusinessArea::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapBusinessArea::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusinessArea::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_country": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_country");
          }
      
          // args
          // jsonable arg
          NSString* country = (NSString*) args[@"country"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.country = country;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_province");
          }
      
          // args
          // jsonable arg
          NSString* province = (NSString*) args[@"province"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_citycode");
          }
      
          // args
          // jsonable arg
          NSString* citycode = (NSString*) args[@"citycode"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_district");
          }
      
          // args
          // jsonable arg
          NSString* district = (NSString*) args[@"district"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.district = district;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_township");
          }
      
          // args
          // jsonable arg
          NSString* township = (NSString*) args[@"township"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.township = township;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_towncode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_towncode");
          }
      
          // args
          // jsonable arg
          NSString* towncode = (NSString*) args[@"towncode"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.towncode = towncode;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_neighborhood");
          }
      
          // args
          // jsonable arg
          NSString* neighborhood = (NSString*) args[@"neighborhood"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.neighborhood = neighborhood;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_building");
          }
      
          // args
          // jsonable arg
          NSString* building = (NSString*) args[@"building"];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.building = building;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_streetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_streetNumber");
          }
      
          // args
          // ref arg
          AMapStreetNumber* streetNumber = (AMapStreetNumber*) HEAP[@([args[@"streetNumber"] integerValue])];
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.streetNumber = streetNumber;
          methodResult(@"success");
      },
      
      @"AMapAddressComponent::set_businessAreas": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapAddressComponent::set_businessAreas");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* businessAreasRefArray = (NSArray<NSNumber*> *) args[@"businessAreas"];
          NSMutableArray<AMapBusinessArea*>* businessAreas = [NSMutableArray arrayWithCapacity:businessAreasRefArray.count];
          for (int i = 0; i < businessAreasRefArray.count; i++) {
              AMapBusinessArea* item = (AMapBusinessArea*) HEAP[[businessAreasRefArray objectAtIndex:i]];
              [businessAreas addObject:item];
          }
      
          // ref
          AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.businessAreas = businessAreas;
          methodResult(@"success");
      },
      
      @"AMapReGeocode::set_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::set_formattedAddress");
          }
      
          // args
          // jsonable arg
          NSString* formattedAddress = (NSString*) args[@"formattedAddress"];
      
          // ref
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.formattedAddress = formattedAddress;
          methodResult(@"success");
      },
      
      @"AMapReGeocode::set_addressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::set_addressComponent");
          }
      
          // args
          // ref arg
          AMapAddressComponent* addressComponent = (AMapAddressComponent*) HEAP[@([args[@"addressComponent"] integerValue])];
      
          // ref
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.addressComponent = addressComponent;
          methodResult(@"success");
      },
      
      @"AMapReGeocode::set_roads": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::set_roads");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* roadsRefArray = (NSArray<NSNumber*> *) args[@"roads"];
          NSMutableArray<AMapRoad*>* roads = [NSMutableArray arrayWithCapacity:roadsRefArray.count];
          for (int i = 0; i < roadsRefArray.count; i++) {
              AMapRoad* item = (AMapRoad*) HEAP[[roadsRefArray objectAtIndex:i]];
              [roads addObject:item];
          }
      
          // ref
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.roads = roads;
          methodResult(@"success");
      },
      
      @"AMapReGeocode::set_roadinters": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::set_roadinters");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* roadintersRefArray = (NSArray<NSNumber*> *) args[@"roadinters"];
          NSMutableArray<AMapRoadInter*>* roadinters = [NSMutableArray arrayWithCapacity:roadintersRefArray.count];
          for (int i = 0; i < roadintersRefArray.count; i++) {
              AMapRoadInter* item = (AMapRoadInter*) HEAP[[roadintersRefArray objectAtIndex:i]];
              [roadinters addObject:item];
          }
      
          // ref
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.roadinters = roadinters;
          methodResult(@"success");
      },
      
      @"AMapReGeocode::set_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::set_pois");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
          NSMutableArray<AMapPOI*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
          for (int i = 0; i < poisRefArray.count; i++) {
              AMapPOI* item = (AMapPOI*) HEAP[[poisRefArray objectAtIndex:i]];
              [pois addObject:item];
          }
      
          // ref
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pois = pois;
          methodResult(@"success");
      },
      
      @"AMapReGeocode::set_aois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapReGeocode::set_aois");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* aoisRefArray = (NSArray<NSNumber*> *) args[@"aois"];
          NSMutableArray<AMapAOI*>* aois = [NSMutableArray arrayWithCapacity:aoisRefArray.count];
          for (int i = 0; i < aoisRefArray.count; i++) {
              AMapAOI* item = (AMapAOI*) HEAP[[aoisRefArray objectAtIndex:i]];
              [aois addObject:item];
          }
      
          // ref
          AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.aois = aois;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_formattedAddress");
          }
      
          // args
          // jsonable arg
          NSString* formattedAddress = (NSString*) args[@"formattedAddress"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.formattedAddress = formattedAddress;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_province");
          }
      
          // args
          // jsonable arg
          NSString* province = (NSString*) args[@"province"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_citycode");
          }
      
          // args
          // jsonable arg
          NSString* citycode = (NSString*) args[@"citycode"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_district");
          }
      
          // args
          // jsonable arg
          NSString* district = (NSString*) args[@"district"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.district = district;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_township");
          }
      
          // args
          // jsonable arg
          NSString* township = (NSString*) args[@"township"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.township = township;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_neighborhood");
          }
      
          // args
          // jsonable arg
          NSString* neighborhood = (NSString*) args[@"neighborhood"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.neighborhood = neighborhood;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_building");
          }
      
          // args
          // jsonable arg
          NSString* building = (NSString*) args[@"building"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.building = building;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapGeocode::set_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeocode::set_level");
          }
      
          // args
          // jsonable arg
          NSString* level = (NSString*) args[@"level"];
      
          // ref
          AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.level = level;
          methodResult(@"success");
      },
      
      @"AMapBusStop::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapBusStop::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapBusStop::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapBusStop::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::set_citycode");
          }
      
          // args
          // jsonable arg
          NSString* citycode = (NSString*) args[@"citycode"];
      
          // ref
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapBusStop::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapBusStop::set_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::set_buslines");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* buslinesRefArray = (NSArray<NSNumber*> *) args[@"buslines"];
          NSMutableArray<AMapBusLine*>* buslines = [NSMutableArray arrayWithCapacity:buslinesRefArray.count];
          for (int i = 0; i < buslinesRefArray.count; i++) {
              AMapBusLine* item = (AMapBusLine*) HEAP[[buslinesRefArray objectAtIndex:i]];
              [buslines addObject:item];
          }
      
          // ref
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.buslines = buslines;
          methodResult(@"success");
      },
      
      @"AMapBusStop::set_sequence": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusStop::set_sequence");
          }
      
          // args
          // jsonable arg
          NSString* sequence = (NSString*) args[@"sequence"];
      
          // ref
          AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sequence = sequence;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_type");
          }
      
          // args
          // jsonable arg
          NSString* type = (NSString*) args[@"type"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_polyline");
          }
      
          // args
          // jsonable arg
          NSString* polyline = (NSString*) args[@"polyline"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polyline = polyline;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_citycode");
          }
      
          // args
          // jsonable arg
          NSString* citycode = (NSString*) args[@"citycode"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_startStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_startStop");
          }
      
          // args
          // jsonable arg
          NSString* startStop = (NSString*) args[@"startStop"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.startStop = startStop;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_endStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_endStop");
          }
      
          // args
          // jsonable arg
          NSString* endStop = (NSString*) args[@"endStop"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.endStop = endStop;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_startTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_startTime");
          }
      
          // args
          // jsonable arg
          NSString* startTime = (NSString*) args[@"startTime"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.startTime = startTime;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_endTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_endTime");
          }
      
          // args
          // jsonable arg
          NSString* endTime = (NSString*) args[@"endTime"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.endTime = endTime;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_company": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_company");
          }
      
          // args
          // jsonable arg
          NSString* company = (NSString*) args[@"company"];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.company = company;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_distance");
          }
      
          // args
          // jsonable arg
          CGFloat distance = [args[@"distance"] floatValue];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_basicPrice": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_basicPrice");
          }
      
          // args
          // jsonable arg
          CGFloat basicPrice = [args[@"basicPrice"] floatValue];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.basicPrice = basicPrice;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_totalPrice": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_totalPrice");
          }
      
          // args
          // jsonable arg
          CGFloat totalPrice = [args[@"totalPrice"] floatValue];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.totalPrice = totalPrice;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_bounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_bounds");
          }
      
          // args
          // ref arg
          AMapGeoPolygon* bounds = (AMapGeoPolygon*) HEAP[@([args[@"bounds"] integerValue])];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.bounds = bounds;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_busStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_busStops");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* busStopsRefArray = (NSArray<NSNumber*> *) args[@"busStops"];
          NSMutableArray<AMapBusStop*>* busStops = [NSMutableArray arrayWithCapacity:busStopsRefArray.count];
          for (int i = 0; i < busStopsRefArray.count; i++) {
              AMapBusStop* item = (AMapBusStop*) HEAP[[busStopsRefArray objectAtIndex:i]];
              [busStops addObject:item];
          }
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.busStops = busStops;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_departureStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_departureStop");
          }
      
          // args
          // ref arg
          AMapBusStop* departureStop = (AMapBusStop*) HEAP[@([args[@"departureStop"] integerValue])];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.departureStop = departureStop;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_arrivalStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_arrivalStop");
          }
      
          // args
          // ref arg
          AMapBusStop* arrivalStop = (AMapBusStop*) HEAP[@([args[@"arrivalStop"] integerValue])];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.arrivalStop = arrivalStop;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_viaBusStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_viaBusStops");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* viaBusStopsRefArray = (NSArray<NSNumber*> *) args[@"viaBusStops"];
          NSMutableArray<AMapBusStop*>* viaBusStops = [NSMutableArray arrayWithCapacity:viaBusStopsRefArray.count];
          for (int i = 0; i < viaBusStopsRefArray.count; i++) {
              AMapBusStop* item = (AMapBusStop*) HEAP[[viaBusStopsRefArray objectAtIndex:i]];
              [viaBusStops addObject:item];
          }
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.viaBusStops = viaBusStops;
          methodResult(@"success");
      },
      
      @"AMapBusLine::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapBusLine::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapDistrict::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapDistrict::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::set_citycode");
          }
      
          // args
          // jsonable arg
          NSString* citycode = (NSString*) args[@"citycode"];
      
          // ref
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapDistrict::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapDistrict::set_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::set_level");
          }
      
          // args
          // jsonable arg
          NSString* level = (NSString*) args[@"level"];
      
          // ref
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.level = level;
          methodResult(@"success");
      },
      
      @"AMapDistrict::set_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::set_center");
          }
      
          // args
          // ref arg
          AMapGeoPoint* center = (AMapGeoPoint*) HEAP[@([args[@"center"] integerValue])];
      
          // ref
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.center = center;
          methodResult(@"success");
      },
      
      @"AMapDistrict::set_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::set_districts");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* districtsRefArray = (NSArray<NSNumber*> *) args[@"districts"];
          NSMutableArray<AMapDistrict*>* districts = [NSMutableArray arrayWithCapacity:districtsRefArray.count];
          for (int i = 0; i < districtsRefArray.count; i++) {
              AMapDistrict* item = (AMapDistrict*) HEAP[[districtsRefArray objectAtIndex:i]];
              [districts addObject:item];
          }
      
          // ref
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.districts = districts;
          methodResult(@"success");
      },
      
      @"AMapDistrict::set_polylines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistrict::set_polylines");
          }
      
          // args
          // jsonable arg
          NSString* polylines = (NSString*) args[@"polylines"];
      
          // ref
          AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polylines = polylines;
          methodResult(@"success");
      },
      
      @"AMapTMC::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTMC::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapTMC::set_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTMC::set_status");
          }
      
          // args
          // jsonable arg
          NSString* status = (NSString*) args[@"status"];
      
          // ref
          AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.status = status;
          methodResult(@"success");
      },
      
      @"AMapTMC::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTMC::set_polyline");
          }
      
          // args
          // jsonable arg
          NSString* polyline = (NSString*) args[@"polyline"];
      
          // ref
          AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polyline = polyline;
          methodResult(@"success");
      },
      
      @"AMapStep::set_instruction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_instruction");
          }
      
          // args
          // jsonable arg
          NSString* instruction = (NSString*) args[@"instruction"];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.instruction = instruction;
          methodResult(@"success");
      },
      
      @"AMapStep::set_orientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_orientation");
          }
      
          // args
          // jsonable arg
          NSString* orientation = (NSString*) args[@"orientation"];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.orientation = orientation;
          methodResult(@"success");
      },
      
      @"AMapStep::set_road": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_road");
          }
      
          // args
          // jsonable arg
          NSString* road = (NSString*) args[@"road"];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.road = road;
          methodResult(@"success");
      },
      
      @"AMapStep::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapStep::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapStep::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_polyline");
          }
      
          // args
          // jsonable arg
          NSString* polyline = (NSString*) args[@"polyline"];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polyline = polyline;
          methodResult(@"success");
      },
      
      @"AMapStep::set_action": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_action");
          }
      
          // args
          // jsonable arg
          NSString* action = (NSString*) args[@"action"];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.action = action;
          methodResult(@"success");
      },
      
      @"AMapStep::set_assistantAction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_assistantAction");
          }
      
          // args
          // jsonable arg
          NSString* assistantAction = (NSString*) args[@"assistantAction"];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.assistantAction = assistantAction;
          methodResult(@"success");
      },
      
      @"AMapStep::set_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_tolls");
          }
      
          // args
          // jsonable arg
          CGFloat tolls = [args[@"tolls"] floatValue];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tolls = tolls;
          methodResult(@"success");
      },
      
      @"AMapStep::set_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_tollDistance");
          }
      
          // args
          // jsonable arg
          NSInteger tollDistance = [args[@"tollDistance"] integerValue];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tollDistance = tollDistance;
          methodResult(@"success");
      },
      
      @"AMapStep::set_tollRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_tollRoad");
          }
      
          // args
          // jsonable arg
          NSString* tollRoad = (NSString*) args[@"tollRoad"];
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tollRoad = tollRoad;
          methodResult(@"success");
      },
      
      @"AMapStep::set_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_cities");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* citiesRefArray = (NSArray<NSNumber*> *) args[@"cities"];
          NSMutableArray<AMapCity*>* cities = [NSMutableArray arrayWithCapacity:citiesRefArray.count];
          for (int i = 0; i < citiesRefArray.count; i++) {
              AMapCity* item = (AMapCity*) HEAP[[citiesRefArray objectAtIndex:i]];
              [cities addObject:item];
          }
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cities = cities;
          methodResult(@"success");
      },
      
      @"AMapStep::set_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapStep::set_tmcs");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* tmcsRefArray = (NSArray<NSNumber*> *) args[@"tmcs"];
          NSMutableArray<AMapTMC*>* tmcs = [NSMutableArray arrayWithCapacity:tmcsRefArray.count];
          for (int i = 0; i < tmcsRefArray.count; i++) {
              AMapTMC* item = (AMapTMC*) HEAP[[tmcsRefArray objectAtIndex:i]];
              [tmcs addObject:item];
          }
      
          // ref
          AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tmcs = tmcs;
          methodResult(@"success");
      },
      
      @"AMapPath::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapPath::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapPath::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::set_strategy");
          }
      
          // args
          // jsonable arg
          NSString* strategy = (NSString*) args[@"strategy"];
      
          // ref
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strategy = strategy;
          methodResult(@"success");
      },
      
      @"AMapPath::set_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::set_steps");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* stepsRefArray = (NSArray<NSNumber*> *) args[@"steps"];
          NSMutableArray<AMapStep*>* steps = [NSMutableArray arrayWithCapacity:stepsRefArray.count];
          for (int i = 0; i < stepsRefArray.count; i++) {
              AMapStep* item = (AMapStep*) HEAP[[stepsRefArray objectAtIndex:i]];
              [steps addObject:item];
          }
      
          // ref
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.steps = steps;
          methodResult(@"success");
      },
      
      @"AMapPath::set_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::set_tolls");
          }
      
          // args
          // jsonable arg
          CGFloat tolls = [args[@"tolls"] floatValue];
      
          // ref
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tolls = tolls;
          methodResult(@"success");
      },
      
      @"AMapPath::set_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::set_tollDistance");
          }
      
          // args
          // jsonable arg
          NSInteger tollDistance = [args[@"tollDistance"] integerValue];
      
          // ref
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tollDistance = tollDistance;
          methodResult(@"success");
      },
      
      @"AMapPath::set_totalTrafficLights": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::set_totalTrafficLights");
          }
      
          // args
          // jsonable arg
          NSInteger totalTrafficLights = [args[@"totalTrafficLights"] integerValue];
      
          // ref
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.totalTrafficLights = totalTrafficLights;
          methodResult(@"success");
      },
      
      @"AMapPath::set_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapPath::set_restriction");
          }
      
          // args
          // jsonable arg
          NSInteger restriction = [args[@"restriction"] integerValue];
      
          // ref
          AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.restriction = restriction;
          methodResult(@"success");
      },
      
      @"AMapFutureTimeInfoElement::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfoElement::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapFutureTimeInfoElement::set_pathindex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfoElement::set_pathindex");
          }
      
          // args
          // jsonable arg
          NSInteger pathindex = [args[@"pathindex"] integerValue];
      
          // ref
          AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pathindex = pathindex;
          methodResult(@"success");
      },
      
      @"AMapFutureTimeInfoElement::set_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfoElement::set_restriction");
          }
      
          // args
          // jsonable arg
          NSInteger restriction = [args[@"restriction"] integerValue];
      
          // ref
          AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.restriction = restriction;
          methodResult(@"success");
      },
      
      @"AMapFutureTimeInfoElement::set_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfoElement::set_tmcs");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* tmcsRefArray = (NSArray<NSNumber*> *) args[@"tmcs"];
          NSMutableArray<AMapTMC*>* tmcs = [NSMutableArray arrayWithCapacity:tmcsRefArray.count];
          for (int i = 0; i < tmcsRefArray.count; i++) {
              AMapTMC* item = (AMapTMC*) HEAP[[tmcsRefArray objectAtIndex:i]];
              [tmcs addObject:item];
          }
      
          // ref
          AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tmcs = tmcs;
          methodResult(@"success");
      },
      
      @"AMapFutureTimeInfo::set_startTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfo::set_startTime");
          }
      
          // args
          // jsonable arg
          NSString* startTime = (NSString*) args[@"startTime"];
      
          // ref
          AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.startTime = startTime;
          methodResult(@"success");
      },
      
      @"AMapFutureTimeInfo::set_elements": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapFutureTimeInfo::set_elements");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* elementsRefArray = (NSArray<NSNumber*> *) args[@"elements"];
          NSMutableArray<AMapFutureTimeInfoElement*>* elements = [NSMutableArray arrayWithCapacity:elementsRefArray.count];
          for (int i = 0; i < elementsRefArray.count; i++) {
              AMapFutureTimeInfoElement* item = (AMapFutureTimeInfoElement*) HEAP[[elementsRefArray objectAtIndex:i]];
              [elements addObject:item];
          }
      
          // ref
          AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.elements = elements;
          methodResult(@"success");
      },
      
      @"AMapWalking::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::set_origin");
          }
      
          // args
          // ref arg
          AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
      
          // ref
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origin = origin;
          methodResult(@"success");
      },
      
      @"AMapWalking::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::set_destination");
          }
      
          // args
          // ref arg
          AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
      
          // ref
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destination = destination;
          methodResult(@"success");
      },
      
      @"AMapWalking::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapWalking::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapWalking::set_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapWalking::set_steps");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* stepsRefArray = (NSArray<NSNumber*> *) args[@"steps"];
          NSMutableArray<AMapStep*>* steps = [NSMutableArray arrayWithCapacity:stepsRefArray.count];
          for (int i = 0; i < stepsRefArray.count; i++) {
              AMapStep* item = (AMapStep*) HEAP[[stepsRefArray objectAtIndex:i]];
              [steps addObject:item];
          }
      
          // ref
          AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.steps = steps;
          methodResult(@"success");
      },
      
      @"AMapTaxi::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::set_origin");
          }
      
          // args
          // ref arg
          AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
      
          // ref
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origin = origin;
          methodResult(@"success");
      },
      
      @"AMapTaxi::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::set_destination");
          }
      
          // args
          // ref arg
          AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
      
          // ref
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destination = destination;
          methodResult(@"success");
      },
      
      @"AMapTaxi::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapTaxi::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapTaxi::set_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::set_sname");
          }
      
          // args
          // jsonable arg
          NSString* sname = (NSString*) args[@"sname"];
      
          // ref
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sname = sname;
          methodResult(@"success");
      },
      
      @"AMapTaxi::set_tname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTaxi::set_tname");
          }
      
          // args
          // jsonable arg
          NSString* tname = (NSString*) args[@"tname"];
      
          // ref
          AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tname = tname;
          methodResult(@"success");
      },
      
      @"AMapRailwayStation::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapRailwayStation::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapRailwayStation::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapRailwayStation::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapRailwayStation::set_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::set_time");
          }
      
          // args
          // jsonable arg
          NSString* time = (NSString*) args[@"time"];
      
          // ref
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.time = time;
          methodResult(@"success");
      },
      
      @"AMapRailwayStation::set_wait": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::set_wait");
          }
      
          // args
          // jsonable arg
          NSInteger wait = [args[@"wait"] integerValue];
      
          // ref
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.wait = wait;
          methodResult(@"success");
      },
      
      @"AMapRailwayStation::set_isStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::set_isStart");
          }
      
          // args
          // jsonable arg
          BOOL isStart = [args[@"isStart"] boolValue];
      
          // ref
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.isStart = isStart;
          methodResult(@"success");
      },
      
      @"AMapRailwayStation::set_isEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwayStation::set_isEnd");
          }
      
          // args
          // jsonable arg
          BOOL isEnd = [args[@"isEnd"] boolValue];
      
          // ref
          AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.isEnd = isEnd;
          methodResult(@"success");
      },
      
      @"AMapRailwaySpace::set_code": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwaySpace::set_code");
          }
      
          // args
          // jsonable arg
          NSString* code = (NSString*) args[@"code"];
      
          // ref
          AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.code = code;
          methodResult(@"success");
      },
      
      @"AMapRailwaySpace::set_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailwaySpace::set_cost");
          }
      
          // args
          // jsonable arg
          CGFloat cost = [args[@"cost"] floatValue];
      
          // ref
          AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cost = cost;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_trip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_trip");
          }
      
          // args
          // jsonable arg
          NSString* trip = (NSString*) args[@"trip"];
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.trip = trip;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_type");
          }
      
          // args
          // jsonable arg
          NSString* type = (NSString*) args[@"type"];
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_time");
          }
      
          // args
          // jsonable arg
          NSInteger time = [args[@"time"] integerValue];
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.time = time;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_departureStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_departureStation");
          }
      
          // args
          // ref arg
          AMapRailwayStation* departureStation = (AMapRailwayStation*) HEAP[@([args[@"departureStation"] integerValue])];
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.departureStation = departureStation;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_arrivalStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_arrivalStation");
          }
      
          // args
          // ref arg
          AMapRailwayStation* arrivalStation = (AMapRailwayStation*) HEAP[@([args[@"arrivalStation"] integerValue])];
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.arrivalStation = arrivalStation;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_spaces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_spaces");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* spacesRefArray = (NSArray<NSNumber*> *) args[@"spaces"];
          NSMutableArray<AMapRailwaySpace*>* spaces = [NSMutableArray arrayWithCapacity:spacesRefArray.count];
          for (int i = 0; i < spacesRefArray.count; i++) {
              AMapRailwaySpace* item = (AMapRailwaySpace*) HEAP[[spacesRefArray objectAtIndex:i]];
              [spaces addObject:item];
          }
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.spaces = spaces;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_viaStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_viaStops");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* viaStopsRefArray = (NSArray<NSNumber*> *) args[@"viaStops"];
          NSMutableArray<AMapRailwayStation*>* viaStops = [NSMutableArray arrayWithCapacity:viaStopsRefArray.count];
          for (int i = 0; i < viaStopsRefArray.count; i++) {
              AMapRailwayStation* item = (AMapRailwayStation*) HEAP[[viaStopsRefArray objectAtIndex:i]];
              [viaStops addObject:item];
          }
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.viaStops = viaStops;
          methodResult(@"success");
      },
      
      @"AMapRailway::set_alters": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRailway::set_alters");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* altersRefArray = (NSArray<NSNumber*> *) args[@"alters"];
          NSMutableArray<AMapRailway*>* alters = [NSMutableArray arrayWithCapacity:altersRefArray.count];
          for (int i = 0; i < altersRefArray.count; i++) {
              AMapRailway* item = (AMapRailway*) HEAP[[altersRefArray objectAtIndex:i]];
              [alters addObject:item];
          }
      
          // ref
          AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.alters = alters;
          methodResult(@"success");
      },
      
      @"AMapSegment::set_walking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::set_walking");
          }
      
          // args
          // ref arg
          AMapWalking* walking = (AMapWalking*) HEAP[@([args[@"walking"] integerValue])];
      
          // ref
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.walking = walking;
          methodResult(@"success");
      },
      
      @"AMapSegment::set_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::set_buslines");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* buslinesRefArray = (NSArray<NSNumber*> *) args[@"buslines"];
          NSMutableArray<AMapBusLine*>* buslines = [NSMutableArray arrayWithCapacity:buslinesRefArray.count];
          for (int i = 0; i < buslinesRefArray.count; i++) {
              AMapBusLine* item = (AMapBusLine*) HEAP[[buslinesRefArray objectAtIndex:i]];
              [buslines addObject:item];
          }
      
          // ref
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.buslines = buslines;
          methodResult(@"success");
      },
      
      @"AMapSegment::set_taxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::set_taxi");
          }
      
          // args
          // ref arg
          AMapTaxi* taxi = (AMapTaxi*) HEAP[@([args[@"taxi"] integerValue])];
      
          // ref
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.taxi = taxi;
          methodResult(@"success");
      },
      
      @"AMapSegment::set_railway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::set_railway");
          }
      
          // args
          // ref arg
          AMapRailway* railway = (AMapRailway*) HEAP[@([args[@"railway"] integerValue])];
      
          // ref
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.railway = railway;
          methodResult(@"success");
      },
      
      @"AMapSegment::set_enterName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::set_enterName");
          }
      
          // args
          // jsonable arg
          NSString* enterName = (NSString*) args[@"enterName"];
      
          // ref
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.enterName = enterName;
          methodResult(@"success");
      },
      
      @"AMapSegment::set_enterLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::set_enterLocation");
          }
      
          // args
          // ref arg
          AMapGeoPoint* enterLocation = (AMapGeoPoint*) HEAP[@([args[@"enterLocation"] integerValue])];
      
          // ref
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.enterLocation = enterLocation;
          methodResult(@"success");
      },
      
      @"AMapSegment::set_exitName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::set_exitName");
          }
      
          // args
          // jsonable arg
          NSString* exitName = (NSString*) args[@"exitName"];
      
          // ref
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.exitName = exitName;
          methodResult(@"success");
      },
      
      @"AMapSegment::set_exitLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSegment::set_exitLocation");
          }
      
          // args
          // ref arg
          AMapGeoPoint* exitLocation = (AMapGeoPoint*) HEAP[@([args[@"exitLocation"] integerValue])];
      
          // ref
          AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.exitLocation = exitLocation;
          methodResult(@"success");
      },
      
      @"AMapTransit::set_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::set_cost");
          }
      
          // args
          // jsonable arg
          CGFloat cost = [args[@"cost"] floatValue];
      
          // ref
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cost = cost;
          methodResult(@"success");
      },
      
      @"AMapTransit::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapTransit::set_nightflag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::set_nightflag");
          }
      
          // args
          // jsonable arg
          BOOL nightflag = [args[@"nightflag"] boolValue];
      
          // ref
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.nightflag = nightflag;
          methodResult(@"success");
      },
      
      @"AMapTransit::set_walkingDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::set_walkingDistance");
          }
      
          // args
          // jsonable arg
          NSInteger walkingDistance = [args[@"walkingDistance"] integerValue];
      
          // ref
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.walkingDistance = walkingDistance;
          methodResult(@"success");
      },
      
      @"AMapTransit::set_segments": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::set_segments");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* segmentsRefArray = (NSArray<NSNumber*> *) args[@"segments"];
          NSMutableArray<AMapSegment*>* segments = [NSMutableArray arrayWithCapacity:segmentsRefArray.count];
          for (int i = 0; i < segmentsRefArray.count; i++) {
              AMapSegment* item = (AMapSegment*) HEAP[[segmentsRefArray objectAtIndex:i]];
              [segments addObject:item];
          }
      
          // ref
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.segments = segments;
          methodResult(@"success");
      },
      
      @"AMapTransit::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTransit::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapRoute::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::set_origin");
          }
      
          // args
          // ref arg
          AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[@([args[@"origin"] integerValue])];
      
          // ref
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.origin = origin;
          methodResult(@"success");
      },
      
      @"AMapRoute::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::set_destination");
          }
      
          // args
          // ref arg
          AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[@([args[@"destination"] integerValue])];
      
          // ref
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destination = destination;
          methodResult(@"success");
      },
      
      @"AMapRoute::set_taxiCost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::set_taxiCost");
          }
      
          // args
          // jsonable arg
          CGFloat taxiCost = [args[@"taxiCost"] floatValue];
      
          // ref
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.taxiCost = taxiCost;
          methodResult(@"success");
      },
      
      @"AMapRoute::set_paths": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::set_paths");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* pathsRefArray = (NSArray<NSNumber*> *) args[@"paths"];
          NSMutableArray<AMapPath*>* paths = [NSMutableArray arrayWithCapacity:pathsRefArray.count];
          for (int i = 0; i < pathsRefArray.count; i++) {
              AMapPath* item = (AMapPath*) HEAP[[pathsRefArray objectAtIndex:i]];
              [paths addObject:item];
          }
      
          // ref
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.paths = paths;
          methodResult(@"success");
      },
      
      @"AMapRoute::set_transits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapRoute::set_transits");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* transitsRefArray = (NSArray<NSNumber*> *) args[@"transits"];
          NSMutableArray<AMapTransit*>* transits = [NSMutableArray arrayWithCapacity:transitsRefArray.count];
          for (int i = 0; i < transitsRefArray.count; i++) {
              AMapTransit* item = (AMapTransit*) HEAP[[transitsRefArray objectAtIndex:i]];
              [transits addObject:item];
          }
      
          // ref
          AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.transits = transits;
          methodResult(@"success");
      },
      
      @"AMapDistanceResult::set_originID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::set_originID");
          }
      
          // args
          // jsonable arg
          NSInteger originID = [args[@"originID"] integerValue];
      
          // ref
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.originID = originID;
          methodResult(@"success");
      },
      
      @"AMapDistanceResult::set_destID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::set_destID");
          }
      
          // args
          // jsonable arg
          NSInteger destID = [args[@"destID"] integerValue];
      
          // ref
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.destID = destID;
          methodResult(@"success");
      },
      
      @"AMapDistanceResult::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapDistanceResult::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::set_duration");
          }
      
          // args
          // jsonable arg
          NSInteger duration = [args[@"duration"] integerValue];
      
          // ref
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"AMapDistanceResult::set_info": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::set_info");
          }
      
          // args
          // jsonable arg
          NSString* info = (NSString*) args[@"info"];
      
          // ref
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.info = info;
          methodResult(@"success");
      },
      
      @"AMapDistanceResult::set_code": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapDistanceResult::set_code");
          }
      
          // args
          // jsonable arg
          NSInteger code = [args[@"code"] integerValue];
      
          // ref
          AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.code = code;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_province");
          }
      
          // args
          // jsonable arg
          NSString* province = (NSString*) args[@"province"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_weather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_weather");
          }
      
          // args
          // jsonable arg
          NSString* weather = (NSString*) args[@"weather"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.weather = weather;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_temperature": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_temperature");
          }
      
          // args
          // jsonable arg
          NSString* temperature = (NSString*) args[@"temperature"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.temperature = temperature;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_windDirection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_windDirection");
          }
      
          // args
          // jsonable arg
          NSString* windDirection = (NSString*) args[@"windDirection"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.windDirection = windDirection;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_windPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_windPower");
          }
      
          // args
          // jsonable arg
          NSString* windPower = (NSString*) args[@"windPower"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.windPower = windPower;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_humidity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_humidity");
          }
      
          // args
          // jsonable arg
          NSString* humidity = (NSString*) args[@"humidity"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.humidity = humidity;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherLive::set_reportTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherLive::set_reportTime");
          }
      
          // args
          // jsonable arg
          NSString* reportTime = (NSString*) args[@"reportTime"];
      
          // ref
          AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.reportTime = reportTime;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_date": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_date");
          }
      
          // args
          // jsonable arg
          NSString* date = (NSString*) args[@"date"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.date = date;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_week": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_week");
          }
      
          // args
          // jsonable arg
          NSString* week = (NSString*) args[@"week"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.week = week;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_dayWeather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_dayWeather");
          }
      
          // args
          // jsonable arg
          NSString* dayWeather = (NSString*) args[@"dayWeather"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.dayWeather = dayWeather;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_nightWeather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_nightWeather");
          }
      
          // args
          // jsonable arg
          NSString* nightWeather = (NSString*) args[@"nightWeather"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.nightWeather = nightWeather;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_dayTemp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_dayTemp");
          }
      
          // args
          // jsonable arg
          NSString* dayTemp = (NSString*) args[@"dayTemp"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.dayTemp = dayTemp;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_nightTemp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_nightTemp");
          }
      
          // args
          // jsonable arg
          NSString* nightTemp = (NSString*) args[@"nightTemp"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.nightTemp = nightTemp;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_dayWind": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_dayWind");
          }
      
          // args
          // jsonable arg
          NSString* dayWind = (NSString*) args[@"dayWind"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.dayWind = dayWind;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_nightWind": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_nightWind");
          }
      
          // args
          // jsonable arg
          NSString* nightWind = (NSString*) args[@"nightWind"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.nightWind = nightWind;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_dayPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_dayPower");
          }
      
          // args
          // jsonable arg
          NSString* dayPower = (NSString*) args[@"dayPower"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.dayPower = dayPower;
          methodResult(@"success");
      },
      
      @"AMapLocalDayWeatherForecast::set_nightPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalDayWeatherForecast::set_nightPower");
          }
      
          // args
          // jsonable arg
          NSString* nightPower = (NSString*) args[@"nightPower"];
      
          // ref
          AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.nightPower = nightPower;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherForecast::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherForecast::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::set_province");
          }
      
          // args
          // jsonable arg
          NSString* province = (NSString*) args[@"province"];
      
          // ref
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherForecast::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherForecast::set_reportTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::set_reportTime");
          }
      
          // args
          // jsonable arg
          NSString* reportTime = (NSString*) args[@"reportTime"];
      
          // ref
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.reportTime = reportTime;
          methodResult(@"success");
      },
      
      @"AMapLocalWeatherForecast::set_casts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocalWeatherForecast::set_casts");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* castsRefArray = (NSArray<NSNumber*> *) args[@"casts"];
          NSMutableArray<AMapLocalDayWeatherForecast*>* casts = [NSMutableArray arrayWithCapacity:castsRefArray.count];
          for (int i = 0; i < castsRefArray.count; i++) {
              AMapLocalDayWeatherForecast* item = (AMapLocalDayWeatherForecast*) HEAP[[castsRefArray objectAtIndex:i]];
              [casts addObject:item];
          }
      
          // ref
          AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.casts = casts;
          methodResult(@"success");
      },
      
      @"AMapNearbyUserInfo::set_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUserInfo::set_userID");
          }
      
          // args
          // jsonable arg
          NSString* userID = (NSString*) args[@"userID"];
      
          // ref
          AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.userID = userID;
          methodResult(@"success");
      },
      
      @"AMapNearbyUserInfo::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUserInfo::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapNearbyUserInfo::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUserInfo::set_distance");
          }
      
          // args
          // jsonable arg
          CGFloat distance = [args[@"distance"] floatValue];
      
          // ref
          AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapNearbyUserInfo::set_updatetime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUserInfo::set_updatetime");
          }
      
          // args
          // jsonable arg
          NSTimeInterval updatetime = [args[@"updatetime"] doubleValue];
      
          // ref
          AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.updatetime = updatetime;
          methodResult(@"success");
      },
      
      @"AMapTrafficEvaluation::set_evaluationDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::set_evaluationDescription");
          }
      
          // args
          // jsonable arg
          NSString* evaluationDescription = (NSString*) args[@"evaluationDescription"];
      
          // ref
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.evaluationDescription = evaluationDescription;
          methodResult(@"success");
      },
      
      @"AMapTrafficEvaluation::set_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::set_status");
          }
      
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.status = status;
          methodResult(@"success");
      },
      
      @"AMapTrafficEvaluation::set_expedite": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::set_expedite");
          }
      
          // args
          // jsonable arg
          NSString* expedite = (NSString*) args[@"expedite"];
      
          // ref
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.expedite = expedite;
          methodResult(@"success");
      },
      
      @"AMapTrafficEvaluation::set_congested": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::set_congested");
          }
      
          // args
          // jsonable arg
          NSString* congested = (NSString*) args[@"congested"];
      
          // ref
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.congested = congested;
          methodResult(@"success");
      },
      
      @"AMapTrafficEvaluation::set_blocked": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::set_blocked");
          }
      
          // args
          // jsonable arg
          NSString* blocked = (NSString*) args[@"blocked"];
      
          // ref
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.blocked = blocked;
          methodResult(@"success");
      },
      
      @"AMapTrafficEvaluation::set_unknown": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficEvaluation::set_unknown");
          }
      
          // args
          // jsonable arg
          NSString* unknown = (NSString*) args[@"unknown"];
      
          // ref
          AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.unknown = unknown;
          methodResult(@"success");
      },
      
      @"AMapTrafficRoad::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapTrafficRoad::set_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::set_status");
          }
      
          // args
          // jsonable arg
          NSInteger status = [args[@"status"] integerValue];
      
          // ref
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.status = status;
          methodResult(@"success");
      },
      
      @"AMapTrafficRoad::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::set_direction");
          }
      
          // args
          // jsonable arg
          NSString* direction = (NSString*) args[@"direction"];
      
          // ref
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.direction = direction;
          methodResult(@"success");
      },
      
      @"AMapTrafficRoad::set_angle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::set_angle");
          }
      
          // args
          // jsonable arg
          float angle = [args[@"angle"] floatValue];
      
          // ref
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.angle = angle;
          methodResult(@"success");
      },
      
      @"AMapTrafficRoad::set_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::set_speed");
          }
      
          // args
          // jsonable arg
          float speed = [args[@"speed"] floatValue];
      
          // ref
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.speed = speed;
          methodResult(@"success");
      },
      
      @"AMapTrafficRoad::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficRoad::set_polyline");
          }
      
          // args
          // jsonable arg
          NSString* polyline = (NSString*) args[@"polyline"];
      
          // ref
          AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.polyline = polyline;
          methodResult(@"success");
      },
      
      @"AMapTrafficInfo::set_statusDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficInfo::set_statusDescription");
          }
      
          // args
          // jsonable arg
          NSString* statusDescription = (NSString*) args[@"statusDescription"];
      
          // ref
          AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.statusDescription = statusDescription;
          methodResult(@"success");
      },
      
      @"AMapTrafficInfo::set_evaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficInfo::set_evaluation");
          }
      
          // args
          // ref arg
          AMapTrafficEvaluation* evaluation = (AMapTrafficEvaluation*) HEAP[@([args[@"evaluation"] integerValue])];
      
          // ref
          AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.evaluation = evaluation;
          methodResult(@"success");
      },
      
      @"AMapTrafficInfo::set_roads": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapTrafficInfo::set_roads");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* roadsRefArray = (NSArray<NSNumber*> *) args[@"roads"];
          NSMutableArray<AMapTrafficRoad*>* roads = [NSMutableArray arrayWithCapacity:roadsRefArray.count];
          for (int i = 0; i < roadsRefArray.count; i++) {
              AMapTrafficRoad* item = (AMapTrafficRoad*) HEAP[[roadsRefArray objectAtIndex:i]];
              [roads addObject:item];
          }
      
          // ref
          AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.roads = roads;
          methodResult(@"success");
      },
      
      @"AMapCloudImage::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudImage::set_uid");
          }
      
          // args
          // jsonable arg
          NSString* uid = (NSString*) args[@"uid"];
      
          // ref
          AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapCloudImage::set_preurl": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudImage::set_preurl");
          }
      
          // args
          // jsonable arg
          NSString* preurl = (NSString*) args[@"preurl"];
      
          // ref
          AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.preurl = preurl;
          methodResult(@"success");
      },
      
      @"AMapCloudImage::set_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudImage::set_url");
          }
      
          // args
          // jsonable arg
          NSString* url = (NSString*) args[@"url"];
      
          // ref
          AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.url = url;
          methodResult(@"success");
      },
      
      @"AMapCloudPOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::set_uid");
          }
      
          // args
          // jsonable arg
          NSInteger uid = [args[@"uid"] integerValue];
      
          // ref
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uid = uid;
          methodResult(@"success");
      },
      
      @"AMapCloudPOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapCloudPOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::set_location");
          }
      
          // args
          // ref arg
          AMapGeoPoint* location = (AMapGeoPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapCloudPOI::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::set_address");
          }
      
          // args
          // jsonable arg
          NSString* address = (NSString*) args[@"address"];
      
          // ref
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.address = address;
          methodResult(@"success");
      },
      
      @"AMapCloudPOI::set_createTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::set_createTime");
          }
      
          // args
          // jsonable arg
          NSString* createTime = (NSString*) args[@"createTime"];
      
          // ref
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.createTime = createTime;
          methodResult(@"success");
      },
      
      @"AMapCloudPOI::set_updateTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::set_updateTime");
          }
      
          // args
          // jsonable arg
          NSString* updateTime = (NSString*) args[@"updateTime"];
      
          // ref
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.updateTime = updateTime;
          methodResult(@"success");
      },
      
      @"AMapCloudPOI::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::set_distance");
          }
      
          // args
          // jsonable arg
          NSInteger distance = [args[@"distance"] integerValue];
      
          // ref
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distance = distance;
          methodResult(@"success");
      },
      
      @"AMapCloudPOI::set_images": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapCloudPOI::set_images");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* imagesRefArray = (NSArray<NSNumber*> *) args[@"images"];
          NSMutableArray<AMapCloudImage*>* images = [NSMutableArray arrayWithCapacity:imagesRefArray.count];
          for (int i = 0; i < imagesRefArray.count; i++) {
              AMapCloudImage* item = (AMapCloudImage*) HEAP[[imagesRefArray objectAtIndex:i]];
              [images addObject:item];
          }
      
          // ref
          AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.images = images;
          methodResult(@"success");
      },
      
      @"AMapNearbyUploadInfo::set_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUploadInfo::set_userID");
          }
      
          // args
          // jsonable arg
          NSString* userID = (NSString*) args[@"userID"];
      
          // ref
          AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.userID = userID;
          methodResult(@"success");
      },
      
      @"AMapNearbyUploadInfo::set_coordinateType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUploadInfo::set_coordinateType");
          }
      
          // args
          // enum arg
          AMapSearchCoordinateType coordinateType = (AMapSearchCoordinateType) [args[@"coordinateType"] integerValue];
      
          // ref
          AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.coordinateType = coordinateType;
          methodResult(@"success");
      },
      
      @"AMapNearbyUploadInfo::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbyUploadInfo::set_coordinate");
          }
      
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
          AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.coordinate = coordinate;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchManager::set_uploadTimeInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchManager::set_uploadTimeInterval");
          }
      
          // args
          // jsonable arg
          NSTimeInterval uploadTimeInterval = [args[@"uploadTimeInterval"] doubleValue];
      
          // ref
          AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.uploadTimeInterval = uploadTimeInterval;
          methodResult(@"success");
      },
      
      @"AMapNearbySearchManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapNearbySearchManager::set_delegate");
          }
      
          // args
      
      
          // ref
          AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"AMapSearchAPI::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSearchAPI::set_delegate");
          }
      
          // args
      
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"AMapSearchAPI::set_timeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSearchAPI::set_timeout");
          }
      
          // args
          // jsonable arg
          NSInteger timeout = [args[@"timeout"] integerValue];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.timeout = timeout;
          methodResult(@"success");
      },
      
      @"AMapSearchAPI::set_language": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapSearchAPI::set_language");
          }
      
          // args
          // enum arg
          AMapSearchLanguage language = (AMapSearchLanguage) [args[@"language"] integerValue];
      
          // ref
          AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.language = language;
          methodResult(@"success");
      },
      
      @"RefClass::isKindOfAMapPOISearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOISearchBaseRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOIIDSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPOIKeywordsSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOIKeywordsSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOIAroundSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOIPolygonSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOISearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoutePOISearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoutePOISearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoutePOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoutePOISearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapInputTipsSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapInputTipsSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapInputTipsSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapInputTipsSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeocodeSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeocodeSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeocodeSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeocodeSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapReGeocodeSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapReGeocodeSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapReGeocodeSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapReGeocodeSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusStopSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusStopSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusStopSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusStopSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusLineBaseSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusLineBaseSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusLineNameSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusLineNameSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusLineIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusLineIDSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusLineSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusLineSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapDistrictSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapDistrictSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapDistrictSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapDistrictSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRouteSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRouteSearchBaseRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapDrivingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapDrivingRouteSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapWalkingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapWalkingRouteSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTransitRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTransitRouteSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRidingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRidingRouteSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRouteSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRidingRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRidingRouteSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTruckRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTruckRouteSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapDistanceSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapDistanceSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapDistanceSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapDistanceSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapWeatherSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapWeatherSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapWeatherSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapWeatherSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoadTrafficSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoadTrafficSearchBaseRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoadTrafficSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoadTrafficSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoadTrafficCircleSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoadTrafficCircleSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoadTrafficSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoadTrafficSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapNearbySearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapNearbySearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapNearbySearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapNearbySearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCloudSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCloudSearchBaseRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCloudPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCloudPOIAroundSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCloudPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCloudPOIPolygonSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCloudPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCloudPOIIDSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCloudPOILocalSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCloudPOILocalSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCloudPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCloudPOISearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapShareSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapShareSearchBaseRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationShareSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPOIShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOIShareSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRouteShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRouteShareSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapNavigationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapNavigationShareSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapShareSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapShareSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapFutureRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapFutureRouteSearchRequest class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapFutureRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapFutureRouteSearchResponse class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapSearchObject": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapSearchObject class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoPoint class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoPolygon class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCity class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapSuggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapSuggestion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTip class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapImage class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPOIExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOIExtension class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapIndoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapIndoorData class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapSubPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapSubPOI class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoutePOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoutePOI class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPOI class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapAOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapAOI class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoad class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoadInter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoadInter class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapStreetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapStreetNumber class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusinessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusinessArea class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapAddressComponent class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapReGeocode class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeocode class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusStop class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapBusLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapBusLine class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapDistrict": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapDistrict class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTMC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTMC class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapStep class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapPath class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapFutureTimeInfoElement": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapFutureTimeInfoElement class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapFutureTimeInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapFutureTimeInfo class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapWalking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapWalking class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTaxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTaxi class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRailwayStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRailwayStation class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRailwaySpace": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRailwaySpace class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRailway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRailway class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapSegment": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapSegment class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTransit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTransit class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapRoute class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapDistanceResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapDistanceResult class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocalWeatherLive": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocalWeatherLive class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocalDayWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocalDayWeatherForecast class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocalWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocalWeatherForecast class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapNearbyUserInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapNearbyUserInfo class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTrafficEvaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTrafficEvaluation class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTrafficRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTrafficRoad class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapTrafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapTrafficInfo class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCloudImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCloudImage class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapCloudPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapCloudPOI class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapNearbyUploadInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapNearbyUploadInfo class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapNearbySearchManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapNearbySearchManager class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapSearchAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapSearchAPI class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::asAMapPOISearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOISearchBaseRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOIIDSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPOIKeywordsSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOIKeywordsSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOIAroundSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOIPolygonSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOISearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoutePOISearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoutePOISearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoutePOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoutePOISearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapInputTipsSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapInputTipsSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapInputTipsSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapInputTipsSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeocodeSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeocodeSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeocodeSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeocodeSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapReGeocodeSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapReGeocodeSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapReGeocodeSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapReGeocodeSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusStopSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusStopSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusStopSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusStopSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusLineBaseSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusLineBaseSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusLineNameSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusLineNameSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusLineIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusLineIDSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusLineSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusLineSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapDistrictSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapDistrictSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapDistrictSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapDistrictSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRouteSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRouteSearchBaseRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapDrivingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapDrivingRouteSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapWalkingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapWalkingRouteSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTransitRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTransitRouteSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRidingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRidingRouteSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRouteSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRidingRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRidingRouteSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTruckRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTruckRouteSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapDistanceSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapDistanceSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapDistanceSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapDistanceSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapWeatherSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapWeatherSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapWeatherSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapWeatherSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoadTrafficSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoadTrafficSearchBaseRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoadTrafficSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoadTrafficSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoadTrafficCircleSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoadTrafficCircleSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoadTrafficSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoadTrafficSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapNearbySearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapNearbySearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapNearbySearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapNearbySearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCloudSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCloudSearchBaseRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCloudPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCloudPOIAroundSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCloudPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCloudPOIPolygonSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCloudPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCloudPOIIDSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCloudPOILocalSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCloudPOILocalSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCloudPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCloudPOISearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapShareSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapShareSearchBaseRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationShareSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPOIShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOIShareSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRouteShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRouteShareSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapNavigationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapNavigationShareSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapShareSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapShareSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapFutureRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapFutureRouteSearchRequest *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapFutureRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapFutureRouteSearchResponse *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapSearchObject": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapSearchObject *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeoPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeoPoint *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeoPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeoPolygon *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCity *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapSuggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapSuggestion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTip *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapImage *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPOIExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOIExtension *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapIndoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapIndoorData *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapSubPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapSubPOI *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoutePOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoutePOI *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPOI *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapAOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapAOI *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoad *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoadInter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoadInter *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapStreetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapStreetNumber *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusinessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusinessArea *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapAddressComponent *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapReGeocode *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeocode *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusStop *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapBusLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapBusLine *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapDistrict": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapDistrict *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTMC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTMC *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapStep *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapPath *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapFutureTimeInfoElement": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapFutureTimeInfoElement *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapFutureTimeInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapFutureTimeInfo *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapWalking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapWalking *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTaxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTaxi *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRailwayStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRailwayStation *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRailwaySpace": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRailwaySpace *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRailway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRailway *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapSegment": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapSegment *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTransit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTransit *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapRoute *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapDistanceResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapDistanceResult *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocalWeatherLive": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocalWeatherLive *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocalDayWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocalDayWeatherForecast *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocalWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocalWeatherForecast *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapNearbyUserInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapNearbyUserInfo *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTrafficEvaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTrafficEvaluation *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTrafficRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTrafficRoad *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapTrafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapTrafficInfo *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCloudImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCloudImage *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapCloudPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapCloudPOI *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapNearbyUploadInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapNearbyUploadInfo *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapNearbySearchManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapNearbySearchManager *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapSearchAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapSearchAPI *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"ObjectFactory::createAMapPOISearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOISearchBaseRequest");
          }
      
          AMapPOISearchBaseRequest* ref = [[AMapPOISearchBaseRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOIIDSearchRequest");
          }
      
          AMapPOIIDSearchRequest* ref = [[AMapPOIIDSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPOIKeywordsSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOIKeywordsSearchRequest");
          }
      
          AMapPOIKeywordsSearchRequest* ref = [[AMapPOIKeywordsSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOIAroundSearchRequest");
          }
      
          AMapPOIAroundSearchRequest* ref = [[AMapPOIAroundSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOIPolygonSearchRequest");
          }
      
          AMapPOIPolygonSearchRequest* ref = [[AMapPOIPolygonSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOISearchResponse");
          }
      
          AMapPOISearchResponse* ref = [[AMapPOISearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoutePOISearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoutePOISearchRequest");
          }
      
          AMapRoutePOISearchRequest* ref = [[AMapRoutePOISearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoutePOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoutePOISearchResponse");
          }
      
          AMapRoutePOISearchResponse* ref = [[AMapRoutePOISearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapInputTipsSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapInputTipsSearchRequest");
          }
      
          AMapInputTipsSearchRequest* ref = [[AMapInputTipsSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapInputTipsSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapInputTipsSearchResponse");
          }
      
          AMapInputTipsSearchResponse* ref = [[AMapInputTipsSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeocodeSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeocodeSearchRequest");
          }
      
          AMapGeocodeSearchRequest* ref = [[AMapGeocodeSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeocodeSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeocodeSearchResponse");
          }
      
          AMapGeocodeSearchResponse* ref = [[AMapGeocodeSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapReGeocodeSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapReGeocodeSearchRequest");
          }
      
          AMapReGeocodeSearchRequest* ref = [[AMapReGeocodeSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapReGeocodeSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapReGeocodeSearchResponse");
          }
      
          AMapReGeocodeSearchResponse* ref = [[AMapReGeocodeSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusStopSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusStopSearchRequest");
          }
      
          AMapBusStopSearchRequest* ref = [[AMapBusStopSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusStopSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusStopSearchResponse");
          }
      
          AMapBusStopSearchResponse* ref = [[AMapBusStopSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusLineBaseSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusLineBaseSearchRequest");
          }
      
          AMapBusLineBaseSearchRequest* ref = [[AMapBusLineBaseSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusLineNameSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusLineNameSearchRequest");
          }
      
          AMapBusLineNameSearchRequest* ref = [[AMapBusLineNameSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusLineIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusLineIDSearchRequest");
          }
      
          AMapBusLineIDSearchRequest* ref = [[AMapBusLineIDSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusLineSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusLineSearchResponse");
          }
      
          AMapBusLineSearchResponse* ref = [[AMapBusLineSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapDistrictSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapDistrictSearchRequest");
          }
      
          AMapDistrictSearchRequest* ref = [[AMapDistrictSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapDistrictSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapDistrictSearchResponse");
          }
      
          AMapDistrictSearchResponse* ref = [[AMapDistrictSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRouteSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRouteSearchBaseRequest");
          }
      
          AMapRouteSearchBaseRequest* ref = [[AMapRouteSearchBaseRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapDrivingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapDrivingRouteSearchRequest");
          }
      
          AMapDrivingRouteSearchRequest* ref = [[AMapDrivingRouteSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapWalkingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapWalkingRouteSearchRequest");
          }
      
          AMapWalkingRouteSearchRequest* ref = [[AMapWalkingRouteSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTransitRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTransitRouteSearchRequest");
          }
      
          AMapTransitRouteSearchRequest* ref = [[AMapTransitRouteSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRidingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRidingRouteSearchRequest");
          }
      
          AMapRidingRouteSearchRequest* ref = [[AMapRidingRouteSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRouteSearchResponse");
          }
      
          AMapRouteSearchResponse* ref = [[AMapRouteSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRidingRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRidingRouteSearchResponse");
          }
      
          AMapRidingRouteSearchResponse* ref = [[AMapRidingRouteSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTruckRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTruckRouteSearchRequest");
          }
      
          AMapTruckRouteSearchRequest* ref = [[AMapTruckRouteSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapDistanceSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapDistanceSearchRequest");
          }
      
          AMapDistanceSearchRequest* ref = [[AMapDistanceSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapDistanceSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapDistanceSearchResponse");
          }
      
          AMapDistanceSearchResponse* ref = [[AMapDistanceSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapWeatherSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapWeatherSearchRequest");
          }
      
          AMapWeatherSearchRequest* ref = [[AMapWeatherSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapWeatherSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapWeatherSearchResponse");
          }
      
          AMapWeatherSearchResponse* ref = [[AMapWeatherSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoadTrafficSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoadTrafficSearchBaseRequest");
          }
      
          AMapRoadTrafficSearchBaseRequest* ref = [[AMapRoadTrafficSearchBaseRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoadTrafficSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoadTrafficSearchRequest");
          }
      
          AMapRoadTrafficSearchRequest* ref = [[AMapRoadTrafficSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoadTrafficCircleSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoadTrafficCircleSearchRequest");
          }
      
          AMapRoadTrafficCircleSearchRequest* ref = [[AMapRoadTrafficCircleSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoadTrafficSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoadTrafficSearchResponse");
          }
      
          AMapRoadTrafficSearchResponse* ref = [[AMapRoadTrafficSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapNearbySearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapNearbySearchRequest");
          }
      
          AMapNearbySearchRequest* ref = [[AMapNearbySearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapNearbySearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapNearbySearchResponse");
          }
      
          AMapNearbySearchResponse* ref = [[AMapNearbySearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCloudSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCloudSearchBaseRequest");
          }
      
          AMapCloudSearchBaseRequest* ref = [[AMapCloudSearchBaseRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCloudPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCloudPOIAroundSearchRequest");
          }
      
          AMapCloudPOIAroundSearchRequest* ref = [[AMapCloudPOIAroundSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCloudPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCloudPOIPolygonSearchRequest");
          }
      
          AMapCloudPOIPolygonSearchRequest* ref = [[AMapCloudPOIPolygonSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCloudPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCloudPOIIDSearchRequest");
          }
      
          AMapCloudPOIIDSearchRequest* ref = [[AMapCloudPOIIDSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCloudPOILocalSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCloudPOILocalSearchRequest");
          }
      
          AMapCloudPOILocalSearchRequest* ref = [[AMapCloudPOILocalSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCloudPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCloudPOISearchResponse");
          }
      
          AMapCloudPOISearchResponse* ref = [[AMapCloudPOISearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapShareSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapShareSearchBaseRequest");
          }
      
          AMapShareSearchBaseRequest* ref = [[AMapShareSearchBaseRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationShareSearchRequest");
          }
      
          AMapLocationShareSearchRequest* ref = [[AMapLocationShareSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPOIShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOIShareSearchRequest");
          }
      
          AMapPOIShareSearchRequest* ref = [[AMapPOIShareSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRouteShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRouteShareSearchRequest");
          }
      
          AMapRouteShareSearchRequest* ref = [[AMapRouteShareSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapNavigationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapNavigationShareSearchRequest");
          }
      
          AMapNavigationShareSearchRequest* ref = [[AMapNavigationShareSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapShareSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapShareSearchResponse");
          }
      
          AMapShareSearchResponse* ref = [[AMapShareSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapFutureRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapFutureRouteSearchRequest");
          }
      
          AMapFutureRouteSearchRequest* ref = [[AMapFutureRouteSearchRequest alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapFutureRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapFutureRouteSearchResponse");
          }
      
          AMapFutureRouteSearchResponse* ref = [[AMapFutureRouteSearchResponse alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapSearchObject": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapSearchObject");
          }
      
          AMapSearchObject* ref = [[AMapSearchObject alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeoPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeoPoint");
          }
      
          AMapGeoPoint* ref = [[AMapGeoPoint alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeoPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeoPolygon");
          }
      
          AMapGeoPolygon* ref = [[AMapGeoPolygon alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCity");
          }
      
          AMapCity* ref = [[AMapCity alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapSuggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapSuggestion");
          }
      
          AMapSuggestion* ref = [[AMapSuggestion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTip");
          }
      
          AMapTip* ref = [[AMapTip alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapImage");
          }
      
          AMapImage* ref = [[AMapImage alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPOIExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOIExtension");
          }
      
          AMapPOIExtension* ref = [[AMapPOIExtension alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapIndoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapIndoorData");
          }
      
          AMapIndoorData* ref = [[AMapIndoorData alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapSubPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapSubPOI");
          }
      
          AMapSubPOI* ref = [[AMapSubPOI alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoutePOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoutePOI");
          }
      
          AMapRoutePOI* ref = [[AMapRoutePOI alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPOI");
          }
      
          AMapPOI* ref = [[AMapPOI alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapAOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapAOI");
          }
      
          AMapAOI* ref = [[AMapAOI alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoad");
          }
      
          AMapRoad* ref = [[AMapRoad alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoadInter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoadInter");
          }
      
          AMapRoadInter* ref = [[AMapRoadInter alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapStreetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapStreetNumber");
          }
      
          AMapStreetNumber* ref = [[AMapStreetNumber alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusinessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusinessArea");
          }
      
          AMapBusinessArea* ref = [[AMapBusinessArea alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapAddressComponent");
          }
      
          AMapAddressComponent* ref = [[AMapAddressComponent alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapReGeocode");
          }
      
          AMapReGeocode* ref = [[AMapReGeocode alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeocode");
          }
      
          AMapGeocode* ref = [[AMapGeocode alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusStop");
          }
      
          AMapBusStop* ref = [[AMapBusStop alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapBusLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapBusLine");
          }
      
          AMapBusLine* ref = [[AMapBusLine alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapDistrict": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapDistrict");
          }
      
          AMapDistrict* ref = [[AMapDistrict alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTMC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTMC");
          }
      
          AMapTMC* ref = [[AMapTMC alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapStep");
          }
      
          AMapStep* ref = [[AMapStep alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapPath");
          }
      
          AMapPath* ref = [[AMapPath alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapFutureTimeInfoElement": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapFutureTimeInfoElement");
          }
      
          AMapFutureTimeInfoElement* ref = [[AMapFutureTimeInfoElement alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapFutureTimeInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapFutureTimeInfo");
          }
      
          AMapFutureTimeInfo* ref = [[AMapFutureTimeInfo alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapWalking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapWalking");
          }
      
          AMapWalking* ref = [[AMapWalking alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTaxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTaxi");
          }
      
          AMapTaxi* ref = [[AMapTaxi alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRailwayStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRailwayStation");
          }
      
          AMapRailwayStation* ref = [[AMapRailwayStation alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRailwaySpace": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRailwaySpace");
          }
      
          AMapRailwaySpace* ref = [[AMapRailwaySpace alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRailway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRailway");
          }
      
          AMapRailway* ref = [[AMapRailway alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapSegment": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapSegment");
          }
      
          AMapSegment* ref = [[AMapSegment alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTransit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTransit");
          }
      
          AMapTransit* ref = [[AMapTransit alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapRoute");
          }
      
          AMapRoute* ref = [[AMapRoute alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapDistanceResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapDistanceResult");
          }
      
          AMapDistanceResult* ref = [[AMapDistanceResult alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocalWeatherLive": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocalWeatherLive");
          }
      
          AMapLocalWeatherLive* ref = [[AMapLocalWeatherLive alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocalDayWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocalDayWeatherForecast");
          }
      
          AMapLocalDayWeatherForecast* ref = [[AMapLocalDayWeatherForecast alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocalWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocalWeatherForecast");
          }
      
          AMapLocalWeatherForecast* ref = [[AMapLocalWeatherForecast alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapNearbyUserInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapNearbyUserInfo");
          }
      
          AMapNearbyUserInfo* ref = [[AMapNearbyUserInfo alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTrafficEvaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTrafficEvaluation");
          }
      
          AMapTrafficEvaluation* ref = [[AMapTrafficEvaluation alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTrafficRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTrafficRoad");
          }
      
          AMapTrafficRoad* ref = [[AMapTrafficRoad alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapTrafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapTrafficInfo");
          }
      
          AMapTrafficInfo* ref = [[AMapTrafficInfo alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCloudImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCloudImage");
          }
      
          AMapCloudImage* ref = [[AMapCloudImage alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapCloudPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapCloudPOI");
          }
      
          AMapCloudPOI* ref = [[AMapCloudPOI alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapNearbyUploadInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapNearbyUploadInfo");
          }
      
          AMapNearbyUploadInfo* ref = [[AMapNearbyUploadInfo alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapSearchAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapSearchAPI");
          }
      
          AMapSearchAPI* ref = [[AMapSearchAPI alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOISearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOISearchBaseRequest* ref = [[AMapPOISearchBaseRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOIIDSearchRequest* ref = [[AMapPOIIDSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOIKeywordsSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOIKeywordsSearchRequest* ref = [[AMapPOIKeywordsSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOIAroundSearchRequest* ref = [[AMapPOIAroundSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOIPolygonSearchRequest* ref = [[AMapPOIPolygonSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOISearchResponse* ref = [[AMapPOISearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoutePOISearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoutePOISearchRequest* ref = [[AMapRoutePOISearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoutePOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoutePOISearchResponse* ref = [[AMapRoutePOISearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapInputTipsSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapInputTipsSearchRequest* ref = [[AMapInputTipsSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapInputTipsSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapInputTipsSearchResponse* ref = [[AMapInputTipsSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeocodeSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeocodeSearchRequest* ref = [[AMapGeocodeSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeocodeSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeocodeSearchResponse* ref = [[AMapGeocodeSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapReGeocodeSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapReGeocodeSearchRequest* ref = [[AMapReGeocodeSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapReGeocodeSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapReGeocodeSearchResponse* ref = [[AMapReGeocodeSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusStopSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusStopSearchRequest* ref = [[AMapBusStopSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusStopSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusStopSearchResponse* ref = [[AMapBusStopSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusLineBaseSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusLineBaseSearchRequest* ref = [[AMapBusLineBaseSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusLineNameSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusLineNameSearchRequest* ref = [[AMapBusLineNameSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusLineIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusLineIDSearchRequest* ref = [[AMapBusLineIDSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusLineSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusLineSearchResponse* ref = [[AMapBusLineSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapDistrictSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapDistrictSearchRequest* ref = [[AMapDistrictSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapDistrictSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapDistrictSearchResponse* ref = [[AMapDistrictSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRouteSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRouteSearchBaseRequest* ref = [[AMapRouteSearchBaseRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapDrivingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapDrivingRouteSearchRequest* ref = [[AMapDrivingRouteSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapWalkingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapWalkingRouteSearchRequest* ref = [[AMapWalkingRouteSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTransitRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTransitRouteSearchRequest* ref = [[AMapTransitRouteSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRidingRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRidingRouteSearchRequest* ref = [[AMapRidingRouteSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRouteSearchResponse* ref = [[AMapRouteSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRidingRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRidingRouteSearchResponse* ref = [[AMapRidingRouteSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTruckRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTruckRouteSearchRequest* ref = [[AMapTruckRouteSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapDistanceSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapDistanceSearchRequest* ref = [[AMapDistanceSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapDistanceSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapDistanceSearchResponse* ref = [[AMapDistanceSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapWeatherSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapWeatherSearchRequest* ref = [[AMapWeatherSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapWeatherSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapWeatherSearchResponse* ref = [[AMapWeatherSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoadTrafficSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoadTrafficSearchBaseRequest* ref = [[AMapRoadTrafficSearchBaseRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoadTrafficSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoadTrafficSearchRequest* ref = [[AMapRoadTrafficSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoadTrafficCircleSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoadTrafficCircleSearchRequest* ref = [[AMapRoadTrafficCircleSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoadTrafficSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoadTrafficSearchResponse* ref = [[AMapRoadTrafficSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapNearbySearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapNearbySearchRequest* ref = [[AMapNearbySearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapNearbySearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapNearbySearchResponse* ref = [[AMapNearbySearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCloudSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCloudSearchBaseRequest* ref = [[AMapCloudSearchBaseRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCloudPOIAroundSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCloudPOIAroundSearchRequest* ref = [[AMapCloudPOIAroundSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCloudPOIPolygonSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCloudPOIPolygonSearchRequest* ref = [[AMapCloudPOIPolygonSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCloudPOIIDSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCloudPOIIDSearchRequest* ref = [[AMapCloudPOIIDSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCloudPOILocalSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCloudPOILocalSearchRequest* ref = [[AMapCloudPOILocalSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCloudPOISearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCloudPOISearchResponse* ref = [[AMapCloudPOISearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapShareSearchBaseRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapShareSearchBaseRequest* ref = [[AMapShareSearchBaseRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationShareSearchRequest* ref = [[AMapLocationShareSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOIShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOIShareSearchRequest* ref = [[AMapPOIShareSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRouteShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRouteShareSearchRequest* ref = [[AMapRouteShareSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapNavigationShareSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapNavigationShareSearchRequest* ref = [[AMapNavigationShareSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapShareSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapShareSearchResponse* ref = [[AMapShareSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapFutureRouteSearchRequest": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapFutureRouteSearchRequest* ref = [[AMapFutureRouteSearchRequest alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapFutureRouteSearchResponse": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapFutureRouteSearchResponse* ref = [[AMapFutureRouteSearchResponse alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapSearchObject": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapSearchObject* ref = [[AMapSearchObject alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeoPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeoPoint* ref = [[AMapGeoPoint alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeoPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeoPolygon* ref = [[AMapGeoPolygon alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCity* ref = [[AMapCity alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapSuggestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapSuggestion* ref = [[AMapSuggestion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTip": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTip* ref = [[AMapTip alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapImage* ref = [[AMapImage alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOIExtension": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOIExtension* ref = [[AMapPOIExtension alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapIndoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapIndoorData* ref = [[AMapIndoorData alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapSubPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapSubPOI* ref = [[AMapSubPOI alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoutePOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoutePOI* ref = [[AMapRoutePOI alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPOI* ref = [[AMapPOI alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapAOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapAOI* ref = [[AMapAOI alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoad* ref = [[AMapRoad alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoadInter": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoadInter* ref = [[AMapRoadInter alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapStreetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapStreetNumber* ref = [[AMapStreetNumber alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusinessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusinessArea* ref = [[AMapBusinessArea alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapAddressComponent* ref = [[AMapAddressComponent alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapReGeocode* ref = [[AMapReGeocode alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeocode* ref = [[AMapGeocode alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusStop* ref = [[AMapBusStop alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapBusLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapBusLine* ref = [[AMapBusLine alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapDistrict": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapDistrict* ref = [[AMapDistrict alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTMC": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTMC* ref = [[AMapTMC alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapStep* ref = [[AMapStep alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapPath* ref = [[AMapPath alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapFutureTimeInfoElement": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapFutureTimeInfoElement* ref = [[AMapFutureTimeInfoElement alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapFutureTimeInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapFutureTimeInfo* ref = [[AMapFutureTimeInfo alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapWalking": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapWalking* ref = [[AMapWalking alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTaxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTaxi* ref = [[AMapTaxi alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRailwayStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRailwayStation* ref = [[AMapRailwayStation alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRailwaySpace": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRailwaySpace* ref = [[AMapRailwaySpace alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRailway": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRailway* ref = [[AMapRailway alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapSegment": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapSegment* ref = [[AMapSegment alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTransit": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTransit* ref = [[AMapTransit alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapRoute* ref = [[AMapRoute alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapDistanceResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapDistanceResult* ref = [[AMapDistanceResult alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocalWeatherLive": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocalWeatherLive* ref = [[AMapLocalWeatherLive alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocalDayWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocalDayWeatherForecast* ref = [[AMapLocalDayWeatherForecast alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocalWeatherForecast": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocalWeatherForecast* ref = [[AMapLocalWeatherForecast alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapNearbyUserInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapNearbyUserInfo* ref = [[AMapNearbyUserInfo alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTrafficEvaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTrafficEvaluation* ref = [[AMapTrafficEvaluation alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTrafficRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTrafficRoad* ref = [[AMapTrafficRoad alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapTrafficInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapTrafficInfo* ref = [[AMapTrafficInfo alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCloudImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCloudImage* ref = [[AMapCloudImage alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapCloudPOI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapCloudPOI* ref = [[AMapCloudPOI alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapNearbyUploadInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapNearbyUploadInfo* ref = [[AMapNearbyUploadInfo alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapSearchAPI": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapSearchAPI* ref = [[AMapSearchAPI alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/amap_search_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[AmapSearchFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (AMapNearbyUploadInfo*)nearbyInfoForUploading : (AMapNearbySearchManager*)manager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapNearbySearchManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapNearbySearchManagerDelegate::nearbyInfoForUploading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;

  [channel invokeMethod:@"Callback::AMapNearbySearchManagerDelegate::nearbyInfoForUploading"
              arguments:@{}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)onNearbyInfoUploadedWithError : (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapNearbySearchManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapNearbySearchManagerDelegate::onNearbyInfoUploadedWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapNearbySearchManagerDelegate::onNearbyInfoUploadedWithError" arguments:@{@"error": argerror}];
  
}

- (void)onUserInfoClearedWithError : (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapNearbySearchManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapNearbySearchManagerDelegate::onUserInfoClearedWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapNearbySearchManagerDelegate::onUserInfoClearedWithError" arguments:@{@"error": argerror}];
  
}

- (void)AMapSearchRequest : (id)request didFailWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::AMapSearchRequestDidFailWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(((NSObject*) request).hash);
  HEAP[argrequest] = ((NSObject*) request);
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::AMapSearchRequestDidFailWithError" arguments:@{@"request": argrequest, @"error": argerror}];
  
}

- (void)onPOISearchDone : (AMapPOISearchBaseRequest*)request response: (AMapPOISearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onPOISearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onPOISearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onRoutePOISearchDone : (AMapRoutePOISearchRequest*)request response: (AMapRoutePOISearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onRoutePOISearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onRoutePOISearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onGeocodeSearchDone : (AMapGeocodeSearchRequest*)request response: (AMapGeocodeSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onGeocodeSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onGeocodeSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onReGeocodeSearchDone : (AMapReGeocodeSearchRequest*)request response: (AMapReGeocodeSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onReGeocodeSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onReGeocodeSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onInputTipsSearchDone : (AMapInputTipsSearchRequest*)request response: (AMapInputTipsSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onInputTipsSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onInputTipsSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onBusStopSearchDone : (AMapBusStopSearchRequest*)request response: (AMapBusStopSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onBusStopSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onBusStopSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onBusLineSearchDone : (AMapBusLineBaseSearchRequest*)request response: (AMapBusLineSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onBusLineSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onBusLineSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onDistrictSearchDone : (AMapDistrictSearchRequest*)request response: (AMapDistrictSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onDistrictSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onDistrictSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onRouteSearchDone : (AMapRouteSearchBaseRequest*)request response: (AMapRouteSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onRouteSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onRouteSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onFutureRouteSearchDone : (AMapRouteSearchBaseRequest*)request response: (AMapFutureRouteSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onFutureRouteSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onFutureRouteSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onDistanceSearchDone : (AMapDistanceSearchRequest*)request response: (AMapDistanceSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onDistanceSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onDistanceSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onWeatherSearchDone : (AMapWeatherSearchRequest*)request response: (AMapWeatherSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onWeatherSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onWeatherSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onRoadTrafficSearchDone : (AMapRoadTrafficSearchBaseRequest*)request response: (AMapRoadTrafficSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onRoadTrafficSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onRoadTrafficSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onNearbySearchDone : (AMapNearbySearchRequest*)request response: (AMapNearbySearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onNearbySearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onNearbySearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onCloudSearchDone : (AMapCloudSearchBaseRequest*)request response: (AMapCloudPOISearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onCloudSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onCloudSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}

- (void)onShareSearchDone : (AMapShareSearchBaseRequest*)request response: (AMapShareSearchResponse*)response
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapSearchDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapSearchDelegate::onShareSearchDoneResponse");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrequest = @(request.hash);
  HEAP[argrequest] = request;
  // ref callback arg
  NSNumber* argresponse = @(response.hash);
  HEAP[argresponse] = response;

  [channel invokeMethod:@"Callback::AMapSearchDelegate::onShareSearchDoneResponse" arguments:@{@"request": argrequest, @"response": argresponse}];
  
}


@end