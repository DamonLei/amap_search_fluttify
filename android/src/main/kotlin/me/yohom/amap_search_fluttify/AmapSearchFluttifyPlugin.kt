package me.yohom.amap_search_fluttify

import android.os.Bundle
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel
import io.flutter.plugin.common.PluginRegistry.Registrar

val HEAP = mutableMapOf<Int, Any>()

@Suppress("FunctionName", "UsePropertyAccessSyntax", "RedundantUnitReturnType", "UNUSED_PARAMETER", "SpellCheckingInspection", "ConvertToStringTemplate", "DEPRECATION", "UNUSED_VARIABLE")
class AmapSearchFluttifyPlugin(private val registrar: Registrar): MethodChannel.MethodCallHandler {

    companion object {
        @JvmStatic
        fun registerWith(registrar: Registrar) {
            val channel = MethodChannel(registrar.messenger(), "me.yohom/amap_search_fluttify")
            channel.setMethodCallHandler(AmapSearchFluttifyPlugin(registrar))

            // 注册View
            
        }
    }

    private val handlerMap = mapOf<String, (Registrar, Map<String, Any>, MethodChannel.Result) -> Unit>(
        "com.amap.api.services.route.DistanceItem::get_ERROR_CODE_NO_DRIVE" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            methodResult.success(ref.ERROR_CODE_NO_DRIVE)
        },
        "com.amap.api.services.route.DistanceItem::get_ERROR_CODE_TOO_FAR" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            methodResult.success(ref.ERROR_CODE_TOO_FAR)
        },
        "com.amap.api.services.route.DistanceItem::get_ERROR_CODE_NOT_IN_CHINA" to { registrar, args, methodResult ->
            // 引用对象
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            methodResult.success(ref.ERROR_CODE_NOT_IN_CHINA)
        },
        "com.amap.api.location.LocationManagerBase::setLocationOption" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocationClientOption
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::setLocationOption([])")
        
            // 开始调用
            ref.setLocationOption(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::setLocationListener" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocationListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::setLocationListener([])")
        
            // 开始调用
            ref.setLocationListener(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::startLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::startLocation([])")
        
            // 开始调用
            ref.startLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::stopLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::stopLocation([])")
        
            // 开始调用
            ref.stopLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::getLastKnownLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::getLastKnownLocation([])")
        
            // 开始调用
            val result = ref.getLastKnownLocation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.LocationManagerBase::startAssistantLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::startAssistantLocation([])")
        
            // 开始调用
            ref.startAssistantLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::stopAssistantLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::stopAssistantLocation([])")
        
            // 开始调用
            ref.stopAssistantLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::isStarted" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::isStarted([])")
        
            // 开始调用
            val result = ref.isStarted()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.LocationManagerBase::unRegisterLocationListener" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocationListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::unRegisterLocationListener([])")
        
            // 开始调用
            ref.unRegisterLocationListener(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::onDestroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::onDestroy([])")
        
            // 开始调用
            ref.onDestroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.LocationManagerBase::disableBackgroundLocation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.LocationManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.LocationManagerBase@$refId::disableBackgroundLocation([\"var1\":$var1])")
        
            // 开始调用
            ref.disableBackgroundLocation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::setLocationOption" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocationClientOption
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::setLocationOption([])")
        
            // 开始调用
            ref.setLocationOption(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::setLocationListener" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocationListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::setLocationListener([])")
        
            // 开始调用
            ref.setLocationListener(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::startLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::startLocation([])")
        
            // 开始调用
            ref.startLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::stopLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::stopLocation([])")
        
            // 开始调用
            ref.stopLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::getLastKnownLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::getLastKnownLocation([])")
        
            // 开始调用
            val result = ref.getLastKnownLocation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClient::startAssistantLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::startAssistantLocation([])")
        
            // 开始调用
            ref.startAssistantLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::stopAssistantLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::stopAssistantLocation([])")
        
            // 开始调用
            ref.stopAssistantLocation()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::getVersion" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::getVersion([])")
        
            // 开始调用
            val result = ref.getVersion()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClient::setApiKey" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient::setApiKey([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.location.AMapLocationClient.setApiKey(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::isStarted" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::isStarted([])")
        
            // 开始调用
            val result = ref.isStarted()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClient::unRegisterLocationListener" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocationListener
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::unRegisterLocationListener([])")
        
            // 开始调用
            ref.unRegisterLocationListener(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::onDestroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::onDestroy([])")
        
            // 开始调用
            ref.onDestroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::disableBackgroundLocation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient@$refId::disableBackgroundLocation([\"var1\":$var1])")
        
            // 开始调用
            ref.disableBackgroundLocation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClient::getDeviceId" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClient::getDeviceId([])")
        
            // 开始调用
            val result = com.amap.api.location.AMapLocationClient.getDeviceId(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationListener::onLocationChanged" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationListener@$refId::onLocationChanged([])")
        
            // 开始调用
            ref.onLocationChanged(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.DPoint::getLongitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.DPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.DPoint@$refId::getLongitude([])")
        
            // 开始调用
            val result = ref.getLongitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.DPoint::setLongitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.DPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.DPoint@$refId::setLongitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLongitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.DPoint::getLatitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.DPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.DPoint@$refId::getLatitude([])")
        
            // 开始调用
            val result = ref.getLatitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.DPoint::setLatitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.DPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.DPoint@$refId::setLatitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLatitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.CoordinateConverter::from" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.location.CoordinateConverter.CoordType.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.CoordinateConverter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter@$refId::from([])")
        
            // 开始调用
            val result = ref.from(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.CoordinateConverter::coord" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.DPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.CoordinateConverter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter@$refId::coord([])")
        
            // 开始调用
            val result = ref.coord(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.CoordinateConverter::convert" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.CoordinateConverter
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter@$refId::convert([])")
        
            // 开始调用
            val result = ref.convert()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.CoordinateConverter::isAMapDataAvailable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Double
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter::isAMapDataAvailable([\"var0\":$var0, \"var2\":$var2])")
        
            // 开始调用
            val result = com.amap.api.location.CoordinateConverter.isAMapDataAvailable(var0, var2)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.CoordinateConverter::calculateLineDistance" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as com.amap.api.location.DPoint
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.DPoint
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.CoordinateConverter::calculateLineDistance([])")
        
            // 开始调用
            val result = com.amap.api.location.CoordinateConverter.calculateLineDistance(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.CoordUtil::convertToGcj" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as DoubleArray
            // jsonable参数
            val var1 = args["var1"] as DoubleArray
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.CoordUtil::convertToGcj([\"var0\":$var0, \"var1\":$var1])")
        
            // 开始调用
            val result = com.amap.api.location.CoordUtil.convertToGcj(var0, var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.CoordUtil::isLoadedSo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.CoordUtil::isLoadedSo([])")
        
            // 开始调用
            val result = com.amap.api.location.CoordUtil.isLoadedSo()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.CoordUtil::setLoadedSo" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.CoordUtil::setLoadedSo([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.location.CoordUtil.setLoadedSo(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol::getValue" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol@$refId::getValue([])")
        
            // 开始调用
            val result = ref.getValue()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.UmidtokenInfo::getUmidtoken" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.UmidtokenInfo::getUmidtoken([])")
        
            // 开始调用
            val result = com.amap.api.location.UmidtokenInfo.getUmidtoken()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.UmidtokenInfo::setLocAble" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.UmidtokenInfo::setLocAble([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.location.UmidtokenInfo.setLocAble(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.UmidtokenInfo::setUmidtoken" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as android.content.Context
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.UmidtokenInfo::setUmidtoken([\"var1\":$var1])")
        
            // 开始调用
            com.amap.api.location.UmidtokenInfo.setUmidtoken(var0, var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getGpsAccuracyStatus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getGpsAccuracyStatus([])")
        
            // 开始调用
            val result = ref.getGpsAccuracyStatus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setGpsAccuracyStatus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setGpsAccuracyStatus([\"var1\":$var1])")
        
            // 开始调用
            ref.setGpsAccuracyStatus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getLocationType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLocationType([])")
        
            // 开始调用
            val result = ref.getLocationType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setLocationType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLocationType([\"var1\":$var1])")
        
            // 开始调用
            ref.setLocationType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getLocationDetail" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLocationDetail([])")
        
            // 开始调用
            val result = ref.getLocationDetail()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setLocationDetail" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLocationDetail([\"var1\":$var1])")
        
            // 开始调用
            ref.setLocationDetail(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getErrorCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getErrorCode([])")
        
            // 开始调用
            val result = ref.getErrorCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setErrorCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setErrorCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setErrorCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getErrorInfo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getErrorInfo([])")
        
            // 开始调用
            val result = ref.getErrorInfo()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setErrorInfo" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setErrorInfo([\"var1\":$var1])")
        
            // 开始调用
            ref.setErrorInfo(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getCountry" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getCountry([])")
        
            // 开始调用
            val result = ref.getCountry()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setCountry" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setCountry([\"var1\":$var1])")
        
            // 开始调用
            ref.setCountry(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getRoad([])")
        
            // 开始调用
            val result = ref.getRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAddress([])")
        
            // 开始调用
            val result = ref.getAddress()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setAddress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setAddress([\"var1\":$var1])")
        
            // 开始调用
            ref.setAddress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getProvince" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getProvince([])")
        
            // 开始调用
            val result = ref.getProvince()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setProvince" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setProvince([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvince(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getDistrict([])")
        
            // 开始调用
            val result = ref.getDistrict()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setDistrict" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setDistrict([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistrict(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getCityCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getCityCode([])")
        
            // 开始调用
            val result = ref.getCityCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getPoiName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getPoiName([])")
        
            // 开始调用
            val result = ref.getPoiName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setPoiName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setPoiName([\"var1\":$var1])")
        
            // 开始调用
            ref.setPoiName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getLatitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLatitude([])")
        
            // 开始调用
            val result = ref.getLatitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setLatitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLatitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLatitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getLongitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLongitude([])")
        
            // 开始调用
            val result = ref.getLongitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setLongitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLongitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLongitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getSatellites" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getSatellites([])")
        
            // 开始调用
            val result = ref.getSatellites()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setSatellites" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setSatellites([\"var1\":$var1])")
        
            // 开始调用
            ref.setSatellites(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getStreet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getStreet([])")
        
            // 开始调用
            val result = ref.getStreet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setStreet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setStreet([\"var1\":$var1])")
        
            // 开始调用
            ref.setStreet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getStreetNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getStreetNum([])")
        
            // 开始调用
            val result = ref.getStreetNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setNumber" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setNumber([\"var1\":$var1])")
        
            // 开始调用
            ref.setNumber(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::setOffset" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setOffset([\"var1\":$var1])")
        
            // 开始调用
            ref.setOffset(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::isOffset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::isOffset([])")
        
            // 开始调用
            val result = ref.isOffset()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getAoiName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAoiName([])")
        
            // 开始调用
            val result = ref.getAoiName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setAoiName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setAoiName([\"var1\":$var1])")
        
            // 开始调用
            ref.setAoiName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getBuildingId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getBuildingId([])")
        
            // 开始调用
            val result = ref.getBuildingId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setBuildingId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setBuildingId([\"var1\":$var1])")
        
            // 开始调用
            ref.setBuildingId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getFloor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getFloor([])")
        
            // 开始调用
            val result = ref.getFloor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::isFixLastLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::isFixLastLocation([])")
        
            // 开始调用
            val result = ref.isFixLastLocation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setFixLastLocation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setFixLastLocation([\"var1\":$var1])")
        
            // 开始调用
            ref.setFixLastLocation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::setFloor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setFloor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFloor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::isMock" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::isMock([])")
        
            // 开始调用
            val result = ref.isMock()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setMock" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setMock([\"var1\":$var1])")
        
            // 开始调用
            ref.setMock(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getDescription" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getDescription([])")
        
            // 开始调用
            val result = ref.getDescription()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setDescription" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setDescription([\"var1\":$var1])")
        
            // 开始调用
            ref.setDescription(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::toStr" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::toStr([])")
        
            // 开始调用
            val result = ref.toStr()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getAccuracy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAccuracy([])")
        
            // 开始调用
            val result = ref.getAccuracy()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getBearing" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getBearing([])")
        
            // 开始调用
            val result = ref.getBearing()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getAltitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getAltitude([])")
        
            // 开始调用
            val result = ref.getAltitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getSpeed" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getSpeed([])")
        
            // 开始调用
            val result = ref.getSpeed()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getProvider" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getProvider([])")
        
            // 开始调用
            val result = ref.getProvider()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocation::getLocationQualityReport" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getLocationQualityReport([])")
        
            // 开始调用
            val result = ref.getLocationQualityReport()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocation::setLocationQualityReport" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocationQualityReport
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setLocationQualityReport([])")
        
            // 开始调用
            ref.setLocationQualityReport(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getCoordType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getCoordType([])")
        
            // 开始调用
            val result = ref.getCoordType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setCoordType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setCoordType([\"var1\":$var1])")
        
            // 开始调用
            ref.setCoordType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::setTrustedLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setTrustedLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setTrustedLevel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocation::getTrustedLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getTrustedLevel([])")
        
            // 开始调用
            val result = ref.getTrustedLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::getConScenario" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::getConScenario([])")
        
            // 开始调用
            val result = ref.getConScenario()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocation::setConScenario" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocation@$refId::setConScenario([\"var1\":$var1])")
        
            // 开始调用
            ref.setConScenario(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::getAPIKEY" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::getAPIKEY([])")
        
            // 开始调用
            val result = com.amap.api.location.AMapLocationClientOption.getAPIKEY()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::isMockEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isMockEnable([])")
        
            // 开始调用
            val result = ref.isMockEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setMockEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setMockEnable([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setMockEnable(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getInterval" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getInterval([])")
        
            // 开始调用
            val result = ref.getInterval()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setInterval" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setInterval([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setInterval(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isOnceLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isOnceLocation([])")
        
            // 开始调用
            val result = ref.isOnceLocation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setOnceLocation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setOnceLocation([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setOnceLocation(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isNeedAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isNeedAddress([])")
        
            // 开始调用
            val result = ref.isNeedAddress()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setNeedAddress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setNeedAddress([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setNeedAddress(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isWifiActiveScan" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isWifiActiveScan([])")
        
            // 开始调用
            val result = ref.isWifiActiveScan()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setWifiActiveScan" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setWifiActiveScan([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setWifiActiveScan(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isWifiScan" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isWifiScan([])")
        
            // 开始调用
            val result = ref.isWifiScan()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setWifiScan" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setWifiScan([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setWifiScan(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getLocationMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getLocationMode([])")
        
            // 开始调用
            val result = ref.getLocationMode()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setLocationMode" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationMode.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setLocationMode([])")
        
            // 开始调用
            val result = ref.setLocationMode(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getLocationProtocol" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getLocationProtocol([])")
        
            // 开始调用
            val result = ref.getLocationProtocol()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setLocationProtocol" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var0 = com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol.values()[args["var0"] as Int]
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setLocationProtocol([])")
        
            // 开始调用
            com.amap.api.location.AMapLocationClientOption.setLocationProtocol(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::isKillProcess" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isKillProcess([])")
        
            // 开始调用
            val result = ref.isKillProcess()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setKillProcess" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setKillProcess([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setKillProcess(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isGpsFirst" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isGpsFirst([])")
        
            // 开始调用
            val result = ref.isGpsFirst()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setGpsFirst" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setGpsFirst([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setGpsFirst(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setGpsFirstTimeout" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setGpsFirstTimeout([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setGpsFirstTimeout(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getGpsFirstTimeout" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getGpsFirstTimeout([])")
        
            // 开始调用
            val result = ref.getGpsFirstTimeout()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getHttpTimeOut" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getHttpTimeOut([])")
        
            // 开始调用
            val result = ref.getHttpTimeOut()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setHttpTimeOut" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setHttpTimeOut([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setHttpTimeOut(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isOffset" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isOffset([])")
        
            // 开始调用
            val result = ref.isOffset()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setOffset" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setOffset([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setOffset(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isLocationCacheEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isLocationCacheEnable([])")
        
            // 开始调用
            val result = ref.isLocationCacheEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setLocationCacheEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setLocationCacheEnable([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setLocationCacheEnable(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isOnceLocationLatest" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isOnceLocationLatest([])")
        
            // 开始调用
            val result = ref.isOnceLocationLatest()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setOnceLocationLatest" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setOnceLocationLatest([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setOnceLocationLatest(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isSensorEnable" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::isSensorEnable([])")
        
            // 开始调用
            val result = ref.isSensorEnable()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setSensorEnable" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setSensorEnable([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setSensorEnable(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setLastLocationLifeCycle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setLastLocationLifeCycle([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setLastLocationLifeCycle(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getLastLocationLifeCycle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getLastLocationLifeCycle([])")
        
            // 开始调用
            val result = ref.getLastLocationLifeCycle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::getGeoLanguage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getGeoLanguage([])")
        
            // 开始调用
            val result = ref.getGeoLanguage()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setGeoLanguage" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.location.AMapLocationClientOption.GeoLanguage.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setGeoLanguage([])")
        
            // 开始调用
            val result = ref.setGeoLanguage(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setDownloadCoordinateConvertLibrary" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setDownloadCoordinateConvertLibrary([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.location.AMapLocationClientOption.setDownloadCoordinateConvertLibrary(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::isDownloadCoordinateConvertLibrary" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::isDownloadCoordinateConvertLibrary([])")
        
            // 开始调用
            val result = com.amap.api.location.AMapLocationClientOption.isDownloadCoordinateConvertLibrary()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::getDeviceModeDistanceFilter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getDeviceModeDistanceFilter([])")
        
            // 开始调用
            val result = ref.getDeviceModeDistanceFilter()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setDeviceModeDistanceFilter" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setDeviceModeDistanceFilter([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.setDeviceModeDistanceFilter(var1.toFloat())
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::setLocationPurpose" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationPurpose.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::setLocationPurpose([])")
        
            // 开始调用
            val result = ref.setLocationPurpose(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::getLocationPurpose" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getLocationPurpose([])")
        
            // 开始调用
            val result = ref.getLocationPurpose()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.location.AMapLocationClientOption::isOpenAlwaysScanWifi" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::isOpenAlwaysScanWifi([])")
        
            // 开始调用
            val result = com.amap.api.location.AMapLocationClientOption.isOpenAlwaysScanWifi()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationClientOption::setOpenAlwaysScanWifi" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Boolean
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setOpenAlwaysScanWifi([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.location.AMapLocationClientOption.setOpenAlwaysScanWifi(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::setScanWifiInterval" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var0 = args["var0"] as Long
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption::setScanWifiInterval([\"var0\":$var0])")
        
            // 开始调用
            com.amap.api.location.AMapLocationClientOption.setScanWifiInterval(var0)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationClientOption::getScanWifiInterval" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationClientOption
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationClientOption@$refId::getScanWifiInterval([])")
        
            // 开始调用
            val result = ref.getScanWifiInterval()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.APSServiceBase::onCreate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.APSServiceBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.APSServiceBase@$refId::onCreate([])")
        
            // 开始调用
            ref.onCreate()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.APSServiceBase::onDestroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.APSServiceBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.APSServiceBase@$refId::onDestroy([])")
        
            // 开始调用
            ref.onDestroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::setWifiAble" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setWifiAble([\"var1\":$var1])")
        
            // 开始调用
            ref.setWifiAble(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::setGpsStatus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setGpsStatus([\"var1\":$var1])")
        
            // 开始调用
            ref.setGpsStatus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::setGPSSatellites" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setGPSSatellites([\"var1\":$var1])")
        
            // 开始调用
            ref.setGPSSatellites(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::isWifiAble" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::isWifiAble([])")
        
            // 开始调用
            val result = ref.isWifiAble()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::getGPSStatus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getGPSStatus([])")
        
            // 开始调用
            val result = ref.getGPSStatus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::getGPSSatellites" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getGPSSatellites([])")
        
            // 开始调用
            val result = ref.getGPSSatellites()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::getNetworkType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getNetworkType([])")
        
            // 开始调用
            val result = ref.getNetworkType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::setNetworkType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setNetworkType([\"var1\":$var1])")
        
            // 开始调用
            ref.setNetworkType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::getNetUseTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getNetUseTime([])")
        
            // 开始调用
            val result = ref.getNetUseTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::setNetUseTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setNetUseTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setNetUseTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::setInstallHighDangerMockApp" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setInstallHighDangerMockApp([\"var1\":$var1])")
        
            // 开始调用
            ref.setInstallHighDangerMockApp(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::isInstalledHighDangerMockApp" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::isInstalledHighDangerMockApp([])")
        
            // 开始调用
            val result = ref.isInstalledHighDangerMockApp()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.location.AMapLocationQualityReport::setLocationMode" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationMode.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::setLocationMode([])")
        
            // 开始调用
            ref.setLocationMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.location.AMapLocationQualityReport::getAdviseMessage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.location.AMapLocationQualityReport
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.location.AMapLocationQualityReport@$refId::getAdviseMessage([])")
        
            // 开始调用
            val result = ref.getAdviseMessage()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.DistrictItem::getCitycode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::getCitycode([])")
        
            // 开始调用
            val result = ref.getCitycode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.DistrictItem::setCitycode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::setCitycode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCitycode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.DistrictItem::getAdcode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::getAdcode([])")
        
            // 开始调用
            val result = ref.getAdcode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.DistrictItem::setAdcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::setAdcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.DistrictItem::getPolyline" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::getPolyline([])")
        
            // 开始调用
            val result = ref.getPolyline()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.DistrictItem::setPolyline" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.location.DPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::setPolyline([])")
        
            // 开始调用
            ref.setPolyline(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.DistrictItem::getDistrictName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::getDistrictName([])")
        
            // 开始调用
            val result = ref.getDistrictName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.DistrictItem::setDistrictName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem@$refId::setDistrictName([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistrictName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.DistrictItem::getCreator" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.DistrictItem::getCreator([])")
        
            // 开始调用
            val result = com.amap.api.fence.DistrictItem.getCreator()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFenceClient::setActivateAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::setActivateAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setActivateAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::setGeoFenceListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::setGeoFenceListener([])")
        
            // 开始调用
            ref.setGeoFenceListener(object : com.amap.api.fence.GeoFenceListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.fence.GeoFenceClient::setGeoFenceListener::Callback")
        
                // 回调方法们
                override fun onGeoFenceCreateFinished(var1: List<com.amap.api.fence.GeoFence>, var2: Int, var3: String): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onGeoFenceCreateFinished([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.map { it.apply { HEAP[it.hashCode()] = it }.hashCode() }
                    val argvar2 = var2
                    val argvar3 = var3
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2,
                            "var3" to argvar3
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::addGeoFence" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.DPoint
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::addGeoFence([\"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.addGeoFence(var1, var2.toFloat(), var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::removeGeoFence" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::removeGeoFence([])")
        
            // 开始调用
            ref.removeGeoFence()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::getAllGeoFence" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::getAllGeoFence([])")
        
            // 开始调用
            val result = ref.getAllGeoFence()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFenceClient::setGeoFenceAble" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::setGeoFenceAble([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setGeoFenceAble(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::pauseGeoFence" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::pauseGeoFence([])")
        
            // 开始调用
            ref.pauseGeoFence()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::resumeGeoFence" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::resumeGeoFence([])")
        
            // 开始调用
            ref.resumeGeoFence()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceClient::isPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceClient
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceClient@$refId::isPause([])")
        
            // 开始调用
            val result = ref.isPause()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.fence.GeoFence }
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceListener@$refId::onGeoFenceCreateFinished([\"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.onGeoFenceCreateFinished(ArrayList(var1), var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getFenceId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getFenceId([])")
        
            // 开始调用
            val result = ref.getFenceId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setFenceId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setFenceId([\"var1\":$var1])")
        
            // 开始调用
            ref.setFenceId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getCustomId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getCustomId([])")
        
            // 开始调用
            val result = ref.getCustomId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setCustomId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setCustomId([\"var1\":$var1])")
        
            // 开始调用
            ref.setCustomId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getPendingIntentAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getPendingIntentAction([])")
        
            // 开始调用
            val result = ref.getPendingIntentAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setPendingIntentAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setPendingIntentAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setPendingIntentAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setType([\"var1\":$var1])")
        
            // 开始调用
            ref.setType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getPoiItem" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getPoiItem([])")
        
            // 开始调用
            val result = ref.getPoiItem()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFence::setPoiItem" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.fence.PoiItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setPoiItem([])")
        
            // 开始调用
            ref.setPoiItem(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getDistrictItemList" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getDistrictItemList([])")
        
            // 开始调用
            val result = ref.getDistrictItemList()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFence::setDistrictItemList" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.fence.DistrictItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setDistrictItemList([])")
        
            // 开始调用
            ref.setDistrictItemList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getPointList" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getPointList([])")
        
            // 开始调用
            val result = ref.getPointList()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFence::setPointList" to { registrar, args, methodResult ->
            // 参数
            val var1 = listOf<List<com.amap.api.location.DPoint>>()
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setPointList([])")
        
            // 开始调用
            ref.setPointList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getRadius" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getRadius([])")
        
            // 开始调用
            val result = ref.getRadius()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setRadius" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setRadius([\"var1\":$var1])")
        
            // 开始调用
            ref.setRadius(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getExpiration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getExpiration([])")
        
            // 开始调用
            val result = ref.getExpiration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setExpiration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setExpiration([\"var1\":$var1])")
        
            // 开始调用
            ref.setExpiration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getActivatesAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getActivatesAction([])")
        
            // 开始调用
            val result = ref.getActivatesAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setActivatesAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setActivatesAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setActivatesAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getStatus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getStatus([])")
        
            // 开始调用
            val result = ref.getStatus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setStatus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setStatus([\"var1\":$var1])")
        
            // 开始调用
            ref.setStatus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getEnterTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getEnterTime([])")
        
            // 开始调用
            val result = ref.getEnterTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setEnterTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setEnterTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setEnterTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFence::setCenter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.DPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setCenter([])")
        
            // 开始调用
            ref.setCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getMinDis2Center" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getMinDis2Center([])")
        
            // 开始调用
            val result = ref.getMinDis2Center()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setMinDis2Center" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setMinDis2Center([\"var1\":$var1])")
        
            // 开始调用
            ref.setMinDis2Center(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getMaxDis2Center" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getMaxDis2Center([])")
        
            // 开始调用
            val result = ref.getMaxDis2Center()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setMaxDis2Center" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setMaxDis2Center([\"var1\":$var1])")
        
            // 开始调用
            ref.setMaxDis2Center(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::isAble" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::isAble([])")
        
            // 开始调用
            val result = ref.isAble()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.GeoFence::setAble" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setAble([\"var1\":$var1])")
        
            // 开始调用
            ref.setAble(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::setCurrentLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.AMapLocation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::setCurrentLocation([])")
        
            // 开始调用
            ref.setCurrentLocation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFence::getCurrentLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFence
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFence@$refId::getCurrentLocation([])")
        
            // 开始调用
            val result = ref.getCurrentLocation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFenceManagerBase::setActivateAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::setActivateAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setActivateAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::setGeoFenceListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::setGeoFenceListener([])")
        
            // 开始调用
            ref.setGeoFenceListener(object : com.amap.api.fence.GeoFenceListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.fence.GeoFenceManagerBase::setGeoFenceListener::Callback")
        
                // 回调方法们
                override fun onGeoFenceCreateFinished(var1: List<com.amap.api.fence.GeoFence>, var2: Int, var3: String): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onGeoFenceCreateFinished([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.map { it.apply { HEAP[it.hashCode()] = it }.hashCode() }
                    val argvar2 = var2
                    val argvar3 = var3
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2,
                            "var3" to argvar3
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addRoundGeoFence" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.location.DPoint
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addRoundGeoFence([\"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.addRoundGeoFence(var1, var2.toFloat(), var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addPolygonGeoFence" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.location.DPoint }
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addPolygonGeoFence([\"var2\":$var2])")
        
            // 开始调用
            ref.addPolygonGeoFence(ArrayList(var1), var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addNearbyGeoFence" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // 引用参数
            val var3 = HEAP[args["var3"] as Int] as com.amap.api.location.DPoint
            // jsonable参数
            val var4 = args["var4"] as Double
            // jsonable参数
            val var5 = args["var5"] as Int
            // jsonable参数
            val var6 = args["var6"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addNearbyGeoFence([\"var1\":$var1, \"var2\":$var2, \"var4\":$var4, \"var5\":$var5, \"var6\":$var6])")
        
            // 开始调用
            ref.addNearbyGeoFence(var1, var2, var3, var4.toFloat(), var5, var6)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addKeywordGeoFence" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as String
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addKeywordGeoFence([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3, \"var4\":$var4, \"var5\":$var5])")
        
            // 开始调用
            ref.addKeywordGeoFence(var1, var2, var3, var4, var5)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::addDistrictGeoFence" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::addDistrictGeoFence([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.addDistrictGeoFence(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::removeGeoFence" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::removeGeoFence([])")
        
            // 开始调用
            ref.removeGeoFence()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::getAllGeoFence" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::getAllGeoFence([])")
        
            // 开始调用
            val result = ref.getAllGeoFence()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.fence.GeoFenceManagerBase::setGeoFenceAble" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::setGeoFenceAble([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.setGeoFenceAble(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::pauseGeoFence" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::pauseGeoFence([])")
        
            // 开始调用
            ref.pauseGeoFence()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::resumeGeoFence" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::resumeGeoFence([])")
        
            // 开始调用
            ref.resumeGeoFence()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.GeoFenceManagerBase::isPause" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.GeoFenceManagerBase
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.GeoFenceManagerBase@$refId::isPause([])")
        
            // 开始调用
            val result = ref.isPause()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::getLatitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getLatitude([])")
        
            // 开始调用
            val result = ref.getLatitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setLatitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setLatitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLatitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getLongitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getLongitude([])")
        
            // 开始调用
            val result = ref.getLongitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setLongitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setLongitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLongitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getPoiId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getPoiId([])")
        
            // 开始调用
            val result = ref.getPoiId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setPoiId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setPoiId([\"var1\":$var1])")
        
            // 开始调用
            ref.setPoiId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getPoiType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getPoiType([])")
        
            // 开始调用
            val result = ref.getPoiType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setPoiType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setPoiType([\"var1\":$var1])")
        
            // 开始调用
            ref.setPoiType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getTypeCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getTypeCode([])")
        
            // 开始调用
            val result = ref.getTypeCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setTypeCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setTypeCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setTypeCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getAddress([])")
        
            // 开始调用
            val result = ref.getAddress()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setAddress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setAddress([\"var1\":$var1])")
        
            // 开始调用
            ref.setAddress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getTel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getTel([])")
        
            // 开始调用
            val result = ref.getTel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setTel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setTel([\"var1\":$var1])")
        
            // 开始调用
            ref.setTel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getProvince" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getProvince([])")
        
            // 开始调用
            val result = ref.getProvince()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setProvince" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setProvince([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvince(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getAdname" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getAdname([])")
        
            // 开始调用
            val result = ref.getAdname()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::getPoiName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::getPoiName([])")
        
            // 开始调用
            val result = ref.getPoiName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.fence.PoiItem::setPoiName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setPoiName([\"var1\":$var1])")
        
            // 开始调用
            ref.setPoiName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::setAdname" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.fence.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem@$refId::setAdname([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdname(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.fence.PoiItem::getCreator" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.fence.PoiItem::getCreator([])")
        
            // 开始调用
            val result = com.amap.api.fence.PoiItem.getCreator()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::getStatus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::getStatus([])")
        
            // 开始调用
            val result = ref.getStatus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::setStatus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::setStatus([\"var1\":$var1])")
        
            // 开始调用
            ref.setStatus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::getDirection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::getDirection([])")
        
            // 开始调用
            val result = ref.getDirection()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::setDirection" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::setDirection([\"var1\":$var1])")
        
            // 开始调用
            ref.setDirection(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::getAngle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::getAngle([])")
        
            // 开始调用
            val result = ref.getAngle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::setAngle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::setAngle([\"var1\":$var1])")
        
            // 开始调用
            ref.setAngle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::getSpeed" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::getSpeed([])")
        
            // 开始调用
            val result = ref.getSpeed()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::setSpeed" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::setSpeed([\"var1\":$var1])")
        
            // 开始调用
            ref.setSpeed(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::getLcodes" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::getLcodes([])")
        
            // 开始调用
            val result = ref.getLcodes()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::setLcodes" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::setLcodes([\"var1\":$var1])")
        
            // 开始调用
            ref.setLcodes(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::getCoordinates" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::getCoordinates([])")
        
            // 开始调用
            val result = ref.getCoordinates()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.TrafficStatusInfo::setCoordinates" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusInfo@$refId::setCoordinates([])")
        
            // 开始调用
            ref.setCoordinates(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusResult::getDescription" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusResult@$refId::getDescription([])")
        
            // 开始调用
            val result = ref.getDescription()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusResult::setDescription" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusResult@$refId::setDescription([\"var1\":$var1])")
        
            // 开始调用
            ref.setDescription(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusResult::getEvaluation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusResult@$refId::getEvaluation([])")
        
            // 开始调用
            val result = ref.getEvaluation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.TrafficStatusResult::setEvaluation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusResult@$refId::setEvaluation([])")
        
            // 开始调用
            ref.setEvaluation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusResult::getRoads" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusResult@$refId::getRoads([])")
        
            // 开始调用
            val result = ref.getRoads()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.TrafficStatusResult::setRoads" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.traffic.TrafficStatusInfo }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusResult@$refId::setRoads([])")
        
            // 开始调用
            ref.setRoads(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficSearch::setTrafficSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficSearch@$refId::setTrafficSearchListener([])")
        
            // 开始调用
            ref.setTrafficSearchListener(object : com.amap.api.services.traffic.TrafficSearch.OnTrafficSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.traffic.TrafficSearch::setTrafficSearchListener::Callback")
        
                // 回调方法们
                override fun onRoadTrafficSearched(var1: com.amap.api.services.traffic.TrafficStatusResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onRoadTrafficSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.traffic.TrafficSearch.OnTrafficSearchListener::onRoadTrafficSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficSearch::loadTrafficByRoad" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficSearch@$refId::loadTrafficByRoad([])")
        
            // 开始调用
            val result = ref.loadTrafficByRoad(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.TrafficSearch::loadTrafficByRoadAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficSearch@$refId::loadTrafficByRoadAsyn([])")
        
            // 开始调用
            ref.loadTrafficByRoadAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficSearch::loadTrafficByCircle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficSearch@$refId::loadTrafficByCircle([])")
        
            // 开始调用
            val result = ref.loadTrafficByCircle(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.TrafficSearch::loadTrafficByCircleAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficSearch@$refId::loadTrafficByCircleAsyn([])")
        
            // 开始调用
            ref.loadTrafficByCircleAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficSearch.OnTrafficSearchListener::onRoadTrafficSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.TrafficStatusResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficSearch.OnTrafficSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficSearch.OnTrafficSearchListener@$refId::onRoadTrafficSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onRoadTrafficSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.RoadTrafficQuery::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.RoadTrafficQuery@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.RoadTrafficQuery::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.RoadTrafficQuery@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.RoadTrafficQuery::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.RoadTrafficQuery@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.RoadTrafficQuery::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.RoadTrafficQuery@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.RoadTrafficQuery::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.RoadTrafficQuery@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.CircleTrafficQuery::getCenterPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.CircleTrafficQuery@$refId::getCenterPoint([])")
        
            // 开始调用
            val result = ref.getCenterPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.CircleTrafficQuery::setCenterPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.CircleTrafficQuery@$refId::setCenterPoint([])")
        
            // 开始调用
            ref.setCenterPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.CircleTrafficQuery::getRadius" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.CircleTrafficQuery@$refId::getRadius([])")
        
            // 开始调用
            val result = ref.getRadius()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.CircleTrafficQuery::setRadius" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.CircleTrafficQuery@$refId::setRadius([\"var1\":$var1])")
        
            // 开始调用
            ref.setRadius(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.CircleTrafficQuery::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.CircleTrafficQuery@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::getExpedite" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::getExpedite([])")
        
            // 开始调用
            val result = ref.getExpedite()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::setExpedite" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::setExpedite([\"var1\":$var1])")
        
            // 开始调用
            ref.setExpedite(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::getCongested" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::getCongested([])")
        
            // 开始调用
            val result = ref.getCongested()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::setCongested" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::setCongested([\"var1\":$var1])")
        
            // 开始调用
            ref.setCongested(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::getBlocked" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::getBlocked([])")
        
            // 开始调用
            val result = ref.getBlocked()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::setBlocked" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::setBlocked([\"var1\":$var1])")
        
            // 开始调用
            ref.setBlocked(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::getUnknown" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::getUnknown([])")
        
            // 开始调用
            val result = ref.getUnknown()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::setUnknown" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::setUnknown([\"var1\":$var1])")
        
            // 开始调用
            ref.setUnknown(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::getStatus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::getStatus([])")
        
            // 开始调用
            val result = ref.getStatus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::setStatus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::setStatus([\"var1\":$var1])")
        
            // 开始调用
            ref.setStatus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::getDescription" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::getDescription([])")
        
            // 开始调用
            val result = ref.getDescription()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.traffic.TrafficStatusEvaluation::setDescription" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.traffic.TrafficStatusEvaluation
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.traffic.TrafficStatusEvaluation@$refId::setDescription([\"var1\":$var1])")
        
            // 开始调用
            ref.setDescription(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineSearch.OnBusLineSearchListener::onBusLineSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusLineResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineSearch.OnBusLineSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineSearch.OnBusLineSearchListener@$refId::onBusLineSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onBusLineSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationSearch.OnBusStationSearchListener::onBusStationSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusStationResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationSearch.OnBusStationSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationSearch.OnBusStationSearchListener@$refId::onBusStationSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onBusStationSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getBusLineName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getBusLineName([])")
        
            // 开始调用
            val result = ref.getBusLineName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setBusLineName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setBusLineName([\"var1\":$var1])")
        
            // 开始调用
            ref.setBusLineName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getBusLineType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getBusLineType([])")
        
            // 开始调用
            val result = ref.getBusLineType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setBusLineType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setBusLineType([\"var1\":$var1])")
        
            // 开始调用
            ref.setBusLineType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getCityCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getCityCode([])")
        
            // 开始调用
            val result = ref.getCityCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getDirectionsCoordinates" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getDirectionsCoordinates([])")
        
            // 开始调用
            val result = ref.getDirectionsCoordinates()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineItem::setDirectionsCoordinates" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setDirectionsCoordinates([])")
        
            // 开始调用
            ref.setDirectionsCoordinates(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getBounds" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getBounds([])")
        
            // 开始调用
            val result = ref.getBounds()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineItem::setBounds" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setBounds([])")
        
            // 开始调用
            ref.setBounds(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getBusLineId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getBusLineId([])")
        
            // 开始调用
            val result = ref.getBusLineId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setBusLineId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setBusLineId([\"var1\":$var1])")
        
            // 开始调用
            ref.setBusLineId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getOriginatingStation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getOriginatingStation([])")
        
            // 开始调用
            val result = ref.getOriginatingStation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setOriginatingStation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setOriginatingStation([\"var1\":$var1])")
        
            // 开始调用
            ref.setOriginatingStation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getTerminalStation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getTerminalStation([])")
        
            // 开始调用
            val result = ref.getTerminalStation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setTerminalStation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setTerminalStation([\"var1\":$var1])")
        
            // 开始调用
            ref.setTerminalStation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getBusCompany" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getBusCompany([])")
        
            // 开始调用
            val result = ref.getBusCompany()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setBusCompany" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setBusCompany([\"var1\":$var1])")
        
            // 开始调用
            ref.setBusCompany(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getBasicPrice" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getBasicPrice([])")
        
            // 开始调用
            val result = ref.getBasicPrice()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setBasicPrice" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setBasicPrice([\"var1\":$var1])")
        
            // 开始调用
            ref.setBasicPrice(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getTotalPrice" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getTotalPrice([])")
        
            // 开始调用
            val result = ref.getTotalPrice()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineItem::setTotalPrice" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setTotalPrice([\"var1\":$var1])")
        
            // 开始调用
            ref.setTotalPrice(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineItem::getBusStations" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::getBusStations([])")
        
            // 开始调用
            val result = ref.getBusStations()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineItem::setBusStations" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.busline.BusStationItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineItem@$refId::setBusStations([])")
        
            // 开始调用
            ref.setBusStations(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationResult::createPagedResult" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as com.amap.api.services.busline.BusStationQuery
            // jsonable参数
            val var1 = args["var1"] as Int
            // 列表参数
            val var2 = (args["var2"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.SuggestionCity }
            // jsonable参数
            val var3 = args["var3"] as List<String>
            // 列表参数
            val var4 = (args["var4"] as List<Int>).map { HEAP[it] as com.amap.api.services.busline.BusStationItem }
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationResult::createPagedResult([\"var1\":$var1, \"var3\":$var3])")
        
            // 开始调用
            val result = com.amap.api.services.busline.BusStationResult.createPagedResult(var0, var1, ArrayList(var2), ArrayList(var3), ArrayList(var4))
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationResult::getPageCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationResult@$refId::getPageCount([])")
        
            // 开始调用
            val result = ref.getPageCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationResult::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationResult@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationResult::getSearchSuggestionKeywords" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationResult@$refId::getSearchSuggestionKeywords([])")
        
            // 开始调用
            val result = ref.getSearchSuggestionKeywords()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationResult::getSearchSuggestionCities" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationResult@$refId::getSearchSuggestionCities([])")
        
            // 开始调用
            val result = ref.getSearchSuggestionCities()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationResult::getBusStations" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationResult@$refId::getBusStations([])")
        
            // 开始调用
            val result = ref.getBusStations()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationSearch::searchBusStation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationSearch@$refId::searchBusStation([])")
        
            // 开始调用
            val result = ref.searchBusStation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationSearch::setOnBusStationSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationSearch@$refId::setOnBusStationSearchListener([])")
        
            // 开始调用
            ref.setOnBusStationSearchListener(object : com.amap.api.services.busline.BusStationSearch.OnBusStationSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.busline.BusStationSearch::setOnBusStationSearchListener::Callback")
        
                // 回调方法们
                override fun onBusStationSearched(var1: com.amap.api.services.busline.BusStationResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onBusStationSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.busline.BusStationSearch.OnBusStationSearchListener::onBusStationSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationSearch::searchBusStationAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationSearch@$refId::searchBusStationAsyn([])")
        
            // 开始调用
            ref.searchBusStationAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusStationQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineSearch::searchBusLine" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineSearch@$refId::searchBusLine([])")
        
            // 开始调用
            val result = ref.searchBusLine()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineSearch::setOnBusLineSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineSearch@$refId::setOnBusLineSearchListener([])")
        
            // 开始调用
            ref.setOnBusLineSearchListener(object : com.amap.api.services.busline.BusLineSearch.OnBusLineSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.busline.BusLineSearch::setOnBusLineSearchListener::Callback")
        
                // 回调方法们
                override fun onBusLineSearched(var1: com.amap.api.services.busline.BusLineResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onBusLineSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.busline.BusLineSearch.OnBusLineSearchListener::onBusLineSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineSearch::searchBusLineAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineSearch@$refId::searchBusLineAsyn([])")
        
            // 开始调用
            ref.searchBusLineAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusLineQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineQuery::getCategory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::getCategory([])")
        
            // 开始调用
            val result = ref.getCategory()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineQuery::getQueryString" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::getQueryString([])")
        
            // 开始调用
            val result = ref.getQueryString()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineQuery::setQueryString" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::setQueryString([\"var1\":$var1])")
        
            // 开始调用
            ref.setQueryString(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineQuery::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineQuery::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineQuery::getPageSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::getPageSize([])")
        
            // 开始调用
            val result = ref.getPageSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineQuery::setPageSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::setPageSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineQuery::getPageNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::getPageNumber([])")
        
            // 开始调用
            val result = ref.getPageNumber()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineQuery::setPageNumber" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::setPageNumber([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageNumber(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineQuery::setCategory" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.services.busline.BusLineQuery.SearchType.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::setCategory([])")
        
            // 开始调用
            ref.setCategory(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusLineQuery::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineQuery::weakEquals" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusLineQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineQuery@$refId::weakEquals([])")
        
            // 开始调用
            val result = ref.weakEquals(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineResult::createPagedResult" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as com.amap.api.services.busline.BusLineQuery
            // jsonable参数
            val var1 = args["var1"] as Int
            // 列表参数
            val var2 = (args["var2"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.SuggestionCity }
            // jsonable参数
            val var3 = args["var3"] as List<String>
            // 列表参数
            val var4 = (args["var4"] as List<Int>).map { HEAP[it] as com.amap.api.services.busline.BusLineItem }
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineResult::createPagedResult([\"var1\":$var1, \"var3\":$var3])")
        
            // 开始调用
            val result = com.amap.api.services.busline.BusLineResult.createPagedResult(var0, var1, ArrayList(var2), ArrayList(var3), ArrayList(var4))
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineResult::getPageCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineResult@$refId::getPageCount([])")
        
            // 开始调用
            val result = ref.getPageCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineResult::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineResult@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineResult::getSearchSuggestionKeywords" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineResult@$refId::getSearchSuggestionKeywords([])")
        
            // 开始调用
            val result = ref.getSearchSuggestionKeywords()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusLineResult::getSearchSuggestionCities" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineResult@$refId::getSearchSuggestionCities([])")
        
            // 开始调用
            val result = ref.getSearchSuggestionCities()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusLineResult::getBusLines" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusLineResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusLineResult@$refId::getBusLines([])")
        
            // 开始调用
            val result = ref.getBusLines()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationItem::getBusStationId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::getBusStationId([])")
        
            // 开始调用
            val result = ref.getBusStationId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationItem::setBusStationId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::setBusStationId([\"var1\":$var1])")
        
            // 开始调用
            ref.setBusStationId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationItem::getBusStationName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::getBusStationName([])")
        
            // 开始调用
            val result = ref.getBusStationName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationItem::setBusStationName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::setBusStationName([\"var1\":$var1])")
        
            // 开始调用
            ref.setBusStationName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationItem::getLatLonPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::getLatLonPoint([])")
        
            // 开始调用
            val result = ref.getLatLonPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationItem::setLatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::setLatLonPoint([])")
        
            // 开始调用
            ref.setLatLonPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationItem::getCityCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::getCityCode([])")
        
            // 开始调用
            val result = ref.getCityCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationItem::setCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::setCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationItem::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationItem::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationItem::getBusLineItems" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::getBusLineItems([])")
        
            // 开始调用
            val result = ref.getBusLineItems()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationItem::setBusLineItems" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.busline.BusLineItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationItem@$refId::setBusLineItems([])")
        
            // 开始调用
            ref.setBusLineItems(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationQuery::getQueryString" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::getQueryString([])")
        
            // 开始调用
            val result = ref.getQueryString()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationQuery::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationQuery::getPageSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::getPageSize([])")
        
            // 开始调用
            val result = ref.getPageSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationQuery::getPageNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::getPageNumber([])")
        
            // 开始调用
            val result = ref.getPageNumber()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.busline.BusStationQuery::setQueryString" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::setQueryString([\"var1\":$var1])")
        
            // 开始调用
            ref.setQueryString(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationQuery::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationQuery::setPageSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::setPageSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationQuery::setPageNumber" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::setPageNumber([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageNumber(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.busline.BusStationQuery::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.busline.BusStationQuery::weakEquals" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusStationQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.busline.BusStationQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.busline.BusStationQuery@$refId::weakEquals([])")
        
            // 开始调用
            val result = ref.weakEquals(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.AMapException::getErrorLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.AMapException
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.AMapException@$refId::getErrorLevel([])")
        
            // 开始调用
            val result = ref.getErrorLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.AMapException::getErrorType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.AMapException
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.AMapException@$refId::getErrorType([])")
        
            // 开始调用
            val result = ref.getErrorType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.AMapException::getErrorMessage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.AMapException
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.AMapException@$refId::getErrorMessage([])")
        
            // 开始调用
            val result = ref.getErrorMessage()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.AMapException::getErrorCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.AMapException
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.AMapException@$refId::getErrorCode([])")
        
            // 开始调用
            val result = ref.getErrorCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.ServiceSettings::getConnectionTimeOut" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::getConnectionTimeOut([])")
        
            // 开始调用
            val result = ref.getConnectionTimeOut()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.ServiceSettings::getSoTimeOut" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::getSoTimeOut([])")
        
            // 开始调用
            val result = ref.getSoTimeOut()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.ServiceSettings::setConnectionTimeOut" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::setConnectionTimeOut([\"var1\":$var1])")
        
            // 开始调用
            ref.setConnectionTimeOut(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.ServiceSettings::setSoTimeOut" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::setSoTimeOut([\"var1\":$var1])")
        
            // 开始调用
            ref.setSoTimeOut(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.ServiceSettings::getInstance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings::getInstance([])")
        
            // 开始调用
            val result = com.amap.api.services.core.ServiceSettings.getInstance()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.ServiceSettings::setLanguage" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::setLanguage([\"var1\":$var1])")
        
            // 开始调用
            ref.setLanguage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.ServiceSettings::setProtocol" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::setProtocol([\"var1\":$var1])")
        
            // 开始调用
            ref.setProtocol(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.ServiceSettings::getLanguage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::getLanguage([])")
        
            // 开始调用
            val result = ref.getLanguage()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.ServiceSettings::getProtocol" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::getProtocol([])")
        
            // 开始调用
            val result = ref.getProtocol()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.ServiceSettings::setApiKey" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::setApiKey([\"var1\":$var1])")
        
            // 开始调用
            ref.setApiKey(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.ServiceSettings::destroyInnerAsynThreadPool" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.ServiceSettings
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.ServiceSettings@$refId::destroyInnerAsynThreadPool([])")
        
            // 开始调用
            ref.destroyInnerAsynThreadPool()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.SearchUtils::getSHA1" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SearchUtils::getSHA1([])")
        
            // 开始调用
            val result = com.amap.api.services.core.SearchUtils.getSHA1(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.SearchUtils::getPkgName" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SearchUtils::getPkgName([])")
        
            // 开始调用
            val result = com.amap.api.services.core.SearchUtils.getPkgName(var0)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.SearchUtils::getVersion" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SearchUtils::getVersion([])")
        
            // 开始调用
            val result = com.amap.api.services.core.SearchUtils.getVersion()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.LatLonSharePoint::getSharePointName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.LatLonSharePoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.LatLonSharePoint@$refId::getSharePointName([])")
        
            // 开始调用
            val result = ref.getSharePointName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.LatLonSharePoint::setSharePointName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.LatLonSharePoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.LatLonSharePoint@$refId::setSharePointName([\"var1\":$var1])")
        
            // 开始调用
            ref.setSharePointName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.LatLonPoint::getLongitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.LatLonPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.LatLonPoint@$refId::getLongitude([])")
        
            // 开始调用
            val result = ref.getLongitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.LatLonPoint::setLongitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.LatLonPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.LatLonPoint@$refId::setLongitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLongitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.LatLonPoint::getLatitude" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.LatLonPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.LatLonPoint@$refId::getLatitude([])")
        
            // 开始调用
            val result = ref.getLatitude()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.LatLonPoint::setLatitude" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.LatLonPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.LatLonPoint@$refId::setLatitude([\"var1\":$var1])")
        
            // 开始调用
            ref.setLatitude(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.LatLonPoint::copy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.LatLonPoint
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.LatLonPoint@$refId::copy([])")
        
            // 开始调用
            val result = ref.copy()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.PoiItem::getBusinessArea" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getBusinessArea([])")
        
            // 开始调用
            val result = ref.getBusinessArea()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setBusinessArea" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setBusinessArea([\"var1\":$var1])")
        
            // 开始调用
            ref.setBusinessArea(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getAdName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getAdName([])")
        
            // 开始调用
            val result = ref.getAdName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setAdName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setAdName([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getCityName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getCityName([])")
        
            // 开始调用
            val result = ref.getCityName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setCityName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setCityName([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getProvinceName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getProvinceName([])")
        
            // 开始调用
            val result = ref.getProvinceName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setProvinceName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setProvinceName([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvinceName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getTypeDes" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getTypeDes([])")
        
            // 开始调用
            val result = ref.getTypeDes()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setTypeDes" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setTypeDes([\"var1\":$var1])")
        
            // 开始调用
            ref.setTypeDes(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getTel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getTel([])")
        
            // 开始调用
            val result = ref.getTel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setTel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setTel([\"var1\":$var1])")
        
            // 开始调用
            ref.setTel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getPoiId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getPoiId([])")
        
            // 开始调用
            val result = ref.getPoiId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::getLatLonPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getLatLonPoint([])")
        
            // 开始调用
            val result = ref.getLatLonPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.PoiItem::getCityCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getCityCode([])")
        
            // 开始调用
            val result = ref.getCityCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getEnter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getEnter([])")
        
            // 开始调用
            val result = ref.getEnter()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.PoiItem::setEnter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setEnter([])")
        
            // 开始调用
            ref.setEnter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getExit" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getExit([])")
        
            // 开始调用
            val result = ref.getExit()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.PoiItem::setExit" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setExit([])")
        
            // 开始调用
            ref.setExit(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getWebsite" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getWebsite([])")
        
            // 开始调用
            val result = ref.getWebsite()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setWebsite" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setWebsite([\"var1\":$var1])")
        
            // 开始调用
            ref.setWebsite(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getPostcode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getPostcode([])")
        
            // 开始调用
            val result = ref.getPostcode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setPostcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setPostcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setPostcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getEmail" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getEmail([])")
        
            // 开始调用
            val result = ref.getEmail()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setEmail" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setEmail([\"var1\":$var1])")
        
            // 开始调用
            ref.setEmail(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getDirection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getDirection([])")
        
            // 开始调用
            val result = ref.getDirection()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setDirection" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setDirection([\"var1\":$var1])")
        
            // 开始调用
            ref.setDirection(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::setIndoorMap" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setIndoorMap([\"var1\":$var1])")
        
            // 开始调用
            ref.setIndoorMap(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::isIndoorMap" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::isIndoorMap([])")
        
            // 开始调用
            val result = ref.isIndoorMap()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setProvinceCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setProvinceCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvinceCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getProvinceCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getProvinceCode([])")
        
            // 开始调用
            val result = ref.getProvinceCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setParkingType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setParkingType([\"var1\":$var1])")
        
            // 开始调用
            ref.setParkingType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getParkingType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getParkingType([])")
        
            // 开始调用
            val result = ref.getParkingType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setSubPois" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.poisearch.SubPoiItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setSubPois([])")
        
            // 开始调用
            ref.setSubPois(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getSubPois" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getSubPois([])")
        
            // 开始调用
            val result = ref.getSubPois()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.PoiItem::getIndoorData" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getIndoorData([])")
        
            // 开始调用
            val result = ref.getIndoorData()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.PoiItem::setIndoorDate" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.IndoorData
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setIndoorDate([])")
        
            // 开始调用
            ref.setIndoorDate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getPhotos" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getPhotos([])")
        
            // 开始调用
            val result = ref.getPhotos()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.PoiItem::setPhotos" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.poisearch.Photo }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setPhotos([])")
        
            // 开始调用
            ref.setPhotos(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getPoiExtension" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getPoiExtension([])")
        
            // 开始调用
            val result = ref.getPoiExtension()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.core.PoiItem::setPoiExtension" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.PoiItemExtension
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setPoiExtension([])")
        
            // 开始调用
            ref.setPoiExtension(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getTypeCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getTypeCode([])")
        
            // 开始调用
            val result = ref.getTypeCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setTypeCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setTypeCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setTypeCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.PoiItem::getShopID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::getShopID([])")
        
            // 开始调用
            val result = ref.getShopID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.PoiItem::setShopID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.PoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.PoiItem@$refId::setShopID([\"var1\":$var1])")
        
            // 开始调用
            ref.setShopID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.SuggestionCity::getCityName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.SuggestionCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SuggestionCity@$refId::getCityName([])")
        
            // 开始调用
            val result = ref.getCityName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.SuggestionCity::setCityName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.SuggestionCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SuggestionCity@$refId::setCityName([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.SuggestionCity::getCityCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.SuggestionCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SuggestionCity@$refId::getCityCode([])")
        
            // 开始调用
            val result = ref.getCityCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.SuggestionCity::setCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.SuggestionCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SuggestionCity@$refId::setCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.SuggestionCity::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.SuggestionCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SuggestionCity@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.SuggestionCity::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.SuggestionCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SuggestionCity@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.core.SuggestionCity::getSuggestionNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.SuggestionCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SuggestionCity@$refId::getSuggestionNum([])")
        
            // 开始调用
            val result = ref.getSuggestionNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.core.SuggestionCity::setSuggestionNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.core.SuggestionCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.core.SuggestionCity@$refId::setSuggestionNum([\"var1\":$var1])")
        
            // 开始调用
            ref.setSuggestionNum(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.Photo::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.Photo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.Photo@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.Photo::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.Photo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.Photo@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.Photo::getUrl" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.Photo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.Photo@$refId::getUrl([])")
        
            // 开始调用
            val result = ref.getUrl()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.Photo::setUrl" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.Photo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.Photo@$refId::setUrl([\"var1\":$var1])")
        
            // 开始调用
            ref.setUrl(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.SubPoiItem::getPoiId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::getPoiId([])")
        
            // 开始调用
            val result = ref.getPoiId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.SubPoiItem::setPoiId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::setPoiId([\"var1\":$var1])")
        
            // 开始调用
            ref.setPoiId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.SubPoiItem::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.SubPoiItem::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.SubPoiItem::getSubName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::getSubName([])")
        
            // 开始调用
            val result = ref.getSubName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.SubPoiItem::setSubName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::setSubName([\"var1\":$var1])")
        
            // 开始调用
            ref.setSubName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.SubPoiItem::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.SubPoiItem::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.SubPoiItem::getLatLonPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::getLatLonPoint([])")
        
            // 开始调用
            val result = ref.getLatLonPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.SubPoiItem::setLatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::setLatLonPoint([])")
        
            // 开始调用
            ref.setLatLonPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.SubPoiItem::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.SubPoiItem::setSnippet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::setSnippet([\"var1\":$var1])")
        
            // 开始调用
            ref.setSnippet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.SubPoiItem::getSubTypeDes" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::getSubTypeDes([])")
        
            // 开始调用
            val result = ref.getSubTypeDes()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.SubPoiItem::setSubTypeDes" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.SubPoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.SubPoiItem@$refId::setSubTypeDes([\"var1\":$var1])")
        
            // 开始调用
            ref.setSubTypeDes(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener::onPoiSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.PoiResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener@$refId::onPoiSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onPoiSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener::onPoiItemSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.PoiItem
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener@$refId::onPoiItemSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onPoiItemSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiItemExtension::getOpentime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiItemExtension
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiItemExtension@$refId::getOpentime([])")
        
            // 开始调用
            val result = ref.getOpentime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiItemExtension::getmRating" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiItemExtension
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiItemExtension@$refId::getmRating([])")
        
            // 开始调用
            val result = ref.getmRating()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.SearchBound::getLowerLeft" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.SearchBound@$refId::getLowerLeft([])")
        
            // 开始调用
            val result = ref.getLowerLeft()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch.SearchBound::getUpperRight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.SearchBound@$refId::getUpperRight([])")
        
            // 开始调用
            val result = ref.getUpperRight()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch.SearchBound::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.SearchBound@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch.SearchBound::getRange" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.SearchBound@$refId::getRange([])")
        
            // 开始调用
            val result = ref.getRange()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.SearchBound::getShape" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.SearchBound@$refId::getShape([])")
        
            // 开始调用
            val result = ref.getShape()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.SearchBound::isDistanceSort" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.SearchBound@$refId::isDistanceSort([])")
        
            // 开始调用
            val result = ref.isDistanceSort()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.SearchBound::getPolyGonList" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.SearchBound@$refId::getPolyGonList([])")
        
            // 开始调用
            val result = ref.getPolyGonList()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiResult::createPagedResult" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as com.amap.api.services.poisearch.PoiSearch.Query
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.PoiSearch.SearchBound
            // jsonable参数
            val var2 = args["var2"] as List<String>
            // 列表参数
            val var3 = (args["var3"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.SuggestionCity }
            // jsonable参数
            val var4 = args["var4"] as Int
            // jsonable参数
            val var5 = args["var5"] as Int
            // 列表参数
            val var6 = (args["var6"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.PoiItem }
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiResult::createPagedResult([\"var2\":$var2, \"var4\":$var4, \"var5\":$var5])")
        
            // 开始调用
            val result = com.amap.api.services.poisearch.PoiResult.createPagedResult(var0, var1, ArrayList(var2), ArrayList(var3), var4, var5, ArrayList(var6))
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiResult::getPageCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiResult@$refId::getPageCount([])")
        
            // 开始调用
            val result = ref.getPageCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiResult::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiResult@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiResult::getBound" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiResult@$refId::getBound([])")
        
            // 开始调用
            val result = ref.getBound()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiResult::getPois" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiResult@$refId::getPois([])")
        
            // 开始调用
            val result = ref.getPois()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiResult::getSearchSuggestionKeywords" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiResult@$refId::getSearchSuggestionKeywords([])")
        
            // 开始调用
            val result = ref.getSearchSuggestionKeywords()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiResult::getSearchSuggestionCitys" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiResult@$refId::getSearchSuggestionCitys([])")
        
            // 开始调用
            val result = ref.getSearchSuggestionCitys()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch::setOnPoiSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::setOnPoiSearchListener([])")
        
            // 开始调用
            ref.setOnPoiSearchListener(object : com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.poisearch.PoiSearch::setOnPoiSearchListener::Callback")
        
                // 回调方法们
                override fun onPoiSearched(var1: com.amap.api.services.poisearch.PoiResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPoiSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener::onPoiSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onPoiItemSearched(var1: com.amap.api.services.core.PoiItem, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPoiItemSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener::onPoiItemSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch::setLanguage" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::setLanguage([\"var1\":$var1])")
        
            // 开始调用
            ref.setLanguage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch::getLanguage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::getLanguage([])")
        
            // 开始调用
            val result = ref.getLanguage()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch::searchPOI" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::searchPOI([])")
        
            // 开始调用
            val result = ref.searchPOI()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch::searchPOIAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::searchPOIAsyn([])")
        
            // 开始调用
            ref.searchPOIAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch::searchPOIId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::searchPOIId([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.searchPOIId(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch::searchPOIIdAsyn" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::searchPOIIdAsyn([\"var1\":$var1])")
        
            // 开始调用
            ref.searchPOIIdAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch::setBound" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::setBound([])")
        
            // 开始调用
            ref.setBound(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch::getBound" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch@$refId::getBound([])")
        
            // 开始调用
            val result = ref.getBound()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::getBuilding" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::getBuilding([])")
        
            // 开始调用
            val result = ref.getBuilding()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::setBuilding" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::setBuilding([\"var1\":$var1])")
        
            // 开始调用
            ref.setBuilding(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::getQueryString" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::getQueryString([])")
        
            // 开始调用
            val result = ref.getQueryString()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::setQueryLanguage" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::setQueryLanguage([\"var1\":$var1])")
        
            // 开始调用
            ref.setQueryLanguage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::getCategory" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::getCategory([])")
        
            // 开始调用
            val result = ref.getCategory()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::getPageNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::getPageNum([])")
        
            // 开始调用
            val result = ref.getPageNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::setPageNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::setPageNum([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageNum(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::setPageSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::setPageSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::getPageSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::getPageSize([])")
        
            // 开始调用
            val result = ref.getPageSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::setCityLimit" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::setCityLimit([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityLimit(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::getCityLimit" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::getCityLimit([])")
        
            // 开始调用
            val result = ref.getCityLimit()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::requireSubPois" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::requireSubPois([\"var1\":$var1])")
        
            // 开始调用
            ref.requireSubPois(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::isRequireSubPois" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::isRequireSubPois([])")
        
            // 开始调用
            val result = ref.isRequireSubPois()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::isDistanceSort" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::isDistanceSort([])")
        
            // 开始调用
            val result = ref.isDistanceSort()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::setDistanceSort" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::setDistanceSort([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistanceSort(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::getLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::getLocation([])")
        
            // 开始调用
            val result = ref.getLocation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::setLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::setLocation([])")
        
            // 开始调用
            ref.setLocation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.PoiSearch.Query::queryEquals" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.PoiSearch.Query@$refId::queryEquals([])")
        
            // 开始调用
            val result = ref.queryEquals(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.IndoorData::getPoiId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.IndoorData
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.IndoorData@$refId::getPoiId([])")
        
            // 开始调用
            val result = ref.getPoiId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.IndoorData::setPoiId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.IndoorData
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.IndoorData@$refId::setPoiId([\"var1\":$var1])")
        
            // 开始调用
            ref.setPoiId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.IndoorData::getFloor" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.IndoorData
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.IndoorData@$refId::getFloor([])")
        
            // 开始调用
            val result = ref.getFloor()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.IndoorData::setFloor" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.IndoorData
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.IndoorData@$refId::setFloor([\"var1\":$var1])")
        
            // 开始调用
            ref.setFloor(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.poisearch.IndoorData::getFloorName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.IndoorData
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.IndoorData@$refId::getFloorName([])")
        
            // 开始调用
            val result = ref.getFloorName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.poisearch.IndoorData::setFloorName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.poisearch.IndoorData
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.poisearch.IndoorData@$refId::setFloorName([\"var1\":$var1])")
        
            // 开始调用
            ref.setFloorName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.Railway::getID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Railway
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Railway@$refId::getID([])")
        
            // 开始调用
            val result = ref.getID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.Railway::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Railway
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Railway@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.Railway::setID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Railway
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Railway@$refId::setID([\"var1\":$var1])")
        
            // 开始调用
            ref.setID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.Railway::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Railway
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Railway@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusPath::getCost" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::getCost([])")
        
            // 开始调用
            val result = ref.getCost()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.BusPath::setCost" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::setCost([\"var1\":$var1])")
        
            // 开始调用
            ref.setCost(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusPath::isNightBus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::isNightBus([])")
        
            // 开始调用
            val result = ref.isNightBus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.BusPath::setNightBus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::setNightBus([\"var1\":$var1])")
        
            // 开始调用
            ref.setNightBus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusPath::getWalkDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::getWalkDistance([])")
        
            // 开始调用
            val result = ref.getWalkDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.BusPath::setWalkDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::setWalkDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setWalkDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusPath::getBusDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::getBusDistance([])")
        
            // 开始调用
            val result = ref.getBusDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.BusPath::setBusDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::setBusDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setBusDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusPath::getSteps" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::getSteps([])")
        
            // 开始调用
            val result = ref.getSteps()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusPath::setSteps" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.BusStep }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusPath@$refId::setSteps([])")
        
            // 开始调用
            ref.setSteps(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveRoutePlanResult::getPaths" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRoutePlanResult@$refId::getPaths([])")
        
            // 开始调用
            val result = ref.getPaths()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DriveRoutePlanResult::setPaths" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.DrivePlanPath }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRoutePlanResult@$refId::setPaths([])")
        
            // 开始调用
            ref.setPaths(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveRoutePlanResult::getTimeInfos" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRoutePlanResult@$refId::getTimeInfos([])")
        
            // 开始调用
            val result = ref.getTimeInfos()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DriveRoutePlanResult::setTimeInfos" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.TimeInfo }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRoutePlanResult@$refId::setTimeInfos([])")
        
            // 开始调用
            ref.setTimeInfos(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveRoutePlanResult::setDrivePlanQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRoutePlanResult@$refId::setDrivePlanQuery([])")
        
            // 开始调用
            ref.setDrivePlanQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::setMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::setMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::setTruckSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::setTruckSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setTruckSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::setTruckHeight" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::setTruckHeight([\"var1\":$var1])")
        
            // 开始调用
            ref.setTruckHeight(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::setTruckWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::setTruckWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setTruckWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::setTruckLoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::setTruckLoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setTruckLoad(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::setTruckWeight" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::setTruckWeight([\"var1\":$var1])")
        
            // 开始调用
            ref.setTruckWeight(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::setTruckAxis" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::setTruckAxis([\"var1\":$var1])")
        
            // 开始调用
            ref.setTruckAxis(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getFromAndTo([])")
        
            // 开始调用
            val result = ref.getFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getMode([])")
        
            // 开始调用
            val result = ref.getMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::hasPassPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::hasPassPoint([])")
        
            // 开始调用
            val result = ref.hasPassPoint()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getPassedPointStr" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getPassedPointStr([])")
        
            // 开始调用
            val result = ref.getPassedPointStr()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getTruckSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getTruckSize([])")
        
            // 开始调用
            val result = ref.getTruckSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getTruckHeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getTruckHeight([])")
        
            // 开始调用
            val result = ref.getTruckHeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getTruckWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getTruckWidth([])")
        
            // 开始调用
            val result = ref.getTruckWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getTruckLoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getTruckLoad([])")
        
            // 开始调用
            val result = ref.getTruckLoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getTruckWeight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getTruckWeight([])")
        
            // 开始调用
            val result = ref.getTruckWeight()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.TruckRouteQuery::getTruckAxis" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.TruckRouteQuery@$refId::getTruckAxis([])")
        
            // 开始调用
            val result = ref.getTruckAxis()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TMC::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TMC
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TMC@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TMC::getStatus" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TMC
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TMC@$refId::getStatus([])")
        
            // 开始调用
            val result = ref.getStatus()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TMC::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TMC
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TMC@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TMC::setStatus" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TMC
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TMC@$refId::setStatus([\"var1\":$var1])")
        
            // 开始调用
            ref.setStatus(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TMC::getPolyline" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TMC
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TMC@$refId::getPolyline([])")
        
            // 开始调用
            val result = ref.getPolyline()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TMC::setPolyline" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TMC
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TMC@$refId::setPolyline([])")
        
            // 开始调用
            ref.setPolyline(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteBusWalkItem::getOrigin" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusWalkItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusWalkItem@$refId::getOrigin([])")
        
            // 开始调用
            val result = ref.getOrigin()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteBusWalkItem::setOrigin" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusWalkItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusWalkItem@$refId::setOrigin([])")
        
            // 开始调用
            ref.setOrigin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteBusWalkItem::getDestination" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusWalkItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusWalkItem@$refId::getDestination([])")
        
            // 开始调用
            val result = ref.getDestination()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteBusWalkItem::setDestination" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusWalkItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusWalkItem@$refId::setDestination([])")
        
            // 开始调用
            ref.setDestination(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteResult::getStartPos" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteResult@$refId::getStartPos([])")
        
            // 开始调用
            val result = ref.getStartPos()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteResult::setStartPos" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteResult@$refId::setStartPos([])")
        
            // 开始调用
            ref.setStartPos(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteResult::getTargetPos" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteResult@$refId::getTargetPos([])")
        
            // 开始调用
            val result = ref.getTargetPos()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteResult::setTargetPos" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteResult@$refId::setTargetPos([])")
        
            // 开始调用
            ref.setTargetPos(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::setRouteSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::setRouteSearchListener([])")
        
            // 开始调用
            ref.setRouteSearchListener(object : com.amap.api.services.route.RouteSearch.OnRouteSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.route.RouteSearch::setRouteSearchListener::Callback")
        
                // 回调方法们
                override fun onBusRouteSearched(var1: com.amap.api.services.route.BusRouteResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onBusRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onBusRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onDriveRouteSearched(var1: com.amap.api.services.route.DriveRouteResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDriveRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onDriveRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onWalkRouteSearched(var1: com.amap.api.services.route.WalkRouteResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onWalkRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onWalkRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onRideRouteSearched(var1: com.amap.api.services.route.RideRouteResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onRideRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onRideRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::setOnTruckRouteSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::setOnTruckRouteSearchListener([])")
        
            // 开始调用
            ref.setOnTruckRouteSearchListener(object : com.amap.api.services.route.RouteSearch.OnTruckRouteSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.route.RouteSearch::setOnTruckRouteSearchListener::Callback")
        
                // 回调方法们
                override fun onTruckRouteSearched(var1: com.amap.api.services.route.TruckRouteRestult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onTruckRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnTruckRouteSearchListener::onTruckRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::setOnRoutePlanSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::setOnRoutePlanSearchListener([])")
        
            // 开始调用
            ref.setOnRoutePlanSearchListener(object : com.amap.api.services.route.RouteSearch.OnRoutePlanSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.route.RouteSearch::setOnRoutePlanSearchListener::Callback")
        
                // 回调方法们
                override fun onDriveRoutePlanSearched(var1: com.amap.api.services.route.DriveRoutePlanResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDriveRoutePlanSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRoutePlanSearchListener::onDriveRoutePlanSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::calculateWalkRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.WalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateWalkRoute([])")
        
            // 开始调用
            val result = ref.calculateWalkRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch::calculateWalkRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.WalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateWalkRouteAsyn([])")
        
            // 开始调用
            ref.calculateWalkRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::calculateBusRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateBusRoute([])")
        
            // 开始调用
            val result = ref.calculateBusRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch::calculateBusRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateBusRouteAsyn([])")
        
            // 开始调用
            ref.calculateBusRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::calculateDriveRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateDriveRoute([])")
        
            // 开始调用
            val result = ref.calculateDriveRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch::calculateDriveRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateDriveRouteAsyn([])")
        
            // 开始调用
            ref.calculateDriveRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::calculateRideRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.RideRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateRideRouteAsyn([])")
        
            // 开始调用
            ref.calculateRideRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::calculateRideRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.RideRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateRideRoute([])")
        
            // 开始调用
            val result = ref.calculateRideRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch::calculateTruckRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateTruckRoute([])")
        
            // 开始调用
            val result = ref.calculateTruckRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch::calculateTruckRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateTruckRouteAsyn([])")
        
            // 开始调用
            ref.calculateTruckRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch::calculateDrivePlan" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateDrivePlan([])")
        
            // 开始调用
            val result = ref.calculateDrivePlan(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch::calculateDrivePlanAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch@$refId::calculateDrivePlanAsyn([])")
        
            // 开始调用
            ref.calculateDrivePlanAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusStep::getWalk" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::getWalk([])")
        
            // 开始调用
            val result = ref.getWalk()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusStep::setWalk" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteBusWalkItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::setWalk([])")
        
            // 开始调用
            ref.setWalk(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusStep::getBusLines" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::getBusLines([])")
        
            // 开始调用
            val result = ref.getBusLines()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusStep::setBusLines" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.RouteBusLineItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::setBusLines([])")
        
            // 开始调用
            ref.setBusLines(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusStep::getEntrance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::getEntrance([])")
        
            // 开始调用
            val result = ref.getEntrance()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusStep::setEntrance" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.Doorway
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::setEntrance([])")
        
            // 开始调用
            ref.setEntrance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusStep::getExit" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::getExit([])")
        
            // 开始调用
            val result = ref.getExit()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusStep::setExit" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.Doorway
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::setExit([])")
        
            // 开始调用
            ref.setExit(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusStep::getRailway" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::getRailway([])")
        
            // 开始调用
            val result = ref.getRailway()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusStep::setRailway" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteRailwayItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::setRailway([])")
        
            // 开始调用
            ref.setRailway(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusStep::getTaxi" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::getTaxi([])")
        
            // 开始调用
            val result = ref.getTaxi()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusStep::setTaxi" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.TaxiItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusStep@$refId::setTaxi([])")
        
            // 开始调用
            ref.setTaxi(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TaxiItem::getOrigin" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::getOrigin([])")
        
            // 开始调用
            val result = ref.getOrigin()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TaxiItem::getDestination" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::getDestination([])")
        
            // 开始调用
            val result = ref.getDestination()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TaxiItem::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TaxiItem::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TaxiItem::getmSname" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::getmSname([])")
        
            // 开始调用
            val result = ref.getmSname()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TaxiItem::getmTname" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::getmTname([])")
        
            // 开始调用
            val result = ref.getmTname()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TaxiItem::setOrigin" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::setOrigin([])")
        
            // 开始调用
            ref.setOrigin(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TaxiItem::setDestination" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::setDestination([])")
        
            // 开始调用
            ref.setDestination(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TaxiItem::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TaxiItem::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TaxiItem::setSname" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::setSname([\"var1\":$var1])")
        
            // 开始调用
            ref.setSname(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TaxiItem::setTname" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TaxiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TaxiItem@$refId::setTname([\"var1\":$var1])")
        
            // 开始调用
            ref.setTname(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusRouteResult::getTaxiCost" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusRouteResult@$refId::getTaxiCost([])")
        
            // 开始调用
            val result = ref.getTaxiCost()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.BusRouteResult::setTaxiCost" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusRouteResult@$refId::setTaxiCost([\"var1\":$var1])")
        
            // 开始调用
            ref.setTaxiCost(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusRouteResult::getPaths" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusRouteResult@$refId::getPaths([])")
        
            // 开始调用
            val result = ref.getPaths()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusRouteResult::setPaths" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.BusPath }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusRouteResult@$refId::setPaths([])")
        
            // 开始调用
            ref.setPaths(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.BusRouteResult::getBusQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusRouteResult@$refId::getBusQuery([])")
        
            // 开始调用
            val result = ref.getBusQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.BusRouteResult::setBusQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.BusRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.BusRouteResult@$refId::setBusQuery([])")
        
            // 开始调用
            ref.setBusQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RoutePlanResult::getStartPos" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RoutePlanResult@$refId::getStartPos([])")
        
            // 开始调用
            val result = ref.getStartPos()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RoutePlanResult::setStartPos" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RoutePlanResult@$refId::setStartPos([])")
        
            // 开始调用
            ref.setStartPos(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RoutePlanResult::getTargetPos" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RoutePlanResult@$refId::getTargetPos([])")
        
            // 开始调用
            val result = ref.getTargetPos()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RoutePlanResult::setTargetPos" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RoutePlanResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RoutePlanResult@$refId::setTargetPos([])")
        
            // 开始调用
            ref.setTargetPos(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceSearch.OnDistanceSearchListener::onDistanceSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.DistanceResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch.OnDistanceSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch.OnDistanceSearchListener@$refId::onDistanceSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onDistanceSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwaySpace::getCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwaySpace
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwaySpace@$refId::getCode([])")
        
            // 开始调用
            val result = ref.getCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RailwaySpace::getCost" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwaySpace
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwaySpace@$refId::getCost([])")
        
            // 开始调用
            val result = ref.getCost()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckRouteRestult::setTruckQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckRouteRestult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckRouteRestult@$refId::setTruckQuery([])")
        
            // 开始调用
            ref.setTruckQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckRouteRestult::setPaths" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.TruckPath }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckRouteRestult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckRouteRestult@$refId::setPaths([])")
        
            // 开始调用
            ref.setPaths(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckRouteRestult::setStartPos" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckRouteRestult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckRouteRestult@$refId::setStartPos([])")
        
            // 开始调用
            ref.setStartPos(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckRouteRestult::setTargetPos" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckRouteRestult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckRouteRestult@$refId::setTargetPos([])")
        
            // 开始调用
            ref.setTargetPos(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckRouteRestult::getTruckQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckRouteRestult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckRouteRestult@$refId::getTruckQuery([])")
        
            // 开始调用
            val result = ref.getTruckQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TruckRouteRestult::getPaths" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckRouteRestult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckRouteRestult@$refId::getPaths([])")
        
            // 开始调用
            val result = ref.getPaths()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TruckRouteRestult::getStartPos" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckRouteRestult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckRouteRestult@$refId::getStartPos([])")
        
            // 开始调用
            val result = ref.getStartPos()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TruckRouteRestult::getTargetPos" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckRouteRestult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckRouteRestult@$refId::getTargetPos([])")
        
            // 开始调用
            val result = ref.getTargetPos()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.RideRouteQuery::getFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.RideRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.RideRouteQuery@$refId::getFromAndTo([])")
        
            // 开始调用
            val result = ref.getFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.RideRouteQuery::getMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.RideRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.RideRouteQuery@$refId::getMode([])")
        
            // 开始调用
            val result = ref.getMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::getFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::getFromAndTo([])")
        
            // 开始调用
            val result = ref.getFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::getMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::getMode([])")
        
            // 开始调用
            val result = ref.getMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::getCarType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::getCarType([])")
        
            // 开始调用
            val result = ref.getCarType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::getPassedByPoints" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::getPassedByPoints([])")
        
            // 开始调用
            val result = ref.getPassedByPoints()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::getAvoidpolygons" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::getAvoidpolygons([])")
        
            // 开始调用
            val result = ref.getAvoidpolygons()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::getAvoidRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::getAvoidRoad([])")
        
            // 开始调用
            val result = ref.getAvoidRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::getPassedPointStr" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::getPassedPointStr([])")
        
            // 开始调用
            val result = ref.getPassedPointStr()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::hasPassPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::hasPassPoint([])")
        
            // 开始调用
            val result = ref.hasPassPoint()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::getAvoidpolygonsStr" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::getAvoidpolygonsStr([])")
        
            // 开始调用
            val result = ref.getAvoidpolygonsStr()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::hasAvoidpolygons" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::hasAvoidpolygons([])")
        
            // 开始调用
            val result = ref.hasAvoidpolygons()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::hasAvoidRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::hasAvoidRoad([])")
        
            // 开始调用
            val result = ref.hasAvoidRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::isUseFerry" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::isUseFerry([])")
        
            // 开始调用
            val result = ref.isUseFerry()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::setUseFerry" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::setUseFerry([\"var1\":$var1])")
        
            // 开始调用
            ref.setUseFerry(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.DriveRouteQuery::setCarType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DriveRouteQuery@$refId::setCarType([\"var1\":$var1])")
        
            // 开始调用
            ref.setCarType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::getTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getTime([])")
        
            // 开始调用
            val result = ref.getTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteRailwayItem::getTrip" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getTrip([])")
        
            // 开始调用
            val result = ref.getTrip()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteRailwayItem::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteRailwayItem::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteRailwayItem::getDeparturestop" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getDeparturestop([])")
        
            // 开始调用
            val result = ref.getDeparturestop()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteRailwayItem::getArrivalstop" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getArrivalstop([])")
        
            // 开始调用
            val result = ref.getArrivalstop()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteRailwayItem::getViastops" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getViastops([])")
        
            // 开始调用
            val result = ref.getViastops()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteRailwayItem::getAlters" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getAlters([])")
        
            // 开始调用
            val result = ref.getAlters()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteRailwayItem::getSpaces" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::getSpaces([])")
        
            // 开始调用
            val result = ref.getSpaces()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteRailwayItem::setTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::setTrip" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setTrip([\"var1\":$var1])")
        
            // 开始调用
            ref.setTrip(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::setType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setType([\"var1\":$var1])")
        
            // 开始调用
            ref.setType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::setDeparturestop" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RailwayStationItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setDeparturestop([])")
        
            // 开始调用
            ref.setDeparturestop(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::setArrivalstop" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RailwayStationItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setArrivalstop([])")
        
            // 开始调用
            ref.setArrivalstop(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::setViastops" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.RailwayStationItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setViastops([])")
        
            // 开始调用
            ref.setViastops(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::setAlters" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.Railway }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setAlters([])")
        
            // 开始调用
            ref.setAlters(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteRailwayItem::setSpaces" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.RailwaySpace }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteRailwayItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteRailwayItem@$refId::setSpaces([])")
        
            // 开始调用
            ref.setSpaces(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkStep::getInstruction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::getInstruction([])")
        
            // 开始调用
            val result = ref.getInstruction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.WalkStep::setInstruction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::setInstruction([\"var1\":$var1])")
        
            // 开始调用
            ref.setInstruction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkStep::getOrientation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::getOrientation([])")
        
            // 开始调用
            val result = ref.getOrientation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.WalkStep::setOrientation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::setOrientation([\"var1\":$var1])")
        
            // 开始调用
            ref.setOrientation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkStep::getRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::getRoad([])")
        
            // 开始调用
            val result = ref.getRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.WalkStep::setRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::setRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkStep::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.WalkStep::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkStep::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.WalkStep::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkStep::getPolyline" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::getPolyline([])")
        
            // 开始调用
            val result = ref.getPolyline()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.WalkStep::setPolyline" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::setPolyline([])")
        
            // 开始调用
            ref.setPolyline(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkStep::getAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::getAction([])")
        
            // 开始调用
            val result = ref.getAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.WalkStep::setAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::setAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkStep::getAssistantAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::getAssistantAction([])")
        
            // 开始调用
            val result = ref.getAssistantAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.WalkStep::setAssistantAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkStep@$refId::setAssistantAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setAssistantAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwayStationItem::getID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::getID([])")
        
            // 开始调用
            val result = ref.getID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RailwayStationItem::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RailwayStationItem::getLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::getLocation([])")
        
            // 开始调用
            val result = ref.getLocation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RailwayStationItem::getAdcode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::getAdcode([])")
        
            // 开始调用
            val result = ref.getAdcode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RailwayStationItem::getTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::getTime([])")
        
            // 开始调用
            val result = ref.getTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RailwayStationItem::isStart" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::isStart([])")
        
            // 开始调用
            val result = ref.isStart()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RailwayStationItem::isEnd" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::isEnd([])")
        
            // 开始调用
            val result = ref.isEnd()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RailwayStationItem::getWait" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::getWait([])")
        
            // 开始调用
            val result = ref.getWait()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RailwayStationItem::setID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::setID([\"var1\":$var1])")
        
            // 开始调用
            ref.setID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwayStationItem::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwayStationItem::setLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::setLocation([])")
        
            // 开始调用
            ref.setLocation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwayStationItem::setAdcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::setAdcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwayStationItem::setTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::setTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwayStationItem::setisStart" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::setisStart([\"var1\":$var1])")
        
            // 开始调用
            ref.setisStart(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwayStationItem::setisEnd" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::setisEnd([\"var1\":$var1])")
        
            // 开始调用
            ref.setisEnd(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RailwayStationItem::setWait" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RailwayStationItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RailwayStationItem@$refId::setWait([\"var1\":$var1])")
        
            // 开始调用
            ref.setWait(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideRouteResult::getPaths" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideRouteResult@$refId::getPaths([])")
        
            // 开始调用
            val result = ref.getPaths()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RideRouteResult::setPaths" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.RidePath }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideRouteResult@$refId::setPaths([])")
        
            // 开始调用
            ref.setPaths(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideRouteResult::getRideQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideRouteResult@$refId::getRideQuery([])")
        
            // 开始调用
            val result = ref.getRideQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RideRouteResult::setRideQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.RideRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideRouteResult@$refId::setRideQuery([])")
        
            // 开始调用
            ref.setRideQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::getFrom" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::getFrom([])")
        
            // 开始调用
            val result = ref.getFrom()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::getTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::getTo([])")
        
            // 开始调用
            val result = ref.getTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::getStartPoiID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::getStartPoiID([])")
        
            // 开始调用
            val result = ref.getStartPoiID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::setStartPoiID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::setStartPoiID([\"var1\":$var1])")
        
            // 开始调用
            ref.setStartPoiID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::getDestinationPoiID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::getDestinationPoiID([])")
        
            // 开始调用
            val result = ref.getDestinationPoiID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::setDestinationPoiID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::setDestinationPoiID([\"var1\":$var1])")
        
            // 开始调用
            ref.setDestinationPoiID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::getOriginType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::getOriginType([])")
        
            // 开始调用
            val result = ref.getOriginType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::setOriginType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::setOriginType([\"var1\":$var1])")
        
            // 开始调用
            ref.setOriginType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::getDestinationType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::getDestinationType([])")
        
            // 开始调用
            val result = ref.getDestinationType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::setDestinationType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::setDestinationType([\"var1\":$var1])")
        
            // 开始调用
            ref.setDestinationType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::getPlateProvince" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::getPlateProvince([])")
        
            // 开始调用
            val result = ref.getPlateProvince()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::setPlateProvince" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::setPlateProvince([\"var1\":$var1])")
        
            // 开始调用
            ref.setPlateProvince(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::getPlateNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::getPlateNumber([])")
        
            // 开始调用
            val result = ref.getPlateNumber()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.FromAndTo::setPlateNumber" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.FromAndTo@$refId::setPlateNumber([\"var1\":$var1])")
        
            // 开始调用
            ref.setPlateNumber(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RidePath::getSteps" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RidePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RidePath@$refId::getSteps([])")
        
            // 开始调用
            val result = ref.getSteps()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RidePath::setSteps" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.RideStep }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RidePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RidePath@$refId::setSteps([])")
        
            // 开始调用
            ref.setSteps(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.BusRouteQuery::getFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.BusRouteQuery@$refId::getFromAndTo([])")
        
            // 开始调用
            val result = ref.getFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.BusRouteQuery::getMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.BusRouteQuery@$refId::getMode([])")
        
            // 开始调用
            val result = ref.getMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.BusRouteQuery::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.BusRouteQuery@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.BusRouteQuery::getNightFlag" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.BusRouteQuery@$refId::getNightFlag([])")
        
            // 开始调用
            val result = ref.getNightFlag()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.BusRouteQuery::getCityd" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.BusRouteQuery@$refId::getCityd([])")
        
            // 开始调用
            val result = ref.getCityd()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.BusRouteQuery::setCityd" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.BusRouteQuery@$refId::setCityd([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityd(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideStep::getInstruction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::getInstruction([])")
        
            // 开始调用
            val result = ref.getInstruction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RideStep::setInstruction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::setInstruction([\"var1\":$var1])")
        
            // 开始调用
            ref.setInstruction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideStep::getOrientation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::getOrientation([])")
        
            // 开始调用
            val result = ref.getOrientation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RideStep::setOrientation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::setOrientation([\"var1\":$var1])")
        
            // 开始调用
            ref.setOrientation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideStep::getRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::getRoad([])")
        
            // 开始调用
            val result = ref.getRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RideStep::setRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::setRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideStep::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RideStep::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideStep::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RideStep::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideStep::getPolyline" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::getPolyline([])")
        
            // 开始调用
            val result = ref.getPolyline()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RideStep::setPolyline" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::setPolyline([])")
        
            // 开始调用
            ref.setPolyline(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideStep::getAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::getAction([])")
        
            // 开始调用
            val result = ref.getAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RideStep::setAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::setAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RideStep::getAssistantAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::getAssistantAction([])")
        
            // 开始调用
            val result = ref.getAssistantAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RideStep::setAssistantAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RideStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RideStep@$refId::setAssistantAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setAssistantAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearchCity::getDistricts" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearchCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearchCity@$refId::getDistricts([])")
        
            // 开始调用
            val result = ref.getDistricts()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearchCity::setDistricts" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.District }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearchCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearchCity@$refId::setDistricts([])")
        
            // 开始调用
            ref.setDistricts(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onBusRouteSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.BusRouteResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.OnRouteSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.OnRouteSearchListener@$refId::onBusRouteSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onBusRouteSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onDriveRouteSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.DriveRouteResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.OnRouteSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.OnRouteSearchListener@$refId::onDriveRouteSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onDriveRouteSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onWalkRouteSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.WalkRouteResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.OnRouteSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.OnRouteSearchListener@$refId::onWalkRouteSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onWalkRouteSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onRideRouteSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RideRouteResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.OnRouteSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.OnRouteSearchListener@$refId::onRideRouteSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onRideRouteSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceResult::setDistanceQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceResult@$refId::setDistanceQuery([])")
        
            // 开始调用
            ref.setDistanceQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceResult::getDistanceQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceResult@$refId::getDistanceQuery([])")
        
            // 开始调用
            val result = ref.getDistanceQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DistanceResult::getDistanceResults" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceResult@$refId::getDistanceResults([])")
        
            // 开始调用
            val result = ref.getDistanceResults()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DistanceResult::setDistanceResults" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.DistanceItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceResult@$refId::setDistanceResults([])")
        
            // 开始调用
            ref.setDistanceResults(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.WalkRouteQuery::getFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.WalkRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.WalkRouteQuery@$refId::getFromAndTo([])")
        
            // 开始调用
            val result = ref.getFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.WalkRouteQuery::getMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.WalkRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.WalkRouteQuery@$refId::getMode([])")
        
            // 开始调用
            val result = ref.getMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.District::getDistrictName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.District
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.District@$refId::getDistrictName([])")
        
            // 开始调用
            val result = ref.getDistrictName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.District::setDistrictName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.District
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.District@$refId::setDistrictName([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistrictName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.District::getDistrictAdcode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.District
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.District@$refId::getDistrictAdcode([])")
        
            // 开始调用
            val result = ref.getDistrictAdcode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.District::setDistrictAdcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.District
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.District@$refId::setDistrictAdcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistrictAdcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkRouteResult::getPaths" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkRouteResult@$refId::getPaths([])")
        
            // 开始调用
            val result = ref.getPaths()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.WalkRouteResult::setPaths" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.WalkPath }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkRouteResult@$refId::setPaths([])")
        
            // 开始调用
            ref.setPaths(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkRouteResult::getWalkQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkRouteResult@$refId::getWalkQuery([])")
        
            // 开始调用
            val result = ref.getWalkQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.WalkRouteResult::setWalkQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.WalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkRouteResult@$refId::setWalkQuery([])")
        
            // 开始调用
            ref.setWalkQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceSearch.DistanceQuery::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch.DistanceQuery@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DistanceSearch.DistanceQuery::getOrigins" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch.DistanceQuery@$refId::getOrigins([])")
        
            // 开始调用
            val result = ref.getOrigins()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DistanceSearch.DistanceQuery::getDestination" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch.DistanceQuery@$refId::getDestination([])")
        
            // 开始调用
            val result = ref.getDestination()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DistanceSearch.DistanceQuery::setType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch.DistanceQuery@$refId::setType([\"var1\":$var1])")
        
            // 开始调用
            ref.setType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceSearch.DistanceQuery::setOrigins" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch.DistanceQuery@$refId::setOrigins([])")
        
            // 开始调用
            ref.setOrigins(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceSearch.DistanceQuery::addOrigins" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch.DistanceQuery@$refId::addOrigins([])")
        
            // 开始调用
            ref.addOrigins(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceSearch.DistanceQuery::setDestination" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch.DistanceQuery@$refId::setDestination([])")
        
            // 开始调用
            ref.setDestination(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.SearchCity::getSearchCityName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.SearchCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.SearchCity@$refId::getSearchCityName([])")
        
            // 开始调用
            val result = ref.getSearchCityName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.SearchCity::setSearchCityName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.SearchCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.SearchCity@$refId::setSearchCityName([\"var1\":$var1])")
        
            // 开始调用
            ref.setSearchCityName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.SearchCity::getSearchCitycode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.SearchCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.SearchCity@$refId::getSearchCitycode([])")
        
            // 开始调用
            val result = ref.getSearchCitycode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.SearchCity::setSearchCitycode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.SearchCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.SearchCity@$refId::setSearchCitycode([\"var1\":$var1])")
        
            // 开始调用
            ref.setSearchCitycode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.SearchCity::getSearchCityAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.SearchCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.SearchCity@$refId::getSearchCityAdCode([])")
        
            // 开始调用
            val result = ref.getSearchCityAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.SearchCity::setSearchCityhAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.SearchCity
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.SearchCity@$refId::setSearchCityhAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setSearchCityhAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.OnRoutePlanSearchListener::onDriveRoutePlanSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.DriveRoutePlanResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.OnRoutePlanSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.OnRoutePlanSearchListener@$refId::onDriveRoutePlanSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onDriveRoutePlanSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceSearch::setDistanceSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch@$refId::setDistanceSearchListener([])")
        
            // 开始调用
            ref.setDistanceSearchListener(object : com.amap.api.services.route.DistanceSearch.OnDistanceSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.route.DistanceSearch::setDistanceSearchListener::Callback")
        
                // 回调方法们
                override fun onDistanceSearched(var1: com.amap.api.services.route.DistanceResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDistanceSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.DistanceSearch.OnDistanceSearchListener::onDistanceSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceSearch::calculateRouteDistance" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch@$refId::calculateRouteDistance([])")
        
            // 开始调用
            val result = ref.calculateRouteDistance(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DistanceSearch::calculateRouteDistanceAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceSearch@$refId::calculateRouteDistanceAsyn([])")
        
            // 开始调用
            ref.calculateRouteDistanceAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.WalkPath::getSteps" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkPath@$refId::getSteps([])")
        
            // 开始调用
            val result = ref.getSteps()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.WalkPath::setSteps" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.WalkStep }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.WalkPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.WalkPath@$refId::setSteps([])")
        
            // 开始调用
            ref.setSteps(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteBusLineItem::getDepartureBusStation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::getDepartureBusStation([])")
        
            // 开始调用
            val result = ref.getDepartureBusStation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteBusLineItem::setDepartureBusStation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusStationItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::setDepartureBusStation([])")
        
            // 开始调用
            ref.setDepartureBusStation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteBusLineItem::getArrivalBusStation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::getArrivalBusStation([])")
        
            // 开始调用
            val result = ref.getArrivalBusStation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteBusLineItem::setArrivalBusStation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusStationItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::setArrivalBusStation([])")
        
            // 开始调用
            ref.setArrivalBusStation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteBusLineItem::getPolyline" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::getPolyline([])")
        
            // 开始调用
            val result = ref.getPolyline()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteBusLineItem::setPolyline" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::setPolyline([])")
        
            // 开始调用
            ref.setPolyline(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteBusLineItem::getPassStationNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::getPassStationNum([])")
        
            // 开始调用
            val result = ref.getPassStationNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteBusLineItem::setPassStationNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::setPassStationNum([\"var1\":$var1])")
        
            // 开始调用
            ref.setPassStationNum(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteBusLineItem::getPassStations" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::getPassStations([])")
        
            // 开始调用
            val result = ref.getPassStations()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteBusLineItem::setPassStations" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.busline.BusStationItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::setPassStations([])")
        
            // 开始调用
            ref.setPassStations(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteBusLineItem::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteBusLineItem::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteBusLineItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteBusLineItem@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::getFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::getFromAndTo([])")
        
            // 开始调用
            val result = ref.getFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::getDestParentPoiID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::getDestParentPoiID([])")
        
            // 开始调用
            val result = ref.getDestParentPoiID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::getMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::getMode([])")
        
            // 开始调用
            val result = ref.getMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::getCarType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::getCarType([])")
        
            // 开始调用
            val result = ref.getCarType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::getFirstTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::getFirstTime([])")
        
            // 开始调用
            val result = ref.getFirstTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::getInterval" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::getInterval([])")
        
            // 开始调用
            val result = ref.getInterval()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::getCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::getCount([])")
        
            // 开始调用
            val result = ref.getCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::setDestParentPoiID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::setDestParentPoiID([\"var1\":$var1])")
        
            // 开始调用
            ref.setDestParentPoiID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::setMode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::setMode([\"var1\":$var1])")
        
            // 开始调用
            ref.setMode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.RouteSearch.DrivePlanQuery::setCarType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.DrivePlanQuery@$refId::setCarType([\"var1\":$var1])")
        
            // 开始调用
            ref.setCarType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePlanStep::getRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::getRoad([])")
        
            // 开始调用
            val result = ref.getRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePlanStep::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePlanStep::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePlanStep::setRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::setRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePlanStep::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePlanStep::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePlanStep::getToll" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::getToll([])")
        
            // 开始调用
            val result = ref.getToll()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePlanStep::setToll" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::setToll([\"var1\":$var1])")
        
            // 开始调用
            ref.setToll(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePlanStep::getPolyline" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::getPolyline([])")
        
            // 开始调用
            val result = ref.getPolyline()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DrivePlanStep::setPolyline" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanStep@$refId::setPolyline([])")
        
            // 开始调用
            ref.setPolyline(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TimeInfo::getStartTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfo@$refId::getStartTime([])")
        
            // 开始调用
            val result = ref.getStartTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TimeInfo::setStartTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfo@$refId::setStartTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setStartTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TimeInfo::getElements" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfo@$refId::getElements([])")
        
            // 开始调用
            val result = ref.getElements()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TimeInfo::setElements" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.TimeInfosElement }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfo@$refId::setElements([])")
        
            // 开始调用
            ref.setElements(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getInstruction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getInstruction([])")
        
            // 开始调用
            val result = ref.getInstruction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setInstruction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setInstruction([\"var1\":$var1])")
        
            // 开始调用
            ref.setInstruction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getOrientation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getOrientation([])")
        
            // 开始调用
            val result = ref.getOrientation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setOrientation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setOrientation([\"var1\":$var1])")
        
            // 开始调用
            ref.setOrientation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getRoad([])")
        
            // 开始调用
            val result = ref.getRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getTolls" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getTolls([])")
        
            // 开始调用
            val result = ref.getTolls()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setTolls" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setTolls([\"var1\":$var1])")
        
            // 开始调用
            ref.setTolls(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getTollDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getTollDistance([])")
        
            // 开始调用
            val result = ref.getTollDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setTollDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setTollDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setTollDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getTollRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getTollRoad([])")
        
            // 开始调用
            val result = ref.getTollRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setTollRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setTollRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setTollRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getPolyline" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getPolyline([])")
        
            // 开始调用
            val result = ref.getPolyline()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DriveStep::setPolyline" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setPolyline([])")
        
            // 开始调用
            ref.setPolyline(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getAction([])")
        
            // 开始调用
            val result = ref.getAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getAssistantAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getAssistantAction([])")
        
            // 开始调用
            val result = ref.getAssistantAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveStep::setAssistantAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setAssistantAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setAssistantAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getRouteSearchCityList" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getRouteSearchCityList([])")
        
            // 开始调用
            val result = ref.getRouteSearchCityList()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DriveStep::setRouteSearchCityList" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.RouteSearchCity }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setRouteSearchCityList([])")
        
            // 开始调用
            ref.setRouteSearchCityList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveStep::getTMCs" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::getTMCs([])")
        
            // 开始调用
            val result = ref.getTMCs()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DriveStep::setTMCs" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.TMC }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveStep@$refId::setTMCs([])")
        
            // 开始调用
            ref.setTMCs(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setInstruction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setInstruction([\"var1\":$var1])")
        
            // 开始调用
            ref.setInstruction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setOrientation" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setOrientation([\"var1\":$var1])")
        
            // 开始调用
            ref.setOrientation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setTolls" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setTolls([\"var1\":$var1])")
        
            // 开始调用
            ref.setTolls(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setTollDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setTollDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setTollDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setTollRoad" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setTollRoad([\"var1\":$var1])")
        
            // 开始调用
            ref.setTollRoad(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setPolyline" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setPolyline([])")
        
            // 开始调用
            ref.setPolyline(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setAssistantAction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setAssistantAction([\"var1\":$var1])")
        
            // 开始调用
            ref.setAssistantAction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setRouteSearchCityList" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.RouteSearchCity }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setRouteSearchCityList([])")
        
            // 开始调用
            ref.setRouteSearchCityList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::setTMCs" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.TMC }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::setTMCs([])")
        
            // 开始调用
            ref.setTMCs(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckStep::getInstruction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getInstruction([])")
        
            // 开始调用
            val result = ref.getInstruction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getOrientation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getOrientation([])")
        
            // 开始调用
            val result = ref.getOrientation()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getRoad([])")
        
            // 开始调用
            val result = ref.getRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getTolls" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getTolls([])")
        
            // 开始调用
            val result = ref.getTolls()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getTollDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getTollDistance([])")
        
            // 开始调用
            val result = ref.getTollDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getTollRoad" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getTollRoad([])")
        
            // 开始调用
            val result = ref.getTollRoad()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getPolyline" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getPolyline([])")
        
            // 开始调用
            val result = ref.getPolyline()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TruckStep::getAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getAction([])")
        
            // 开始调用
            val result = ref.getAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getAssistantAction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getAssistantAction([])")
        
            // 开始调用
            val result = ref.getAssistantAction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckStep::getRouteSearchCityList" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getRouteSearchCityList([])")
        
            // 开始调用
            val result = ref.getRouteSearchCityList()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.TruckStep::getTMCs" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckStep
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckStep@$refId::getTMCs([])")
        
            // 开始调用
            val result = ref.getTMCs()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DriveRouteResult::getTaxiCost" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRouteResult@$refId::getTaxiCost([])")
        
            // 开始调用
            val result = ref.getTaxiCost()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DriveRouteResult::setTaxiCost" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRouteResult@$refId::setTaxiCost([\"var1\":$var1])")
        
            // 开始调用
            ref.setTaxiCost(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveRouteResult::getPaths" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRouteResult@$refId::getPaths([])")
        
            // 开始调用
            val result = ref.getPaths()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DriveRouteResult::setPaths" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.DrivePath }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRouteResult@$refId::setPaths([])")
        
            // 开始调用
            ref.setPaths(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DriveRouteResult::getDriveQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRouteResult@$refId::getDriveQuery([])")
        
            // 开始调用
            val result = ref.getDriveQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DriveRouteResult::setDriveQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DriveRouteResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DriveRouteResult@$refId::setDriveQuery([])")
        
            // 开始调用
            ref.setDriveQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePath::getStrategy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::getStrategy([])")
        
            // 开始调用
            val result = ref.getStrategy()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePath::setStrategy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::setStrategy([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrategy(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePath::getTolls" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::getTolls([])")
        
            // 开始调用
            val result = ref.getTolls()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePath::setTolls" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::setTolls([\"var1\":$var1])")
        
            // 开始调用
            ref.setTolls(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePath::getTollDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::getTollDistance([])")
        
            // 开始调用
            val result = ref.getTollDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePath::setTollDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::setTollDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setTollDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePath::getTotalTrafficlights" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::getTotalTrafficlights([])")
        
            // 开始调用
            val result = ref.getTotalTrafficlights()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePath::setTotalTrafficlights" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::setTotalTrafficlights([\"var1\":$var1])")
        
            // 开始调用
            ref.setTotalTrafficlights(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePath::getSteps" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::getSteps([])")
        
            // 开始调用
            val result = ref.getSteps()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DrivePath::setSteps" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.DriveStep }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::setSteps([])")
        
            // 开始调用
            ref.setSteps(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePath::getRestriction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::getRestriction([])")
        
            // 开始调用
            val result = ref.getRestriction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePath::setRestriction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePath@$refId::setRestriction([\"var1\":$var1])")
        
            // 开始调用
            ref.setRestriction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::setStrategy" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::setStrategy([\"var1\":$var1])")
        
            // 开始调用
            ref.setStrategy(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::setTolls" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::setTolls([\"var1\":$var1])")
        
            // 开始调用
            ref.setTolls(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::setTollDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::setTollDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setTollDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::setTotalTrafficlights" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::setTotalTrafficlights([\"var1\":$var1])")
        
            // 开始调用
            ref.setTotalTrafficlights(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::setRestriction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::setRestriction([\"var1\":$var1])")
        
            // 开始调用
            ref.setRestriction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::setSteps" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.TruckStep }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::setSteps([])")
        
            // 开始调用
            ref.setSteps(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TruckPath::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckPath::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckPath::getStrategy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::getStrategy([])")
        
            // 开始调用
            val result = ref.getStrategy()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckPath::getTolls" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::getTolls([])")
        
            // 开始调用
            val result = ref.getTolls()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckPath::getTollDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::getTollDistance([])")
        
            // 开始调用
            val result = ref.getTollDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckPath::getTotalTrafficlights" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::getTotalTrafficlights([])")
        
            // 开始调用
            val result = ref.getTotalTrafficlights()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckPath::getRestriction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::getRestriction([])")
        
            // 开始调用
            val result = ref.getRestriction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TruckPath::getSteps" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TruckPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TruckPath@$refId::getSteps([])")
        
            // 开始调用
            val result = ref.getSteps()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.Doorway::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Doorway
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Doorway@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.Doorway::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Doorway
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Doorway@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.Doorway::getLatLonPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Doorway
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Doorway@$refId::getLatLonPoint([])")
        
            // 开始调用
            val result = ref.getLatLonPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.Doorway::setLatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Doorway
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Doorway@$refId::setLatLonPoint([])")
        
            // 开始调用
            ref.setLatLonPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePlanPath::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanPath@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePlanPath::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanPath@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePlanPath::getTrafficLights" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanPath@$refId::getTrafficLights([])")
        
            // 开始调用
            val result = ref.getTrafficLights()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DrivePlanPath::setTrafficLights" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanPath@$refId::setTrafficLights([\"var1\":$var1])")
        
            // 开始调用
            ref.setTrafficLights(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DrivePlanPath::getSteps" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanPath@$refId::getSteps([])")
        
            // 开始调用
            val result = ref.getSteps()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.DrivePlanPath::setSteps" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.DrivePlanStep }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DrivePlanPath
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DrivePlanPath@$refId::setSteps([])")
        
            // 开始调用
            ref.setSteps(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TimeInfosElement::getPathindex" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::getPathindex([])")
        
            // 开始调用
            val result = ref.getPathindex()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TimeInfosElement::setPathindex" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::setPathindex([\"var1\":$var1])")
        
            // 开始调用
            ref.setPathindex(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TimeInfosElement::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TimeInfosElement::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TimeInfosElement::getTolls" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::getTolls([])")
        
            // 开始调用
            val result = ref.getTolls()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TimeInfosElement::setTolls" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::setTolls([\"var1\":$var1])")
        
            // 开始调用
            ref.setTolls(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TimeInfosElement::getRestriction" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::getRestriction([])")
        
            // 开始调用
            val result = ref.getRestriction()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.TimeInfosElement::setRestriction" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::setRestriction([\"var1\":$var1])")
        
            // 开始调用
            ref.setRestriction(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TimeInfosElement::setTMCs" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.route.TMC }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::setTMCs([])")
        
            // 开始调用
            ref.setTMCs(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.TimeInfosElement::getTMCs" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.TimeInfosElement
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.TimeInfosElement@$refId::getTMCs([])")
        
            // 开始调用
            val result = ref.getTMCs()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.route.RouteSearch.OnTruckRouteSearchListener::onTruckRouteSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.TruckRouteRestult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.RouteSearch.OnTruckRouteSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.RouteSearch.OnTruckRouteSearchListener@$refId::onTruckRouteSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onTruckRouteSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceItem::getOriginId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::getOriginId([])")
        
            // 开始调用
            val result = ref.getOriginId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DistanceItem::getDestId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::getDestId([])")
        
            // 开始调用
            val result = ref.getDestId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DistanceItem::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DistanceItem::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DistanceItem::getErrorInfo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::getErrorInfo([])")
        
            // 开始调用
            val result = ref.getErrorInfo()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DistanceItem::getErrorCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::getErrorCode([])")
        
            // 开始调用
            val result = ref.getErrorCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.DistanceItem::setOriginId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::setOriginId([\"var1\":$var1])")
        
            // 开始调用
            ref.setOriginId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceItem::setDestId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::setDestId([\"var1\":$var1])")
        
            // 开始调用
            ref.setDestId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceItem::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceItem::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceItem::setErrorInfo" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::setErrorInfo([\"var1\":$var1])")
        
            // 开始调用
            ref.setErrorInfo(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.DistanceItem::setErrorCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.DistanceItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.DistanceItem@$refId::setErrorCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setErrorCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.Path::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Path
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Path@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.Path::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Path
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Path@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.route.Path::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Path
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Path@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.route.Path::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.route.Path
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.route.Path@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Road::setId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::setId([\"var1\":$var1])")
        
            // 开始调用
            ref.setId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Road::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Road::getCityCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::getCityCode([])")
        
            // 开始调用
            val result = ref.getCityCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Road::setCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::setCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Road::getRoadWidth" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::getRoadWidth([])")
        
            // 开始调用
            val result = ref.getRoadWidth()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Road::setRoadWidth" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::setRoadWidth([\"var1\":$var1])")
        
            // 开始调用
            ref.setRoadWidth(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Road::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Road::setType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::setType([\"var1\":$var1])")
        
            // 开始调用
            ref.setType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Road::getCenterPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::getCenterPoint([])")
        
            // 开始调用
            val result = ref.getCenterPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.road.Road::setCenterPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::setCenterPoint([])")
        
            // 开始调用
            ref.setCenterPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Road::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Road::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Road
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Road@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Crossroad::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Crossroad::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Crossroad::getDirection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::getDirection([])")
        
            // 开始调用
            val result = ref.getDirection()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Crossroad::setDirection" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::setDirection([\"var1\":$var1])")
        
            // 开始调用
            ref.setDirection(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Crossroad::getFirstRoadId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::getFirstRoadId([])")
        
            // 开始调用
            val result = ref.getFirstRoadId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Crossroad::setFirstRoadId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::setFirstRoadId([\"var1\":$var1])")
        
            // 开始调用
            ref.setFirstRoadId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Crossroad::getFirstRoadName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::getFirstRoadName([])")
        
            // 开始调用
            val result = ref.getFirstRoadName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Crossroad::setFirstRoadName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::setFirstRoadName([\"var1\":$var1])")
        
            // 开始调用
            ref.setFirstRoadName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Crossroad::getSecondRoadId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::getSecondRoadId([])")
        
            // 开始调用
            val result = ref.getSecondRoadId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Crossroad::setSecondRoadId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::setSecondRoadId([\"var1\":$var1])")
        
            // 开始调用
            ref.setSecondRoadId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.road.Crossroad::getSecondRoadName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::getSecondRoadName([])")
        
            // 开始调用
            val result = ref.getSecondRoadName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.road.Crossroad::setSecondRoadName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.road.Crossroad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.road.Crossroad@$refId::setSecondRoadName([\"var1\":$var1])")
        
            // 开始调用
            ref.setSecondRoadName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyListener::onUserInfoCleared" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyListener@$refId::onUserInfoCleared([\"var1\":$var1])")
        
            // 开始调用
            ref.onUserInfoCleared(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.nearby.NearbySearchResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyListener@$refId::onNearbyInfoSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onNearbyInfoSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoUploaded" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyListener@$refId::onNearbyInfoUploaded([\"var1\":$var1])")
        
            // 开始调用
            ref.onNearbyInfoUploaded(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.UploadInfoCallback::OnUploadInfoCallback" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.UploadInfoCallback
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.UploadInfoCallback@$refId::OnUploadInfoCallback([])")
        
            // 开始调用
            val result = ref.OnUploadInfoCallback()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.nearby.NearbyInfo::setUserID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::setUserID([\"var1\":$var1])")
        
            // 开始调用
            ref.setUserID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbyInfo::getUserID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::getUserID([])")
        
            // 开始调用
            val result = ref.getUserID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.NearbyInfo::getPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::getPoint([])")
        
            // 开始调用
            val result = ref.getPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.nearby.NearbyInfo::setPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::setPoint([])")
        
            // 开始调用
            ref.setPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbyInfo::setTimeStamp" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Long
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::setTimeStamp([\"var1\":$var1])")
        
            // 开始调用
            ref.setTimeStamp(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbyInfo::getTimeStamp" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::getTimeStamp([])")
        
            // 开始调用
            val result = ref.getTimeStamp()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.NearbyInfo::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbyInfo::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.NearbyInfo::setDrivingDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::setDrivingDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDrivingDistance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbyInfo::getDrivingDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbyInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbyInfo@$refId::getDrivingDistance([])")
        
            // 开始调用
            val result = ref.getDrivingDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.UploadInfo::setPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.UploadInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.UploadInfo@$refId::setPoint([])")
        
            // 开始调用
            ref.setPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.UploadInfo::getPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.UploadInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.UploadInfo@$refId::getPoint([])")
        
            // 开始调用
            val result = ref.getPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.nearby.UploadInfo::setUserID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.UploadInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.UploadInfo@$refId::setUserID([\"var1\":$var1])")
        
            // 开始调用
            ref.setUserID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.UploadInfo::getUserID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.UploadInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.UploadInfo@$refId::getUserID([])")
        
            // 开始调用
            val result = ref.getUserID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.UploadInfo::getCoordType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.UploadInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.UploadInfo@$refId::getCoordType([])")
        
            // 开始调用
            val result = ref.getCoordType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.UploadInfo::setCoordType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.UploadInfo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.UploadInfo@$refId::setCoordType([\"var1\":$var1])")
        
            // 开始调用
            ref.setCoordType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::getInstance" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as android.content.Context
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch::getInstance([])")
        
            // 开始调用
            val result = com.amap.api.services.nearby.NearbySearch.getInstance(var0)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.nearby.NearbySearch::addNearbyListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::addNearbyListener([])")
        
            // 开始调用
            ref.addNearbyListener(object : com.amap.api.services.nearby.NearbySearch.NearbyListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.nearby.NearbySearch::addNearbyListener::Callback")
        
                // 回调方法们
                override fun onUserInfoCleared(var1: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onUserInfoCleared([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onUserInfoCleared",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNearbyInfoSearched(var1: com.amap.api.services.nearby.NearbySearchResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNearbyInfoSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNearbyInfoUploaded(var1: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNearbyInfoUploaded([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoUploaded",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::removeNearbyListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::removeNearbyListener([])")
        
            // 开始调用
            ref.removeNearbyListener(object : com.amap.api.services.nearby.NearbySearch.NearbyListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.nearby.NearbySearch::removeNearbyListener::Callback")
        
                // 回调方法们
                override fun onUserInfoCleared(var1: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onUserInfoCleared([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onUserInfoCleared",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNearbyInfoSearched(var1: com.amap.api.services.nearby.NearbySearchResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNearbyInfoSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNearbyInfoUploaded(var1: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNearbyInfoUploaded([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoUploaded",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::clearUserInfoAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::clearUserInfoAsyn([])")
        
            // 开始调用
            ref.clearUserInfoAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::setUserID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::setUserID([\"var1\":$var1])")
        
            // 开始调用
            ref.setUserID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::startUploadNearbyInfoAuto" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::startUploadNearbyInfoAuto([\"var2\":$var2])")
        
            // 开始调用
            ref.startUploadNearbyInfoAuto(object : com.amap.api.services.nearby.UploadInfoCallback {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.nearby.NearbySearch::startUploadNearbyInfoAuto::Callback")
        
                // 回调方法们
                override fun OnUploadInfoCallback(): com.amap.api.services.nearby.UploadInfo? {
                    // 日志打印
                    println("fluttify-kotlin-callback: OnUploadInfoCallback([])")
        
                    // 处理成可以传输的参数
        
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.UploadInfoCallback::OnUploadInfoCallback",
                        mapOf<String, Any?>(
            
                        )
                    )
        
                    // 方法返回值
                    return null
                }
        
            }, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::stopUploadNearbyInfoAuto" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::stopUploadNearbyInfoAuto([])")
        
            // 开始调用
            ref.stopUploadNearbyInfoAuto()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::uploadNearbyInfoAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.nearby.UploadInfo
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::uploadNearbyInfoAsyn([])")
        
            // 开始调用
            ref.uploadNearbyInfoAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::searchNearbyInfoAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::searchNearbyInfoAsyn([])")
        
            // 开始调用
            ref.searchNearbyInfoAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch::searchNearbyInfo" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch@$refId::searchNearbyInfo([])")
        
            // 开始调用
            val result = ref.searchNearbyInfo(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.nearby.NearbySearch::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch::destroy([])")
        
            // 开始调用
            com.amap.api.services.nearby.NearbySearch.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearchResult::getNearbyInfoList" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearchResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearchResult@$refId::getNearbyInfoList([])")
        
            // 开始调用
            val result = ref.getNearbyInfoList()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.nearby.NearbySearchResult::getTotalNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearchResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearchResult@$refId::getTotalNum([])")
        
            // 开始调用
            val result = ref.getTotalNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.NearbySearchResult::setNearbyInfoList" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.nearby.NearbyInfo }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearchResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearchResult@$refId::setNearbyInfoList([])")
        
            // 开始调用
            ref.setNearbyInfoList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::setCenterPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::setCenterPoint([])")
        
            // 开始调用
            ref.setCenterPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::getCenterPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::getCenterPoint([])")
        
            // 开始调用
            val result = ref.getCenterPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::getRadius" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::getRadius([])")
        
            // 开始调用
            val result = ref.getRadius()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::setRadius" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::setRadius([\"var1\":$var1])")
        
            // 开始调用
            ref.setRadius(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::setType" to { registrar, args, methodResult ->
            // 参数
            // 枚举参数
            val var1 = com.amap.api.services.nearby.NearbySearchFunctionType.values()[args["var1"] as Int]
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::setType([])")
        
            // 开始调用
            ref.setType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::setCoordType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::setCoordType([\"var1\":$var1])")
        
            // 开始调用
            ref.setCoordType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::getCoordType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::getCoordType([])")
        
            // 开始调用
            val result = ref.getCoordType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::setTimeRange" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::setTimeRange([\"var1\":$var1])")
        
            // 开始调用
            ref.setTimeRange(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.nearby.NearbySearch.NearbyQuery::getTimeRange" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.nearby.NearbySearch.NearbyQuery@$refId::getTimeRange([])")
        
            // 开始调用
            val result = ref.getTimeRange()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::getID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::getID([])")
        
            // 开始调用
            val result = ref.getID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::setID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::setID([\"var1\":$var1])")
        
            // 开始调用
            ref.setID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::setTitle" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::setTitle([\"var1\":$var1])")
        
            // 开始调用
            ref.setTitle(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::getPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::getPoint([])")
        
            // 开始调用
            val result = ref.getPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::setPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::setPoint([])")
        
            // 开始调用
            ref.setPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::getDuration" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::getDuration([])")
        
            // 开始调用
            val result = ref.getDuration()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.routepoisearch.RoutePOIItem::setDuration" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOIItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOIItem@$refId::setDuration([\"var1\":$var1])")
        
            // 开始调用
            ref.setDuration(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOISearch::setPoiSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearch@$refId::setPoiSearchListener([])")
        
            // 开始调用
            ref.setPoiSearchListener(object : com.amap.api.services.routepoisearch.RoutePOISearch.OnRoutePOISearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.routepoisearch.RoutePOISearch::setPoiSearchListener::Callback")
        
                // 回调方法们
                override fun onRoutePoiSearched(var1: com.amap.api.services.routepoisearch.RoutePOISearchResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onRoutePoiSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.routepoisearch.RoutePOISearch.OnRoutePOISearchListener::onRoutePoiSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOISearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOISearch::searchRoutePOIAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearch@$refId::searchRoutePOIAsyn([])")
        
            // 开始调用
            ref.searchRoutePOIAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOISearch::searchRoutePOI" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearch@$refId::searchRoutePOI([])")
        
            // 开始调用
            val result = ref.searchRoutePOI()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchResult::getRoutePois" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchResult@$refId::getRoutePois([])")
        
            // 开始调用
            val result = ref.getRoutePois()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchResult::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchResult@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.routepoisearch.RoutePOISearch.OnRoutePOISearchListener::onRoutePoiSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.routepoisearch.RoutePOISearchResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearch.OnRoutePOISearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearch.OnRoutePOISearchListener@$refId::onRoutePoiSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onRoutePoiSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchQuery::getFrom" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchQuery@$refId::getFrom([])")
        
            // 开始调用
            val result = ref.getFrom()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchQuery::getTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchQuery@$refId::getTo([])")
        
            // 开始调用
            val result = ref.getTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchQuery::getMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchQuery@$refId::getMode([])")
        
            // 开始调用
            val result = ref.getMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchQuery::getSearchType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchQuery@$refId::getSearchType([])")
        
            // 开始调用
            val result = ref.getSearchType()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchQuery::getRange" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchQuery@$refId::getRange([])")
        
            // 开始调用
            val result = ref.getRange()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchQuery::getPolylines" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchQuery@$refId::getPolylines([])")
        
            // 开始调用
            val result = ref.getPolylines()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.routepoisearch.RoutePOISearchQuery::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.routepoisearch.RoutePOISearchQuery@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudItem::getID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::getID([])")
        
            // 开始调用
            val result = ref.getID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudItem::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudItem::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudItem::getTitle" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::getTitle([])")
        
            // 开始调用
            val result = ref.getTitle()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudItem::getSnippet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::getSnippet([])")
        
            // 开始调用
            val result = ref.getSnippet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudItem::getLatLonPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::getLatLonPoint([])")
        
            // 开始调用
            val result = ref.getLatLonPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudItem::getCreatetime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::getCreatetime([])")
        
            // 开始调用
            val result = ref.getCreatetime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudItem::setCreatetime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::setCreatetime([\"var1\":$var1])")
        
            // 开始调用
            ref.setCreatetime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudItem::getUpdatetime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::getUpdatetime([])")
        
            // 开始调用
            val result = ref.getUpdatetime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudItem::setUpdatetime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::setUpdatetime([\"var1\":$var1])")
        
            // 开始调用
            ref.setUpdatetime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudItem::getCloudImage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::getCloudImage([])")
        
            // 开始调用
            val result = ref.getCloudImage()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudItem::setmCloudImage" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.cloud.CloudImage }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudItem@$refId::setmCloudImage([])")
        
            // 开始调用
            ref.setmCloudImage(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.Query::getQueryString" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::getQueryString([])")
        
            // 开始调用
            val result = ref.getQueryString()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.Query::setTableID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::setTableID([\"var1\":$var1])")
        
            // 开始调用
            ref.setTableID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.Query::getTableID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::getTableID([])")
        
            // 开始调用
            val result = ref.getTableID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.Query::getPageNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::getPageNum([])")
        
            // 开始调用
            val result = ref.getPageNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.Query::setPageNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::setPageNum([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageNum(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.Query::setPageSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::setPageSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.Query::getPageSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::getPageSize([])")
        
            // 开始调用
            val result = ref.getPageSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.Query::setBound" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::setBound([])")
        
            // 开始调用
            ref.setBound(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.Query::getBound" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::getBound([])")
        
            // 开始调用
            val result = ref.getBound()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudSearch.Query::addFilterString" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::addFilterString([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.addFilterString(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.Query::getFilterString" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::getFilterString([])")
        
            // 开始调用
            val result = ref.getFilterString()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.Query::addFilterNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::addFilterNum([\"var1\":$var1, \"var2\":$var2, \"var3\":$var3])")
        
            // 开始调用
            ref.addFilterNum(var1, var2, var3)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.Query::getFilterNumString" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::getFilterNumString([])")
        
            // 开始调用
            val result = ref.getFilterNumString()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.Query::setSortingrules" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.cloud.CloudSearch.Sortingrules
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::setSortingrules([])")
        
            // 开始调用
            ref.setSortingrules(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.Query::getSortingrules" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::getSortingrules([])")
        
            // 开始调用
            val result = ref.getSortingrules()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudSearch.Query::queryEquals" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.Query@$refId::queryEquals([])")
        
            // 开始调用
            val result = ref.queryEquals(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudResult::createPagedResult" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as com.amap.api.services.cloud.CloudSearch.Query
            // jsonable参数
            val var1 = args["var1"] as Int
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.cloud.CloudSearch.SearchBound
            // jsonable参数
            val var3 = args["var3"] as Int
            // 列表参数
            val var4 = (args["var4"] as List<Int>).map { HEAP[it] as com.amap.api.services.cloud.CloudItem }
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudResult::createPagedResult([\"var1\":$var1, \"var3\":$var3])")
        
            // 开始调用
            val result = com.amap.api.services.cloud.CloudResult.createPagedResult(var0, var1, var2, var3, ArrayList(var4))
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudResult::getPageCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudResult@$refId::getPageCount([])")
        
            // 开始调用
            val result = ref.getPageCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudResult::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudResult@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudResult::getBound" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudResult@$refId::getBound([])")
        
            // 开始调用
            val result = ref.getBound()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudResult::getClouds" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudResult@$refId::getClouds([])")
        
            // 开始调用
            val result = ref.getClouds()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudResult::getTotalCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudResult@$refId::getTotalCount([])")
        
            // 开始调用
            val result = ref.getTotalCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch::setOnCloudSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch@$refId::setOnCloudSearchListener([])")
        
            // 开始调用
            ref.setOnCloudSearchListener(object : com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.cloud.CloudSearch::setOnCloudSearchListener::Callback")
        
                // 回调方法们
                override fun onCloudSearched(var1: com.amap.api.services.cloud.CloudResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCloudSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener::onCloudSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCloudItemDetailSearched(var1: com.amap.api.services.cloud.CloudItemDetail, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCloudItemDetailSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener::onCloudItemDetailSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch::searchCloudAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch@$refId::searchCloudAsyn([])")
        
            // 开始调用
            ref.searchCloudAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch::searchCloudDetailAsyn" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch@$refId::searchCloudDetailAsyn([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.searchCloudDetailAsyn(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.SearchBound::getLowerLeft" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.SearchBound@$refId::getLowerLeft([])")
        
            // 开始调用
            val result = ref.getLowerLeft()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudSearch.SearchBound::getUpperRight" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.SearchBound@$refId::getUpperRight([])")
        
            // 开始调用
            val result = ref.getUpperRight()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudSearch.SearchBound::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.SearchBound@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudSearch.SearchBound::getRange" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.SearchBound@$refId::getRange([])")
        
            // 开始调用
            val result = ref.getRange()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.SearchBound::getShape" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.SearchBound@$refId::getShape([])")
        
            // 开始调用
            val result = ref.getShape()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.SearchBound::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.SearchBound@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudSearch.SearchBound::getPolyGonList" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.SearchBound@$refId::getPolyGonList([])")
        
            // 开始调用
            val result = ref.getPolyGonList()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.cloud.CloudImage::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudImage
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudImage@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudImage::setId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudImage
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudImage@$refId::setId([\"var1\":$var1])")
        
            // 开始调用
            ref.setId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudImage::getPreurl" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudImage
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudImage@$refId::getPreurl([])")
        
            // 开始调用
            val result = ref.getPreurl()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudImage::setPreurl" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudImage
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudImage@$refId::setPreurl([\"var1\":$var1])")
        
            // 开始调用
            ref.setPreurl(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudImage::getUrl" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudImage
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudImage@$refId::getUrl([])")
        
            // 开始调用
            val result = ref.getUrl()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.cloud.CloudImage::setUrl" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudImage
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudImage@$refId::setUrl([\"var1\":$var1])")
        
            // 开始调用
            ref.setUrl(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener::onCloudSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.cloud.CloudResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener@$refId::onCloudSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onCloudSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener::onCloudItemDetailSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.cloud.CloudItemDetail
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener@$refId::onCloudItemDetailSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onCloudItemDetailSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getDate" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getDate([])")
        
            // 开始调用
            val result = ref.getDate()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setDate" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setDate([\"var1\":$var1])")
        
            // 开始调用
            ref.setDate(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getWeek" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getWeek([])")
        
            // 开始调用
            val result = ref.getWeek()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setWeek" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setWeek([\"var1\":$var1])")
        
            // 开始调用
            ref.setWeek(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getDayWeather" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getDayWeather([])")
        
            // 开始调用
            val result = ref.getDayWeather()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setDayWeather" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setDayWeather([\"var1\":$var1])")
        
            // 开始调用
            ref.setDayWeather(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getNightWeather" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getNightWeather([])")
        
            // 开始调用
            val result = ref.getNightWeather()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setNightWeather" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setNightWeather([\"var1\":$var1])")
        
            // 开始调用
            ref.setNightWeather(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getDayTemp" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getDayTemp([])")
        
            // 开始调用
            val result = ref.getDayTemp()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setDayTemp" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setDayTemp([\"var1\":$var1])")
        
            // 开始调用
            ref.setDayTemp(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getNightTemp" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getNightTemp([])")
        
            // 开始调用
            val result = ref.getNightTemp()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setNightTemp" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setNightTemp([\"var1\":$var1])")
        
            // 开始调用
            ref.setNightTemp(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getDayWindDirection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getDayWindDirection([])")
        
            // 开始调用
            val result = ref.getDayWindDirection()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setDayWindDirection" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setDayWindDirection([\"var1\":$var1])")
        
            // 开始调用
            ref.setDayWindDirection(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getNightWindDirection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getNightWindDirection([])")
        
            // 开始调用
            val result = ref.getNightWindDirection()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setNightWindDirection" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setNightWindDirection([\"var1\":$var1])")
        
            // 开始调用
            ref.setNightWindDirection(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getDayWindPower" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getDayWindPower([])")
        
            // 开始调用
            val result = ref.getDayWindPower()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setDayWindPower" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setDayWindPower([\"var1\":$var1])")
        
            // 开始调用
            ref.setDayWindPower(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::getNightWindPower" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::getNightWindPower([])")
        
            // 开始调用
            val result = ref.getNightWindPower()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalDayWeatherForecast::setNightWindPower" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalDayWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalDayWeatherForecast@$refId::setNightWindPower([\"var1\":$var1])")
        
            // 开始调用
            ref.setNightWindPower(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.WeatherSearchQuery::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearchQuery@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.WeatherSearchQuery::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearchQuery@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.WeatherSearchQuery::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearchQuery@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener::onWeatherLiveSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.weather.LocalWeatherLiveResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener@$refId::onWeatherLiveSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onWeatherLiveSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener::onWeatherForecastSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.weather.LocalWeatherForecastResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener@$refId::onWeatherForecastSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onWeatherForecastSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherForecastResult::createPagedResult" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as com.amap.api.services.weather.WeatherSearchQuery
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecastResult::createPagedResult([])")
        
            // 开始调用
            val result = com.amap.api.services.weather.LocalWeatherForecastResult.createPagedResult(var0, var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.weather.LocalWeatherForecastResult::getWeatherForecastQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecastResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecastResult@$refId::getWeatherForecastQuery([])")
        
            // 开始调用
            val result = ref.getWeatherForecastQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.weather.LocalWeatherForecastResult::getForecastResult" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecastResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecastResult@$refId::getForecastResult([])")
        
            // 开始调用
            val result = ref.getForecastResult()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.weather.LocalWeatherForecast::getProvince" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::getProvince([])")
        
            // 开始调用
            val result = ref.getProvince()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherForecast::setProvince" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::setProvince([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvince(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherForecast::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherForecast::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherForecast::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherForecast::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherForecast::getReportTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::getReportTime([])")
        
            // 开始调用
            val result = ref.getReportTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherForecast::setReportTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::setReportTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setReportTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherForecast::getWeatherForecast" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::getWeatherForecast([])")
        
            // 开始调用
            val result = ref.getWeatherForecast()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.weather.LocalWeatherForecast::setWeatherForecast" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.weather.LocalDayWeatherForecast }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherForecast
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherForecast@$refId::setWeatherForecast([])")
        
            // 开始调用
            ref.setWeatherForecast(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.WeatherSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.weather.WeatherSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.weather.WeatherSearchQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.WeatherSearch::searchWeatherAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearch@$refId::searchWeatherAsyn([])")
        
            // 开始调用
            ref.searchWeatherAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.WeatherSearch::setOnWeatherSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.WeatherSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.WeatherSearch@$refId::setOnWeatherSearchListener([])")
        
            // 开始调用
            ref.setOnWeatherSearchListener(object : com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.weather.WeatherSearch::setOnWeatherSearchListener::Callback")
        
                // 回调方法们
                override fun onWeatherLiveSearched(var1: com.amap.api.services.weather.LocalWeatherLiveResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onWeatherLiveSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener::onWeatherLiveSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onWeatherForecastSearched(var1: com.amap.api.services.weather.LocalWeatherForecastResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onWeatherForecastSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener::onWeatherForecastSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::getProvince" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getProvince([])")
        
            // 开始调用
            val result = ref.getProvince()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::getWeather" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getWeather([])")
        
            // 开始调用
            val result = ref.getWeather()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::getTemperature" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getTemperature([])")
        
            // 开始调用
            val result = ref.getTemperature()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::getWindDirection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getWindDirection([])")
        
            // 开始调用
            val result = ref.getWindDirection()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::getWindPower" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getWindPower([])")
        
            // 开始调用
            val result = ref.getWindPower()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::getHumidity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getHumidity([])")
        
            // 开始调用
            val result = ref.getHumidity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::getReportTime" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::getReportTime([])")
        
            // 开始调用
            val result = ref.getReportTime()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.weather.LocalWeatherLive::setProvince" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setProvince([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvince(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::setWeather" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setWeather([\"var1\":$var1])")
        
            // 开始调用
            ref.setWeather(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::setTemperature" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setTemperature([\"var1\":$var1])")
        
            // 开始调用
            ref.setTemperature(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::setWindDirection" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setWindDirection([\"var1\":$var1])")
        
            // 开始调用
            ref.setWindDirection(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::setWindPower" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setWindPower([\"var1\":$var1])")
        
            // 开始调用
            ref.setWindPower(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::setHumidity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setHumidity([\"var1\":$var1])")
        
            // 开始调用
            ref.setHumidity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLive::setReportTime" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLive
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLive@$refId::setReportTime([\"var1\":$var1])")
        
            // 开始调用
            ref.setReportTime(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.weather.LocalWeatherLiveResult::createPagedResult" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var0 = HEAP[args["var0"] as Int] as com.amap.api.services.weather.WeatherSearchQuery
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.weather.LocalWeatherLive
        
            // 调用对象引用
        
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLiveResult::createPagedResult([])")
        
            // 开始调用
            val result = com.amap.api.services.weather.LocalWeatherLiveResult.createPagedResult(var0, var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.weather.LocalWeatherLiveResult::getWeatherLiveQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLiveResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLiveResult@$refId::getWeatherLiveQuery([])")
        
            // 开始调用
            val result = ref.getWeatherLiveQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.weather.LocalWeatherLiveResult::getLiveResult" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.weather.LocalWeatherLiveResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.weather.LocalWeatherLiveResult@$refId::getLiveResult([])")
        
            // 开始调用
            val result = ref.getLiveResult()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.BusinessArea::getCenterPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.BusinessArea
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.BusinessArea@$refId::getCenterPoint([])")
        
            // 开始调用
            val result = ref.getCenterPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.BusinessArea::setCenterPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.BusinessArea
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.BusinessArea@$refId::setCenterPoint([])")
        
            // 开始调用
            ref.setCenterPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.BusinessArea::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.BusinessArea
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.BusinessArea@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.BusinessArea::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.BusinessArea
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.BusinessArea@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeQuery::getLocationName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeQuery@$refId::getLocationName([])")
        
            // 开始调用
            val result = ref.getLocationName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeQuery::setLocationName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeQuery@$refId::setLocationName([\"var1\":$var1])")
        
            // 开始调用
            ref.setLocationName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeQuery::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeQuery@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeQuery::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeQuery@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeSearch::getFromLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeSearch@$refId::getFromLocation([])")
        
            // 开始调用
            val result = ref.getFromLocation(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.GeocodeSearch::getFromLocationName" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeSearch@$refId::getFromLocationName([])")
        
            // 开始调用
            val result = ref.getFromLocationName(var1)
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.GeocodeSearch::setOnGeocodeSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeSearch@$refId::setOnGeocodeSearchListener([])")
        
            // 开始调用
            ref.setOnGeocodeSearchListener(object : com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.geocoder.GeocodeSearch::setOnGeocodeSearchListener::Callback")
        
                // 回调方法们
                override fun onRegeocodeSearched(var1: com.amap.api.services.geocoder.RegeocodeResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onRegeocodeSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener::onRegeocodeSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onGeocodeSearched(var1: com.amap.api.services.geocoder.GeocodeResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onGeocodeSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener::onGeocodeSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeSearch::getFromLocationAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeSearch@$refId::getFromLocationAsyn([])")
        
            // 开始调用
            ref.getFromLocationAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeSearch::getFromLocationNameAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeSearch@$refId::getFromLocationNameAsyn([])")
        
            // 开始调用
            ref.getFromLocationNameAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeResult::getRegeocodeQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeResult@$refId::getRegeocodeQuery([])")
        
            // 开始调用
            val result = ref.getRegeocodeQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeResult::setRegeocodeQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeResult@$refId::setRegeocodeQuery([])")
        
            // 开始调用
            ref.setRegeocodeQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeResult::getRegeocodeAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeResult@$refId::getRegeocodeAddress([])")
        
            // 开始调用
            val result = ref.getRegeocodeAddress()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeResult::setRegeocodeAddress" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeResult@$refId::setRegeocodeAddress([])")
        
            // 开始调用
            ref.setRegeocodeAddress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeResult::getGeocodeQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeResult@$refId::getGeocodeQuery([])")
        
            // 开始调用
            val result = ref.getGeocodeQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.GeocodeResult::setGeocodeQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeResult@$refId::setGeocodeQuery([])")
        
            // 开始调用
            ref.setGeocodeQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeResult::getGeocodeAddressList" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeResult@$refId::getGeocodeAddressList([])")
        
            // 开始调用
            val result = ref.getGeocodeAddressList()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.GeocodeResult::setGeocodeAddressList" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.geocoder.GeocodeAddress }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeResult@$refId::setGeocodeAddressList([])")
        
            // 开始调用
            ref.setGeocodeAddressList(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.AoiItem::getAoiId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::getAoiId([])")
        
            // 开始调用
            val result = ref.getAoiId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.AoiItem::getAoiName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::getAoiName([])")
        
            // 开始调用
            val result = ref.getAoiName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.AoiItem::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.AoiItem::getAoiCenterPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::getAoiCenterPoint([])")
        
            // 开始调用
            val result = ref.getAoiCenterPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.AoiItem::getAoiArea" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::getAoiArea([])")
        
            // 开始调用
            val result = ref.getAoiArea()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.AoiItem::setId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::setId([\"var1\":$var1])")
        
            // 开始调用
            ref.setId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.AoiItem::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.AoiItem::setAdcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::setAdcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.AoiItem::setLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::setLocation([])")
        
            // 开始调用
            ref.setLocation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.AoiItem::setArea" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.AoiItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.AoiItem@$refId::setArea([\"var1\":$var1])")
        
            // 开始调用
            ref.setArea(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener::onRegeocodeSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.RegeocodeResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener@$refId::onRegeocodeSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onRegeocodeSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener::onGeocodeSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.GeocodeResult
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener@$refId::onGeocodeSearched([\"var2\":$var2])")
        
            // 开始调用
            ref.onGeocodeSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::getId" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::getId([])")
        
            // 开始调用
            val result = ref.getId()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::setId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::setId([\"var1\":$var1])")
        
            // 开始调用
            ref.setId(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::getDirection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::getDirection([])")
        
            // 开始调用
            val result = ref.getDirection()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::setDirection" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::setDirection([\"var1\":$var1])")
        
            // 开始调用
            ref.setDirection(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::getLatLngPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::getLatLngPoint([])")
        
            // 开始调用
            val result = ref.getLatLngPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeRoad::setLatLngPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeRoad
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeRoad@$refId::setLatLngPoint([])")
        
            // 开始调用
            ref.setLatLngPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getFormatAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getFormatAddress([])")
        
            // 开始调用
            val result = ref.getFormatAddress()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setFormatAddress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setFormatAddress([\"var1\":$var1])")
        
            // 开始调用
            ref.setFormatAddress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getProvince" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getProvince([])")
        
            // 开始调用
            val result = ref.getProvince()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setProvince" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setProvince([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvince(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getDistrict([])")
        
            // 开始调用
            val result = ref.getDistrict()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setDistrict" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setDistrict([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistrict(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getTownship" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getTownship([])")
        
            // 开始调用
            val result = ref.getTownship()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setTownship" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setTownship([\"var1\":$var1])")
        
            // 开始调用
            ref.setTownship(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getNeighborhood" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getNeighborhood([])")
        
            // 开始调用
            val result = ref.getNeighborhood()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setNeighborhood" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setNeighborhood([\"var1\":$var1])")
        
            // 开始调用
            ref.setNeighborhood(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getBuilding" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getBuilding([])")
        
            // 开始调用
            val result = ref.getBuilding()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setBuilding" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setBuilding([\"var1\":$var1])")
        
            // 开始调用
            ref.setBuilding(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getAdcode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getAdcode([])")
        
            // 开始调用
            val result = ref.getAdcode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setAdcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setAdcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getLatLonPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getLatLonPoint([])")
        
            // 开始调用
            val result = ref.getLatLonPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setLatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setLatLonPoint([])")
        
            // 开始调用
            ref.setLatLonPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.GeocodeAddress::getLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::getLevel([])")
        
            // 开始调用
            val result = ref.getLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.GeocodeAddress::setLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.GeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.GeocodeAddress@$refId::setLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setLevel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeQuery::getPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeQuery@$refId::getPoint([])")
        
            // 开始调用
            val result = ref.getPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeQuery::setPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeQuery@$refId::setPoint([])")
        
            // 开始调用
            ref.setPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeQuery::getRadius" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeQuery@$refId::getRadius([])")
        
            // 开始调用
            val result = ref.getRadius()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeQuery::setRadius" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeQuery@$refId::setRadius([\"var1\":$var1])")
        
            // 开始调用
            ref.setRadius(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeQuery::getLatLonType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeQuery@$refId::getLatLonType([])")
        
            // 开始调用
            val result = ref.getLatLonType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeQuery::setLatLonType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeQuery@$refId::setLatLonType([\"var1\":$var1])")
        
            // 开始调用
            ref.setLatLonType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeQuery::getPoiType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeQuery@$refId::getPoiType([])")
        
            // 开始调用
            val result = ref.getPoiType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeQuery::setPoiType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeQuery@$refId::setPoiType([\"var1\":$var1])")
        
            // 开始调用
            ref.setPoiType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.StreetNumber::getStreet" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::getStreet([])")
        
            // 开始调用
            val result = ref.getStreet()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.StreetNumber::setStreet" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::setStreet([\"var1\":$var1])")
        
            // 开始调用
            ref.setStreet(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.StreetNumber::getNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::getNumber([])")
        
            // 开始调用
            val result = ref.getNumber()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.StreetNumber::setNumber" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::setNumber([\"var1\":$var1])")
        
            // 开始调用
            ref.setNumber(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.StreetNumber::getLatLonPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::getLatLonPoint([])")
        
            // 开始调用
            val result = ref.getLatLonPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.StreetNumber::setLatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::setLatLonPoint([])")
        
            // 开始调用
            ref.setLatLonPoint(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.StreetNumber::getDirection" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::getDirection([])")
        
            // 开始调用
            val result = ref.getDirection()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.StreetNumber::setDirection" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::setDirection([\"var1\":$var1])")
        
            // 开始调用
            ref.setDirection(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.StreetNumber::getDistance" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::getDistance([])")
        
            // 开始调用
            val result = ref.getDistance()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.StreetNumber::setDistance" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.StreetNumber
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.StreetNumber@$refId::setDistance([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistance(var1.toFloat())
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getFormatAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getFormatAddress([])")
        
            // 开始调用
            val result = ref.getFormatAddress()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setFormatAddress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setFormatAddress([\"var1\":$var1])")
        
            // 开始调用
            ref.setFormatAddress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getProvince" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getProvince([])")
        
            // 开始调用
            val result = ref.getProvince()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setProvince" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setProvince([\"var1\":$var1])")
        
            // 开始调用
            ref.setProvince(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setCity" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setCity([\"var1\":$var1])")
        
            // 开始调用
            ref.setCity(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getCityCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getCityCode([])")
        
            // 开始调用
            val result = ref.getCityCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setCityCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setCityCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getAdCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getAdCode([])")
        
            // 开始调用
            val result = ref.getAdCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setAdCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setAdCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getDistrict([])")
        
            // 开始调用
            val result = ref.getDistrict()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setDistrict" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setDistrict([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistrict(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getTownship" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getTownship([])")
        
            // 开始调用
            val result = ref.getTownship()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setTownship" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setTownship([\"var1\":$var1])")
        
            // 开始调用
            ref.setTownship(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getNeighborhood" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getNeighborhood([])")
        
            // 开始调用
            val result = ref.getNeighborhood()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setNeighborhood" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setNeighborhood([\"var1\":$var1])")
        
            // 开始调用
            ref.setNeighborhood(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getBuilding" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getBuilding([])")
        
            // 开始调用
            val result = ref.getBuilding()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setBuilding" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setBuilding([\"var1\":$var1])")
        
            // 开始调用
            ref.setBuilding(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getStreetNumber" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getStreetNumber([])")
        
            // 开始调用
            val result = ref.getStreetNumber()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setStreetNumber" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.StreetNumber
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setStreetNumber([])")
        
            // 开始调用
            ref.setStreetNumber(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getRoads" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getRoads([])")
        
            // 开始调用
            val result = ref.getRoads()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setRoads" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.geocoder.RegeocodeRoad }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setRoads([])")
        
            // 开始调用
            ref.setRoads(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getPois" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getPois([])")
        
            // 开始调用
            val result = ref.getPois()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setPois" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.PoiItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setPois([])")
        
            // 开始调用
            ref.setPois(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getCrossroads" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getCrossroads([])")
        
            // 开始调用
            val result = ref.getCrossroads()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setCrossroads" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.road.Crossroad }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setCrossroads([])")
        
            // 开始调用
            ref.setCrossroads(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getBusinessAreas" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getBusinessAreas([])")
        
            // 开始调用
            val result = ref.getBusinessAreas()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setBusinessAreas" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.geocoder.BusinessArea }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setBusinessAreas([])")
        
            // 开始调用
            ref.setBusinessAreas(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getAois" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getAois([])")
        
            // 开始调用
            val result = ref.getAois()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setAois" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.geocoder.AoiItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setAois([])")
        
            // 开始调用
            ref.setAois(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getTowncode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getTowncode([])")
        
            // 开始调用
            val result = ref.getTowncode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setTowncode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setTowncode([\"var1\":$var1])")
        
            // 开始调用
            ref.setTowncode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::setCountry" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::setCountry([\"var1\":$var1])")
        
            // 开始调用
            ref.setCountry(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.geocoder.RegeocodeAddress::getCountry" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.geocoder.RegeocodeAddress@$refId::getCountry([])")
        
            // 开始调用
            val result = ref.getCountry()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::setShowBoundary" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::setShowBoundary([\"var1\":$var1])")
        
            // 开始调用
            ref.setShowBoundary(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearchQuery::isShowBoundary" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::isShowBoundary([])")
        
            // 开始调用
            val result = ref.isShowBoundary()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::getPageNum" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::getPageNum([])")
        
            // 开始调用
            val result = ref.getPageNum()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::setPageNum" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::setPageNum([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageNum(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearchQuery::getPageSize" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::getPageSize([])")
        
            // 开始调用
            val result = ref.getPageSize()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::setPageSize" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::setPageSize([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageSize(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearchQuery::getKeywords" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::getKeywords([])")
        
            // 开始调用
            val result = ref.getKeywords()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::setKeywords" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::setKeywords([\"var1\":$var1])")
        
            // 开始调用
            ref.setKeywords(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearchQuery::getKeywordsLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::getKeywordsLevel([])")
        
            // 开始调用
            val result = ref.getKeywordsLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::setKeywordsLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::setKeywordsLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setKeywordsLevel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearchQuery::isShowChild" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::isShowChild([])")
        
            // 开始调用
            val result = ref.isShowChild()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::setShowChild" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::setShowChild([\"var1\":$var1])")
        
            // 开始调用
            ref.setShowChild(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearchQuery::isShowBusinessArea" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::isShowBusinessArea([])")
        
            // 开始调用
            val result = ref.isShowBusinessArea()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::setShowBusinessArea" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::setShowBusinessArea([\"var1\":$var1])")
        
            // 开始调用
            ref.setShowBusinessArea(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearchQuery::checkLevels" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::checkLevels([])")
        
            // 开始调用
            val result = ref.checkLevels()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::checkKeyWords" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::checkKeyWords([])")
        
            // 开始调用
            val result = ref.checkKeyWords()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::weakEquals" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.district.DistrictSearchQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::weakEquals([])")
        
            // 开始调用
            val result = ref.weakEquals(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictSearchQuery::clone" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearchQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearchQuery@$refId::clone([])")
        
            // 开始调用
            val result = ref.clone()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.district.DistrictSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.district.DistrictSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.district.DistrictSearchQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearch::searchDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearch@$refId::searchDistrict([])")
        
            // 开始调用
            val result = ref.searchDistrict()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.district.DistrictSearch::searchDistrictAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearch@$refId::searchDistrictAsyn([])")
        
            // 开始调用
            ref.searchDistrictAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearch::searchDistrictAnsy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearch@$refId::searchDistrictAnsy([])")
        
            // 开始调用
            ref.searchDistrictAnsy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearch::setOnDistrictSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearch@$refId::setOnDistrictSearchListener([])")
        
            // 开始调用
            ref.setOnDistrictSearchListener(object : com.amap.api.services.district.DistrictSearch.OnDistrictSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.district.DistrictSearch::setOnDistrictSearchListener::Callback")
        
                // 回调方法们
                override fun onDistrictSearched(var1: com.amap.api.services.district.DistrictResult): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDistrictSearched([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.district.DistrictSearch.OnDistrictSearchListener::onDistrictSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictResult::getDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictResult@$refId::getDistrict([])")
        
            // 开始调用
            val result = ref.getDistrict()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.district.DistrictResult::setDistrict" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.district.DistrictItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictResult@$refId::setDistrict([])")
        
            // 开始调用
            ref.setDistrict(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictResult::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictResult@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.district.DistrictResult::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.district.DistrictSearchQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictResult@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictResult::getPageCount" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictResult@$refId::getPageCount([])")
        
            // 开始调用
            val result = ref.getPageCount()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictResult::setPageCount" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictResult@$refId::setPageCount([\"var1\":$var1])")
        
            // 开始调用
            ref.setPageCount(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictResult::getAMapException" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictResult@$refId::getAMapException([])")
        
            // 开始调用
            val result = ref.getAMapException()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.district.DistrictResult::setAMapException" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.AMapException
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictResult
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictResult@$refId::setAMapException([])")
        
            // 开始调用
            ref.setAMapException(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictItem::getCitycode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::getCitycode([])")
        
            // 开始调用
            val result = ref.getCitycode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictItem::setCitycode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::setCitycode([\"var1\":$var1])")
        
            // 开始调用
            ref.setCitycode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictItem::getAdcode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::getAdcode([])")
        
            // 开始调用
            val result = ref.getAdcode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictItem::setAdcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::setAdcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictItem::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictItem::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictItem::getCenter" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::getCenter([])")
        
            // 开始调用
            val result = ref.getCenter()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.district.DistrictItem::setCenter" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::setCenter([])")
        
            // 开始调用
            ref.setCenter(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictItem::getLevel" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::getLevel([])")
        
            // 开始调用
            val result = ref.getLevel()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.district.DistrictItem::setLevel" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::setLevel([\"var1\":$var1])")
        
            // 开始调用
            ref.setLevel(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictItem::getSubDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::getSubDistrict([])")
        
            // 开始调用
            val result = ref.getSubDistrict()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.district.DistrictItem::setSubDistrict" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.district.DistrictItem }
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictItem
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictItem@$refId::setSubDistrict([])")
        
            // 开始调用
            ref.setSubDistrict(ArrayList(var1))
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.district.DistrictSearch.OnDistrictSearchListener::onDistrictSearched" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.district.DistrictResult
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.district.DistrictSearch.OnDistrictSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.district.DistrictSearch.OnDistrictSearchListener@$refId::onDistrictSearched([])")
        
            // 开始调用
            ref.onDistrictSearched(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Inputtips.InputtipsListener::onGetInputtips" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.help.Tip }
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Inputtips.InputtipsListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Inputtips.InputtipsListener@$refId::onGetInputtips([\"var2\":$var2])")
        
            // 开始调用
            ref.onGetInputtips(ArrayList(var1), var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Tip::getPoiID" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::getPoiID([])")
        
            // 开始调用
            val result = ref.getPoiID()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.Tip::setID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::setID([\"var1\":$var1])")
        
            // 开始调用
            ref.setID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Tip::getPoint" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::getPoint([])")
        
            // 开始调用
            val result = ref.getPoint()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.help.Tip::setPostion" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::setPostion([])")
        
            // 开始调用
            ref.setPostion(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Tip::getName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::getName([])")
        
            // 开始调用
            val result = ref.getName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.Tip::setName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::setName([\"var1\":$var1])")
        
            // 开始调用
            ref.setName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Tip::getDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::getDistrict([])")
        
            // 开始调用
            val result = ref.getDistrict()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.Tip::setDistrict" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::setDistrict([\"var1\":$var1])")
        
            // 开始调用
            ref.setDistrict(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Tip::getAdcode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::getAdcode([])")
        
            // 开始调用
            val result = ref.getAdcode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.Tip::setAdcode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::setAdcode([\"var1\":$var1])")
        
            // 开始调用
            ref.setAdcode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Tip::getAddress" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::getAddress([])")
        
            // 开始调用
            val result = ref.getAddress()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.Tip::setAddress" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::setAddress([\"var1\":$var1])")
        
            // 开始调用
            ref.setAddress(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Tip::setTypeCode" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::setTypeCode([\"var1\":$var1])")
        
            // 开始调用
            ref.setTypeCode(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Tip::getTypeCode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Tip
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Tip@$refId::getTypeCode([])")
        
            // 开始调用
            val result = ref.getTypeCode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.InputtipsQuery::getKeyword" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.InputtipsQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.InputtipsQuery@$refId::getKeyword([])")
        
            // 开始调用
            val result = ref.getKeyword()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.InputtipsQuery::getCity" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.InputtipsQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.InputtipsQuery@$refId::getCity([])")
        
            // 开始调用
            val result = ref.getCity()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.InputtipsQuery::setType" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.InputtipsQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.InputtipsQuery@$refId::setType([\"var1\":$var1])")
        
            // 开始调用
            ref.setType(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.InputtipsQuery::getType" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.InputtipsQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.InputtipsQuery@$refId::getType([])")
        
            // 开始调用
            val result = ref.getType()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.InputtipsQuery::setCityLimit" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Boolean
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.InputtipsQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.InputtipsQuery@$refId::setCityLimit([\"var1\":$var1])")
        
            // 开始调用
            ref.setCityLimit(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.InputtipsQuery::getCityLimit" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.InputtipsQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.InputtipsQuery@$refId::getCityLimit([])")
        
            // 开始调用
            val result = ref.getCityLimit()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.help.InputtipsQuery::setLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.InputtipsQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.InputtipsQuery@$refId::setLocation([])")
        
            // 开始调用
            ref.setLocation(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.InputtipsQuery::getLocation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.InputtipsQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.InputtipsQuery@$refId::getLocation([])")
        
            // 开始调用
            val result = ref.getLocation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.help.Inputtips::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Inputtips
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Inputtips@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.help.Inputtips::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.help.InputtipsQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Inputtips
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Inputtips@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Inputtips::setInputtipsListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Inputtips
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Inputtips@$refId::setInputtipsListener([])")
        
            // 开始调用
            ref.setInputtipsListener(object : com.amap.api.services.help.Inputtips.InputtipsListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.help.Inputtips::setInputtipsListener::Callback")
        
                // 回调方法们
                override fun onGetInputtips(var1: List<com.amap.api.services.help.Tip>, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onGetInputtips([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.map { it.apply { HEAP[it.hashCode()] = it }.hashCode() }
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.help.Inputtips.InputtipsListener::onGetInputtips",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Inputtips::requestInputtipsAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Inputtips
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Inputtips@$refId::requestInputtipsAsyn([])")
        
            // 开始调用
            ref.requestInputtipsAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.help.Inputtips::requestInputtips" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.help.Inputtips
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.help.Inputtips@$refId::requestInputtips([])")
        
            // 开始调用
            val result = ref.requestInputtips()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IDistrictSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistrictSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IDistrictSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.district.DistrictSearchQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistrictSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IDistrictSearch::searchDistrictAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistrictSearch@$refId::searchDistrictAsyn([])")
        
            // 开始调用
            ref.searchDistrictAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IDistrictSearch::searchDistrictAnsy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistrictSearch@$refId::searchDistrictAnsy([])")
        
            // 开始调用
            ref.searchDistrictAnsy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IDistrictSearch::setOnDistrictSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistrictSearch@$refId::setOnDistrictSearchListener([])")
        
            // 开始调用
            ref.setOnDistrictSearchListener(object : com.amap.api.services.district.DistrictSearch.OnDistrictSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IDistrictSearch::setOnDistrictSearchListener::Callback")
        
                // 回调方法们
                override fun onDistrictSearched(var1: com.amap.api.services.district.DistrictResult): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDistrictSearched([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.district.DistrictSearch.OnDistrictSearchListener::onDistrictSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IDistrictSearch::searchDistrict" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistrictSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistrictSearch@$refId::searchDistrict([])")
        
            // 开始调用
            val result = ref.searchDistrict()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IBusStationSearch::searchBusStation" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusStationSearch@$refId::searchBusStation([])")
        
            // 开始调用
            val result = ref.searchBusStation()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IBusStationSearch::setOnBusStationSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusStationSearch@$refId::setOnBusStationSearchListener([])")
        
            // 开始调用
            ref.setOnBusStationSearchListener(object : com.amap.api.services.busline.BusStationSearch.OnBusStationSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IBusStationSearch::setOnBusStationSearchListener::Callback")
        
                // 回调方法们
                override fun onBusStationSearched(var1: com.amap.api.services.busline.BusStationResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onBusStationSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.busline.BusStationSearch.OnBusStationSearchListener::onBusStationSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IBusStationSearch::searchBusStationAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusStationSearch@$refId::searchBusStationAsyn([])")
        
            // 开始调用
            ref.searchBusStationAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IBusStationSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusStationQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusStationSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IBusStationSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusStationSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusStationSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IRouteSearch::setRouteSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::setRouteSearchListener([])")
        
            // 开始调用
            ref.setRouteSearchListener(object : com.amap.api.services.route.RouteSearch.OnRouteSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IRouteSearch::setRouteSearchListener::Callback")
        
                // 回调方法们
                override fun onBusRouteSearched(var1: com.amap.api.services.route.BusRouteResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onBusRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onBusRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onDriveRouteSearched(var1: com.amap.api.services.route.DriveRouteResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDriveRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onDriveRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onWalkRouteSearched(var1: com.amap.api.services.route.WalkRouteResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onWalkRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onWalkRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onRideRouteSearched(var1: com.amap.api.services.route.RideRouteResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onRideRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRouteSearchListener::onRideRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRouteSearch::setOnTruckRouteSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::setOnTruckRouteSearchListener([])")
        
            // 开始调用
            ref.setOnTruckRouteSearchListener(object : com.amap.api.services.route.RouteSearch.OnTruckRouteSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IRouteSearch::setOnTruckRouteSearchListener::Callback")
        
                // 回调方法们
                override fun onTruckRouteSearched(var1: com.amap.api.services.route.TruckRouteRestult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onTruckRouteSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnTruckRouteSearchListener::onTruckRouteSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRouteSearch::setOnRoutePlanSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::setOnRoutePlanSearchListener([])")
        
            // 开始调用
            ref.setOnRoutePlanSearchListener(object : com.amap.api.services.route.RouteSearch.OnRoutePlanSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IRouteSearch::setOnRoutePlanSearchListener::Callback")
        
                // 回调方法们
                override fun onDriveRoutePlanSearched(var1: com.amap.api.services.route.DriveRoutePlanResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDriveRoutePlanSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.RouteSearch.OnRoutePlanSearchListener::onDriveRoutePlanSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateWalkRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.WalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateWalkRoute([])")
        
            // 开始调用
            val result = ref.calculateWalkRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateWalkRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.WalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateWalkRouteAsyn([])")
        
            // 开始调用
            ref.calculateWalkRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateBusRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateBusRoute([])")
        
            // 开始调用
            val result = ref.calculateBusRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateBusRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.BusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateBusRouteAsyn([])")
        
            // 开始调用
            ref.calculateBusRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateDriveRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateDriveRoute([])")
        
            // 开始调用
            val result = ref.calculateDriveRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateDriveRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DriveRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateDriveRouteAsyn([])")
        
            // 开始调用
            ref.calculateDriveRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateRideRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.RideRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateRideRoute([])")
        
            // 开始调用
            val result = ref.calculateRideRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateRideRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.RideRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateRideRouteAsyn([])")
        
            // 开始调用
            ref.calculateRideRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateTruckRoute" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateTruckRoute([])")
        
            // 开始调用
            val result = ref.calculateTruckRoute(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateTruckRouteAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.TruckRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateTruckRouteAsyn([])")
        
            // 开始调用
            ref.calculateTruckRouteAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateDrivePlan" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateDrivePlan([])")
        
            // 开始调用
            val result = ref.calculateDrivePlan(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IRouteSearch::calculateDrivePlanAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.DrivePlanQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRouteSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRouteSearch@$refId::calculateDrivePlanAsyn([])")
        
            // 开始调用
            ref.calculateDrivePlanAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IShareSearch::setOnShareSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::setOnShareSearchListener([])")
        
            // 开始调用
            ref.setOnShareSearchListener(object : com.amap.api.services.share.ShareSearch.OnShareSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IShareSearch::setOnShareSearchListener::Callback")
        
                // 回调方法们
                override fun onPoiShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPoiShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onPoiShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onLocationShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onLocationShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onLocationShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNaviShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNaviShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onNaviShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onBusRouteShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onBusRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onBusRouteShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onWalkRouteShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onWalkRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onWalkRouteShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onDrivingRouteShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDrivingRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onDrivingRouteShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IShareSearch::searchPoiShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.PoiItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchPoiShareUrlAsyn([])")
        
            // 开始调用
            ref.searchPoiShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IShareSearch::searchBusRouteShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareBusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchBusRouteShareUrlAsyn([])")
        
            // 开始调用
            ref.searchBusRouteShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IShareSearch::searchWalkRouteShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchWalkRouteShareUrlAsyn([])")
        
            // 开始调用
            ref.searchWalkRouteShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IShareSearch::searchDrivingRouteShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchDrivingRouteShareUrlAsyn([])")
        
            // 开始调用
            ref.searchDrivingRouteShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IShareSearch::searchNaviShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareNaviQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchNaviShareUrlAsyn([])")
        
            // 开始调用
            ref.searchNaviShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IShareSearch::searchLocationShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonSharePoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchLocationShareUrlAsyn([])")
        
            // 开始调用
            ref.searchLocationShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IShareSearch::searchPoiShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.PoiItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchPoiShareUrl([])")
        
            // 开始调用
            val result = ref.searchPoiShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.interfaces.IShareSearch::searchNaviShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareNaviQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchNaviShareUrl([])")
        
            // 开始调用
            val result = ref.searchNaviShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.interfaces.IShareSearch::searchLocationShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonSharePoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchLocationShareUrl([])")
        
            // 开始调用
            val result = ref.searchLocationShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.interfaces.IShareSearch::searchBusRouteShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareBusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchBusRouteShareUrl([])")
        
            // 开始调用
            val result = ref.searchBusRouteShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.interfaces.IShareSearch::searchDrivingRouteShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchDrivingRouteShareUrl([])")
        
            // 开始调用
            val result = ref.searchDrivingRouteShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.interfaces.IShareSearch::searchWalkRouteShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IShareSearch@$refId::searchWalkRouteShareUrl([])")
        
            // 开始调用
            val result = ref.searchWalkRouteShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.interfaces.IRoutePOISearch::setRoutePOISearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRoutePOISearch@$refId::setRoutePOISearchListener([])")
        
            // 开始调用
            ref.setRoutePOISearchListener(object : com.amap.api.services.routepoisearch.RoutePOISearch.OnRoutePOISearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IRoutePOISearch::setRoutePOISearchListener::Callback")
        
                // 回调方法们
                override fun onRoutePoiSearched(var1: com.amap.api.services.routepoisearch.RoutePOISearchResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onRoutePoiSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.routepoisearch.RoutePOISearch.OnRoutePOISearchListener::onRoutePoiSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRoutePOISearch::searchRoutePOIAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRoutePOISearch@$refId::searchRoutePOIAsyn([])")
        
            // 开始调用
            ref.searchRoutePOIAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRoutePOISearch::searchRoutePOI" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRoutePOISearch@$refId::searchRoutePOI([])")
        
            // 开始调用
            val result = ref.searchRoutePOI()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IRoutePOISearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.routepoisearch.RoutePOISearchQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRoutePOISearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IRoutePOISearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IRoutePOISearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IRoutePOISearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.ITrafficSearch::setTrafficSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.ITrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.ITrafficSearch@$refId::setTrafficSearchListener([])")
        
            // 开始调用
            ref.setTrafficSearchListener(object : com.amap.api.services.traffic.TrafficSearch.OnTrafficSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.ITrafficSearch::setTrafficSearchListener::Callback")
        
                // 回调方法们
                override fun onRoadTrafficSearched(var1: com.amap.api.services.traffic.TrafficStatusResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onRoadTrafficSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.traffic.TrafficSearch.OnTrafficSearchListener::onRoadTrafficSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.ITrafficSearch::loadTrafficByRoad" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.ITrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.ITrafficSearch@$refId::loadTrafficByRoad([])")
        
            // 开始调用
            val result = ref.loadTrafficByRoad(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.ITrafficSearch::loadTrafficByRoadAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.RoadTrafficQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.ITrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.ITrafficSearch@$refId::loadTrafficByRoadAsyn([])")
        
            // 开始调用
            ref.loadTrafficByRoadAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.ITrafficSearch::loadTrafficByCircle" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.ITrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.ITrafficSearch@$refId::loadTrafficByCircle([])")
        
            // 开始调用
            val result = ref.loadTrafficByCircle(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.ITrafficSearch::loadTrafficByCircleAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.traffic.CircleTrafficQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.ITrafficSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.ITrafficSearch@$refId::loadTrafficByCircleAsyn([])")
        
            // 开始调用
            ref.loadTrafficByCircleAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IInputtipsSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IInputtipsSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IInputtipsSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IInputtipsSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.help.InputtipsQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IInputtipsSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IInputtipsSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IInputtipsSearch::setInputtipsListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IInputtipsSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IInputtipsSearch@$refId::setInputtipsListener([])")
        
            // 开始调用
            ref.setInputtipsListener(object : com.amap.api.services.help.Inputtips.InputtipsListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IInputtipsSearch::setInputtipsListener::Callback")
        
                // 回调方法们
                override fun onGetInputtips(var1: List<com.amap.api.services.help.Tip>, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onGetInputtips([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.map { it.apply { HEAP[it.hashCode()] = it }.hashCode() }
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.help.Inputtips.InputtipsListener::onGetInputtips",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IInputtipsSearch::requestInputtipsAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IInputtipsSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IInputtipsSearch@$refId::requestInputtipsAsyn([])")
        
            // 开始调用
            ref.requestInputtipsAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IInputtipsSearch::requestInputtips" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IInputtipsSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IInputtipsSearch@$refId::requestInputtips([])")
        
            // 开始调用
            val result = ref.requestInputtips()
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IGeocodeSearch::getFromLocation" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IGeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IGeocodeSearch@$refId::getFromLocation([])")
        
            // 开始调用
            val result = ref.getFromLocation(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IGeocodeSearch::getFromLocationName" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IGeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IGeocodeSearch@$refId::getFromLocationName([])")
        
            // 开始调用
            val result = ref.getFromLocationName(var1)
        
            // 调用结果
            if (result != null) {
                for (item in result) {
                    HEAP[item.hashCode()] = item
                }
                methodResult.success(result.map { it.hashCode() })
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IGeocodeSearch::setOnGeocodeSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IGeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IGeocodeSearch@$refId::setOnGeocodeSearchListener([])")
        
            // 开始调用
            ref.setOnGeocodeSearchListener(object : com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IGeocodeSearch::setOnGeocodeSearchListener::Callback")
        
                // 回调方法们
                override fun onRegeocodeSearched(var1: com.amap.api.services.geocoder.RegeocodeResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onRegeocodeSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener::onRegeocodeSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onGeocodeSearched(var1: com.amap.api.services.geocoder.GeocodeResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onGeocodeSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.geocoder.GeocodeSearch.OnGeocodeSearchListener::onGeocodeSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IGeocodeSearch::getFromLocationAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.RegeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IGeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IGeocodeSearch@$refId::getFromLocationAsyn([])")
        
            // 开始调用
            ref.getFromLocationAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IGeocodeSearch::getFromLocationNameAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.GeocodeQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IGeocodeSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IGeocodeSearch@$refId::getFromLocationNameAsyn([])")
        
            // 开始调用
            ref.getFromLocationNameAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.ICloudSearch::setOnCloudSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.ICloudSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.ICloudSearch@$refId::setOnCloudSearchListener([])")
        
            // 开始调用
            ref.setOnCloudSearchListener(object : com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.ICloudSearch::setOnCloudSearchListener::Callback")
        
                // 回调方法们
                override fun onCloudSearched(var1: com.amap.api.services.cloud.CloudResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCloudSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener::onCloudSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onCloudItemDetailSearched(var1: com.amap.api.services.cloud.CloudItemDetail, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onCloudItemDetailSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.cloud.CloudSearch.OnCloudSearchListener::onCloudItemDetailSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.ICloudSearch::searchCloudAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.cloud.CloudSearch.Query
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.ICloudSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.ICloudSearch@$refId::searchCloudAsyn([])")
        
            // 开始调用
            ref.searchCloudAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.ICloudSearch::searchCloudDetailAsyn" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.ICloudSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.ICloudSearch@$refId::searchCloudDetailAsyn([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.searchCloudDetailAsyn(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IDistanceSearch::calculateRouteDistance" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistanceSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistanceSearch@$refId::calculateRouteDistance([])")
        
            // 开始调用
            val result = ref.calculateRouteDistance(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IDistanceSearch::calculateRouteDistanceAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.DistanceSearch.DistanceQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistanceSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistanceSearch@$refId::calculateRouteDistanceAsyn([])")
        
            // 开始调用
            ref.calculateRouteDistanceAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IDistanceSearch::setDistanceSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IDistanceSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IDistanceSearch@$refId::setDistanceSearchListener([])")
        
            // 开始调用
            ref.setDistanceSearchListener(object : com.amap.api.services.route.DistanceSearch.OnDistanceSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IDistanceSearch::setDistanceSearchListener::Callback")
        
                // 回调方法们
                override fun onDistanceSearched(var1: com.amap.api.services.route.DistanceResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDistanceSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.route.DistanceSearch.OnDistanceSearchListener::onDistanceSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IPoiSearch::setOnPoiSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::setOnPoiSearchListener([])")
        
            // 开始调用
            ref.setOnPoiSearchListener(object : com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IPoiSearch::setOnPoiSearchListener::Callback")
        
                // 回调方法们
                override fun onPoiSearched(var1: com.amap.api.services.poisearch.PoiResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPoiSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener::onPoiSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onPoiItemSearched(var1: com.amap.api.services.core.PoiItem, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPoiItemSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.poisearch.PoiSearch.OnPoiSearchListener::onPoiItemSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IPoiSearch::setLanguage" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::setLanguage([\"var1\":$var1])")
        
            // 开始调用
            ref.setLanguage(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IPoiSearch::getLanguage" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::getLanguage([])")
        
            // 开始调用
            val result = ref.getLanguage()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.interfaces.IPoiSearch::searchPOI" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::searchPOI([])")
        
            // 开始调用
            val result = ref.searchPOI()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IPoiSearch::searchPOIAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::searchPOIAsyn([])")
        
            // 开始调用
            ref.searchPOIAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IPoiSearch::searchPOIId" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::searchPOIId([\"var1\":$var1])")
        
            // 开始调用
            val result = ref.searchPOIId(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IPoiSearch::searchPOIIdAsyn" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::searchPOIIdAsyn([\"var1\":$var1])")
        
            // 开始调用
            ref.searchPOIIdAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IPoiSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IPoiSearch::setBound" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.poisearch.PoiSearch.SearchBound
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::setBound([])")
        
            // 开始调用
            ref.setBound(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IPoiSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IPoiSearch::getBound" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IPoiSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IPoiSearch@$refId::getBound([])")
        
            // 开始调用
            val result = ref.getBound()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IWeatherSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IWeatherSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IWeatherSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IWeatherSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.weather.WeatherSearchQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IWeatherSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IWeatherSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IWeatherSearch::searchWeatherAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IWeatherSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IWeatherSearch@$refId::searchWeatherAsyn([])")
        
            // 开始调用
            ref.searchWeatherAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IWeatherSearch::setOnWeatherSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IWeatherSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IWeatherSearch@$refId::setOnWeatherSearchListener([])")
        
            // 开始调用
            ref.setOnWeatherSearchListener(object : com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IWeatherSearch::setOnWeatherSearchListener::Callback")
        
                // 回调方法们
                override fun onWeatherLiveSearched(var1: com.amap.api.services.weather.LocalWeatherLiveResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onWeatherLiveSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener::onWeatherLiveSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onWeatherForecastSearched(var1: com.amap.api.services.weather.LocalWeatherForecastResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onWeatherForecastSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.weather.WeatherSearch.OnWeatherSearchListener::onWeatherForecastSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::addNearbyListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::addNearbyListener([])")
        
            // 开始调用
            ref.addNearbyListener(object : com.amap.api.services.nearby.NearbySearch.NearbyListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.INearbySearch::addNearbyListener::Callback")
        
                // 回调方法们
                override fun onUserInfoCleared(var1: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onUserInfoCleared([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onUserInfoCleared",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNearbyInfoSearched(var1: com.amap.api.services.nearby.NearbySearchResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNearbyInfoSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNearbyInfoUploaded(var1: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNearbyInfoUploaded([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoUploaded",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::removeNearbyListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::removeNearbyListener([])")
        
            // 开始调用
            ref.removeNearbyListener(object : com.amap.api.services.nearby.NearbySearch.NearbyListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.INearbySearch::removeNearbyListener::Callback")
        
                // 回调方法们
                override fun onUserInfoCleared(var1: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onUserInfoCleared([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onUserInfoCleared",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNearbyInfoSearched(var1: com.amap.api.services.nearby.NearbySearchResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNearbyInfoSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNearbyInfoUploaded(var1: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNearbyInfoUploaded([\"var1\":$var1])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.NearbySearch.NearbyListener::onNearbyInfoUploaded",
                        mapOf<String, Any?>(
                            "var1" to argvar1
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::clearUserInfoAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::clearUserInfoAsyn([])")
        
            // 开始调用
            ref.clearUserInfoAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::setUserID" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::setUserID([\"var1\":$var1])")
        
            // 开始调用
            ref.setUserID(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::startUploadNearbyInfoAuto" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::startUploadNearbyInfoAuto([\"var2\":$var2])")
        
            // 开始调用
            ref.startUploadNearbyInfoAuto(object : com.amap.api.services.nearby.UploadInfoCallback {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.INearbySearch::startUploadNearbyInfoAuto::Callback")
        
                // 回调方法们
                override fun OnUploadInfoCallback(): com.amap.api.services.nearby.UploadInfo? {
                    // 日志打印
                    println("fluttify-kotlin-callback: OnUploadInfoCallback([])")
        
                    // 处理成可以传输的参数
        
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.nearby.UploadInfoCallback::OnUploadInfoCallback",
                        mapOf<String, Any?>(
            
                        )
                    )
        
                    // 方法返回值
                    return null
                }
        
            }, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::stopUploadNearbyInfoAuto" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::stopUploadNearbyInfoAuto([])")
        
            // 开始调用
            ref.stopUploadNearbyInfoAuto()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::uploadNearbyInfoAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.nearby.UploadInfo
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::uploadNearbyInfoAsyn([])")
        
            // 开始调用
            ref.uploadNearbyInfoAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::searchNearbyInfoAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::searchNearbyInfoAsyn([])")
        
            // 开始调用
            ref.searchNearbyInfoAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.INearbySearch::searchNearbyInfo" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.nearby.NearbySearch.NearbyQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::searchNearbyInfo([])")
        
            // 开始调用
            val result = ref.searchNearbyInfo(var1)
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.INearbySearch::destroy" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.INearbySearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.INearbySearch@$refId::destroy([])")
        
            // 开始调用
            ref.destroy()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IBusLineSearch::searchBusLine" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusLineSearch@$refId::searchBusLine([])")
        
            // 开始调用
            val result = ref.searchBusLine()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.interfaces.IBusLineSearch::setOnBusLineSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusLineSearch@$refId::setOnBusLineSearchListener([])")
        
            // 开始调用
            ref.setOnBusLineSearchListener(object : com.amap.api.services.busline.BusLineSearch.OnBusLineSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.interfaces.IBusLineSearch::setOnBusLineSearchListener::Callback")
        
                // 回调方法们
                override fun onBusLineSearched(var1: com.amap.api.services.busline.BusLineResult, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onBusLineSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1.apply { HEAP[hashCode()] = this }.hashCode()
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.busline.BusLineSearch.OnBusLineSearchListener::onBusLineSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IBusLineSearch::searchBusLineAsyn" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusLineSearch@$refId::searchBusLineAsyn([])")
        
            // 开始调用
            ref.searchBusLineAsyn()
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IBusLineSearch::setQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.busline.BusLineQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusLineSearch@$refId::setQuery([])")
        
            // 开始调用
            ref.setQuery(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.interfaces.IBusLineSearch::getQuery" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.interfaces.IBusLineSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.interfaces.IBusLineSearch@$refId::getQuery([])")
        
            // 开始调用
            val result = ref.getQuery()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.share.ShareSearch.ShareNaviQuery::getFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareNaviQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareNaviQuery@$refId::getFromAndTo([])")
        
            // 开始调用
            val result = ref.getFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.share.ShareSearch.ShareNaviQuery::getNaviMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareNaviQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareNaviQuery@$refId::getNaviMode([])")
        
            // 开始调用
            val result = ref.getNaviMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch.ShareBusRouteQuery::getBusMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareBusRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareBusRouteQuery@$refId::getBusMode([])")
        
            // 开始调用
            val result = ref.getBusMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch.ShareBusRouteQuery::getShareFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareBusRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareBusRouteQuery@$refId::getShareFromAndTo([])")
        
            // 开始调用
            val result = ref.getShareFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.share.ShareSearch::setOnShareSearchListener" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::setOnShareSearchListener([])")
        
            // 开始调用
            ref.setOnShareSearchListener(object : com.amap.api.services.share.ShareSearch.OnShareSearchListener {
                // method channel
                val callbackChannel = MethodChannel(registrar.messenger(), "com.amap.api.services.share.ShareSearch::setOnShareSearchListener::Callback")
        
                // 回调方法们
                override fun onPoiShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onPoiShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onPoiShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onLocationShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onLocationShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onLocationShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onNaviShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onNaviShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onNaviShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onBusRouteShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onBusRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onBusRouteShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onWalkRouteShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onWalkRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onWalkRouteShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
                override fun onDrivingRouteShareUrlSearched(var1: String, var2: Int): Unit {
                    // 日志打印
                    println("fluttify-kotlin-callback: onDrivingRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
                    // 处理成可以传输的参数
                    val argvar1 = var1
                    val argvar2 = var2
        
                    // 开始回调
                    callbackChannel.invokeMethod(
                        "Callback::com.amap.api.services.share.ShareSearch.OnShareSearchListener::onDrivingRouteShareUrlSearched",
                        mapOf<String, Any?>(
                            "var1" to argvar1,
                            "var2" to argvar2
                        )
                    )
        
                    // 方法返回值
        
                }
        
            })
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch::searchPoiShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.PoiItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchPoiShareUrlAsyn([])")
        
            // 开始调用
            ref.searchPoiShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch::searchBusRouteShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareBusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchBusRouteShareUrlAsyn([])")
        
            // 开始调用
            ref.searchBusRouteShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch::searchWalkRouteShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchWalkRouteShareUrlAsyn([])")
        
            // 开始调用
            ref.searchWalkRouteShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch::searchDrivingRouteShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchDrivingRouteShareUrlAsyn([])")
        
            // 开始调用
            ref.searchDrivingRouteShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch::searchNaviShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareNaviQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchNaviShareUrlAsyn([])")
        
            // 开始调用
            ref.searchNaviShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch::searchLocationShareUrlAsyn" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonSharePoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchLocationShareUrlAsyn([])")
        
            // 开始调用
            ref.searchLocationShareUrlAsyn(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch::searchPoiShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.PoiItem
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchPoiShareUrl([])")
        
            // 开始调用
            val result = ref.searchPoiShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch::searchNaviShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareNaviQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchNaviShareUrl([])")
        
            // 开始调用
            val result = ref.searchNaviShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch::searchLocationShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonSharePoint
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchLocationShareUrl([])")
        
            // 开始调用
            val result = ref.searchLocationShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch::searchBusRouteShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareBusRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchBusRouteShareUrl([])")
        
            // 开始调用
            val result = ref.searchBusRouteShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch::searchDrivingRouteShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchDrivingRouteShareUrl([])")
        
            // 开始调用
            val result = ref.searchDrivingRouteShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch::searchWalkRouteShareUrl" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch@$refId::searchWalkRouteShareUrl([])")
        
            // 开始调用
            val result = ref.searchWalkRouteShareUrl(var1)
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch.ShareFromAndTo::setFromName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareFromAndTo@$refId::setFromName([\"var1\":$var1])")
        
            // 开始调用
            ref.setFromName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch.ShareFromAndTo::setToName" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareFromAndTo@$refId::setToName([\"var1\":$var1])")
        
            // 开始调用
            ref.setToName(var1)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch.ShareFromAndTo::getFrom" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareFromAndTo@$refId::getFrom([])")
        
            // 开始调用
            val result = ref.getFrom()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.share.ShareSearch.ShareFromAndTo::getTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareFromAndTo@$refId::getTo([])")
        
            // 开始调用
            val result = ref.getTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.share.ShareSearch.ShareFromAndTo::getFromName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareFromAndTo@$refId::getFromName([])")
        
            // 开始调用
            val result = ref.getFromName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch.ShareFromAndTo::getToName" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareFromAndTo@$refId::getToName([])")
        
            // 开始调用
            val result = ref.getToName()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery::getWalkMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery@$refId::getWalkMode([])")
        
            // 开始调用
            val result = ref.getWalkMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery::getShareFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery@$refId::getShareFromAndTo([])")
        
            // 开始调用
            val result = ref.getShareFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery::getDrivingMode" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery@$refId::getDrivingMode([])")
        
            // 开始调用
            val result = ref.getDrivingMode()
        
            // 调用结果
            methodResult.success(result)
        },
        "com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery::getShareFromAndTo" to { registrar, args, methodResult ->
            // 参数
        
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery@$refId::getShareFromAndTo([])")
        
            // 开始调用
            val result = ref.getShareFromAndTo()
        
            // 调用结果
            if (result != null) {
                val returnRefId = result.hashCode()
                HEAP[returnRefId] = result
        
                methodResult.success(returnRefId)
            } else {
                methodResult.success(null)
            }
        },
        "com.amap.api.services.share.ShareSearch.OnShareSearchListener::onPoiShareUrlSearched" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.OnShareSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.OnShareSearchListener@$refId::onPoiShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onPoiShareUrlSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch.OnShareSearchListener::onLocationShareUrlSearched" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.OnShareSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.OnShareSearchListener@$refId::onLocationShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onLocationShareUrlSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch.OnShareSearchListener::onNaviShareUrlSearched" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.OnShareSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.OnShareSearchListener@$refId::onNaviShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onNaviShareUrlSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch.OnShareSearchListener::onBusRouteShareUrlSearched" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.OnShareSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.OnShareSearchListener@$refId::onBusRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onBusRouteShareUrlSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch.OnShareSearchListener::onWalkRouteShareUrlSearched" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.OnShareSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.OnShareSearchListener@$refId::onWalkRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onWalkRouteShareUrlSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "com.amap.api.services.share.ShareSearch.OnShareSearchListener::onDrivingRouteShareUrlSearched" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 调用对象引用
            val refId = args["refId"] as Int
            val ref = HEAP[refId] as com.amap.api.services.share.ShareSearch.OnShareSearchListener
        
            // 日志打印
            println("fluttify-kotlin: com.amap.api.services.share.ShareSearch.OnShareSearchListener@$refId::onDrivingRouteShareUrlSearched([\"var1\":$var1, \"var2\":$var2])")
        
            // 开始调用
            ref.onDrivingRouteShareUrlSearched(var1, var2)
        
            // 调用结果
            methodResult.success("success")
        },
        "ObjectFactory::createcom_amap_api_location_AMapLocationClient__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.location.AMapLocationClient(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_DPoint__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.location.DPoint()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_DPoint__double__double" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 创建对象
            val obj = com.amap.api.location.DPoint(var1, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_CoordinateConverter__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.location.CoordinateConverter(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_CoordUtil__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.location.CoordUtil()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_UmidtokenInfo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.location.UmidtokenInfo()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_AMapLocation__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 创建对象
            val obj = com.amap.api.location.AMapLocation(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_AMapLocation__android_location_Location" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.location.Location
        
            // 创建对象
            val obj = com.amap.api.location.AMapLocation(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_AMapLocationClientOption__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.location.AMapLocationClientOption()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_location_AMapLocationQualityReport__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.location.AMapLocationQualityReport()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_fence_DistrictItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.fence.DistrictItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_fence_GeoFenceClient__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.fence.GeoFenceClient(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_fence_GeoFence__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.fence.GeoFence()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_fence_PoiItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.fence.PoiItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_traffic_TrafficStatusInfo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.traffic.TrafficStatusInfo()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_traffic_TrafficStatusResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.traffic.TrafficStatusResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_traffic_TrafficSearch__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.services.traffic.TrafficSearch(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_traffic_RoadTrafficQuery__String__String__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.traffic.RoadTrafficQuery(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_traffic_CircleTrafficQuery__com_amap_api_services_core_LatLonPoint__int__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.traffic.CircleTrafficQuery(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_traffic_TrafficStatusEvaluation__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.traffic.TrafficStatusEvaluation()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_busline_BusLineItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.busline.BusLineItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_busline_BusStationSearch__android_content_Context__com_amap_api_services_busline_BusStationQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.busline.BusStationQuery
        
            // 创建对象
            val obj = com.amap.api.services.busline.BusStationSearch(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_busline_BusStationItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.busline.BusStationItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_busline_BusStationQuery__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 创建对象
            val obj = com.amap.api.services.busline.BusStationQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_core_AMapException__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 创建对象
            val obj = com.amap.api.services.core.AMapException(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_core_AMapException__String__int__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 创建对象
            val obj = com.amap.api.services.core.AMapException(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_core_AMapException__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.core.AMapException()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_core_SearchUtils__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.core.SearchUtils()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_core_LatLonSharePoint__double__double__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
            // jsonable参数
            val var5 = args["var5"] as String
        
            // 创建对象
            val obj = com.amap.api.services.core.LatLonSharePoint(var1, var3, var5)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_core_LatLonPoint__double__double" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Double
            // jsonable参数
            val var3 = args["var3"] as Double
        
            // 创建对象
            val obj = com.amap.api.services.core.LatLonPoint(var1, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_core_PoiItem__String__com_amap_api_services_core_LatLonPoint__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var3 = args["var3"] as String
            // jsonable参数
            val var4 = args["var4"] as String
        
            // 创建对象
            val obj = com.amap.api.services.core.PoiItem(var1, var2, var3, var4)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_core_SuggestionCity__String__String__String__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as String
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.core.SuggestionCity(var1, var2, var3, var4)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_Photo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.Photo()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_Photo__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.Photo(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_SubPoiItem__String__com_amap_api_services_core_LatLonPoint__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var3 = args["var3"] as String
            // jsonable参数
            val var4 = args["var4"] as String
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.SubPoiItem(var1, var2, var3, var4)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_PoiItemExtension__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.PoiItemExtension(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int__boolean" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Boolean
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.PoiSearch.SearchBound(ArrayList(var1))
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch__android_content_Context__com_amap_api_services_poisearch_PoiSearch_Query" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.poisearch.PoiSearch.Query
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.PoiSearch(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_Query__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.PoiSearch.Query(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_Query__String__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.PoiSearch.Query(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_poisearch_IndoorData__String__int__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 创建对象
            val obj = com.amap.api.services.poisearch.IndoorData(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_Railway__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.Railway()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_BusPath__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.BusPath()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DriveRoutePlanResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DriveRoutePlanResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_TruckRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__com_amap_api_services_core_LatLonPoint__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.FromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
            // 列表参数
            val var3 = (args["var3"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.TruckRouteQuery(var1, var2, ArrayList(var3), var4)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_TMC__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.TMC()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteBusWalkItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteBusWalkItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_BusStep__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.BusStep()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_TaxiItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.TaxiItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_BusRouteResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.BusRouteResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RoutePlanResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RoutePlanResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RailwaySpace__String__float" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Double
        
            // 创建对象
            val obj = com.amap.api.services.route.RailwaySpace(var1, var2.toFloat())
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_TruckRouteRestult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.TruckRouteRestult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_RideRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.FromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.RideRouteQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_RideRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.RideRouteQuery(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_RideRouteQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.RideRouteQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_DriveRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint__String" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.FromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
            // 列表参数
            val var3 = (args["var3"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
            val var4 = listOf<List<com.amap.api.services.core.LatLonPoint>>()
            // jsonable参数
            val var5 = args["var5"] as String
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.DriveRouteQuery(var1, var2, ArrayList(var3), ArrayList(var4), var5)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_DriveRouteQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.DriveRouteQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteRailwayItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteRailwayItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_WalkStep__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.WalkStep()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RailwayStationItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RailwayStationItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RideRouteResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RideRouteResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_FromAndTo__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.FromAndTo(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_FromAndTo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.FromAndTo()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RidePath__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RidePath()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_BusRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__String__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.FromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as String
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.BusRouteQuery(var1, var2, var3, var4)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_BusRouteQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.BusRouteQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RideStep__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RideStep()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearchCity__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearchCity()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DistanceResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DistanceResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_WalkRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.FromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.WalkRouteQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_WalkRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.FromAndTo
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.WalkRouteQuery(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_WalkRouteQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.WalkRouteQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_District__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.District()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_WalkRouteResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.WalkRouteResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DistanceSearch_DistanceQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DistanceSearch.DistanceQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_SearchCity__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.SearchCity()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DistanceSearch__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.services.route.DistanceSearch(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_WalkPath__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.WalkPath()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteBusLineItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteBusLineItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_DrivePlanQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__int__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.route.RouteSearch.FromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.DrivePlanQuery(var1, var2, var3, var4)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_RouteSearch_DrivePlanQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.RouteSearch.DrivePlanQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DrivePlanStep__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DrivePlanStep()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_TimeInfo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.TimeInfo()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DriveStep__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DriveStep()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_TruckStep__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.TruckStep()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DriveRouteResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DriveRouteResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DrivePath__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DrivePath()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_TruckPath__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.TruckPath()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_Doorway__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.Doorway()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DrivePlanPath__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DrivePlanPath()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_TimeInfosElement__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.TimeInfosElement()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_DistanceItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.DistanceItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_route_Path__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.route.Path()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_road_Road__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.road.Road()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_road_Road__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 创建对象
            val obj = com.amap.api.services.road.Road(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_road_Crossroad__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.road.Crossroad()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_nearby_NearbyInfo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.nearby.NearbyInfo()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_nearby_UploadInfo__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.nearby.UploadInfo()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_nearby_NearbySearchResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.nearby.NearbySearchResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_nearby_NearbySearch_NearbyQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.nearby.NearbySearch.NearbyQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_routepoisearch_RoutePOIItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.routepoisearch.RoutePOIItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudItem__String__com_amap_api_services_core_LatLonPoint__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var3 = args["var3"] as String
            // jsonable参数
            val var4 = args["var4"] as String
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudItem(var1, var2, var3, var4)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_Query__String__String__com_amap_api_services_cloud_CloudSearch_SearchBound" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // 引用参数
            val var3 = HEAP[args["var3"] as Int] as com.amap.api.services.cloud.CloudSearch.SearchBound
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudSearch.Query(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudSearch__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudSearch(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudSearch.SearchBound(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_SearchBound__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudSearch.SearchBound(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_SearchBound__com_amap_api_services_core_LatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 列表参数
            val var1 = (args["var1"] as List<Int>).map { HEAP[it] as com.amap.api.services.core.LatLonPoint }
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudSearch.SearchBound(ArrayList(var1))
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_SearchBound__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudSearch.SearchBound(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudImage__String__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudImage(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_Sortingrules__String__boolean" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Boolean
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudSearch.Sortingrules(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_Sortingrules__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudSearch.Sortingrules(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_cloud_CloudItemDetail__String__com_amap_api_services_core_LatLonPoint__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var3 = args["var3"] as String
            // jsonable参数
            val var4 = args["var4"] as String
        
            // 创建对象
            val obj = com.amap.api.services.cloud.CloudItemDetail(var1, var2, var3, var4)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_weather_LocalDayWeatherForecast__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.weather.LocalDayWeatherForecast()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_weather_WeatherSearchQuery__String__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.weather.WeatherSearchQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_weather_WeatherSearchQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.weather.WeatherSearchQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_weather_LocalWeatherForecast__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.weather.LocalWeatherForecast()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_weather_WeatherSearch__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.services.weather.WeatherSearch(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_weather_LocalWeatherLive__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.weather.LocalWeatherLive()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_BusinessArea__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.BusinessArea()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_GeocodeQuery__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.GeocodeQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_GeocodeSearch__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.GeocodeSearch(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_RegeocodeResult__com_amap_api_services_geocoder_RegeocodeQuery__com_amap_api_services_geocoder_RegeocodeAddress" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.RegeocodeQuery
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.geocoder.RegeocodeAddress
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.RegeocodeResult(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_GeocodeResult__com_amap_api_services_geocoder_GeocodeQuery__com_amap_api_services_geocoder_GeocodeAddress" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.geocoder.GeocodeQuery
            // 列表参数
            val var2 = (args["var2"] as List<Int>).map { HEAP[it] as com.amap.api.services.geocoder.GeocodeAddress }
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.GeocodeResult(var1, ArrayList(var2))
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_AoiItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.AoiItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_RegeocodeRoad__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.RegeocodeRoad()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_GeocodeAddress__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.GeocodeAddress()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_RegeocodeQuery__com_amap_api_services_core_LatLonPoint__float__String" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var2 = args["var2"] as Double
            // jsonable参数
            val var3 = args["var3"] as String
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.RegeocodeQuery(var1, var2.toFloat(), var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_StreetNumber__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.StreetNumber()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_geocoder_RegeocodeAddress__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.geocoder.RegeocodeAddress()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_district_DistrictSearchQuery__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.district.DistrictSearchQuery()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_district_DistrictSearchQuery__String__String__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.district.DistrictSearchQuery(var1, var2, var3)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_district_DistrictSearchQuery__String__String__int__boolean__int" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as Int
            // jsonable参数
            val var4 = args["var4"] as Boolean
            // jsonable参数
            val var5 = args["var5"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.district.DistrictSearchQuery(var1, var2, var3, var4, var5)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_district_DistrictSearch__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.services.district.DistrictSearch(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_district_DistrictResult__com_amap_api_services_district_DistrictSearchQuery__com_amap_api_services_district_DistrictItem" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.district.DistrictSearchQuery
            // 列表参数
            val var2 = (args["var2"] as List<Int>).map { HEAP[it] as com.amap.api.services.district.DistrictItem }
        
            // 创建对象
            val obj = com.amap.api.services.district.DistrictResult(var1, ArrayList(var2))
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_district_DistrictResult__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.district.DistrictResult()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_district_DistrictItem__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.district.DistrictItem()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_district_DistrictItem__String__String__String__com_amap_api_services_core_LatLonPoint__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
            // jsonable参数
            val var3 = args["var3"] as String
            // 引用参数
            val var4 = HEAP[args["var4"] as Int] as com.amap.api.services.core.LatLonPoint
            // jsonable参数
            val var5 = args["var5"] as String
        
            // 创建对象
            val obj = com.amap.api.services.district.DistrictItem(var1, var2, var3, var4, var5)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_help_Tip__" to { registrar, args, methodResult ->
            // 参数
        
        
            // 创建对象
            val obj = com.amap.api.services.help.Tip()
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_help_InputtipsQuery__String__String" to { registrar, args, methodResult ->
            // 参数
            // jsonable参数
            val var1 = args["var1"] as String
            // jsonable参数
            val var2 = args["var2"] as String
        
            // 创建对象
            val obj = com.amap.api.services.help.InputtipsQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_help_Inputtips__android_content_Context__com_amap_api_services_help_InputtipsQuery" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.help.InputtipsQuery
        
            // 创建对象
            val obj = com.amap.api.services.help.Inputtips(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareNaviQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.share.ShareSearch.ShareNaviQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareBusRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.share.ShareSearch.ShareBusRouteQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_share_ShareSearch__android_content_Context" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as android.content.Context
        
            // 创建对象
            val obj = com.amap.api.services.share.ShareSearch(var1)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareFromAndTo__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.core.LatLonPoint
            // 引用参数
            val var2 = HEAP[args["var2"] as Int] as com.amap.api.services.core.LatLonPoint
        
            // 创建对象
            val obj = com.amap.api.services.share.ShareSearch.ShareFromAndTo(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareWalkRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        ,
        "ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareDrivingRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int" to { registrar, args, methodResult ->
            // 参数
            // 引用参数
            val var1 = HEAP[args["var1"] as Int] as com.amap.api.services.share.ShareSearch.ShareFromAndTo
            // jsonable参数
            val var2 = args["var2"] as Int
        
            // 创建对象
            val obj = com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery(var1, var2)
            HEAP[obj.hashCode()] = obj
        
            methodResult.success(obj.hashCode())
        }
        
    )

    override fun onMethodCall(methodCall: MethodCall, methodResult: MethodChannel.Result) {
        val args = methodCall.arguments as? Map<String, Any> ?: mapOf()
        when (methodCall.method) {
            // 获取Application对象
            "ObjectFactory::getandroid_app_Application" -> {
                methodResult.success(registrar.activity().application.apply { HEAP[hashCode()] = this }.hashCode())
            }
            // 获取FlutterActivity对象
            "ObjectFactory::getandroid_app_Activity" -> {
                methodResult.success(registrar.activity().apply { HEAP[hashCode()] = this }.hashCode())
            }
            // 创建android.os.Bundle对象
            "ObjectFactory::createandroid_os_Bundle" -> {
                methodResult.success(Bundle().apply { HEAP[hashCode()] = this }.hashCode())
            }
            // 释放一个对象
            "ObjectFactory::release" -> {
                HEAP.remove(args["refId"] as Int)
                methodResult.success("success")
            }
            // 清空HEAP中所有对象
            "ObjectFactory::clearRefMap" -> {
                HEAP.clear()
                methodResult.success("success")
            }
            else -> {
                handlerMap[methodCall.method]?.invoke(registrar, args, methodResult) ?: methodResult.notImplemented()
            }
        }
    }
}
