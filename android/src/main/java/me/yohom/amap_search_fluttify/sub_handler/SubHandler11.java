//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_search_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_search_fluttify.AmapSearchFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler11 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.amap.api.services.share.ShareSearch::searchNaviShareUrlAsyn_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.services.share.ShareSearch.ShareNaviQuery var1 = (com.amap.api.services.share.ShareSearch.ShareNaviQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch ref = (com.amap.api.services.share.ShareSearch) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.searchNaviShareUrlAsyn(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch::searchLocationShareUrlAsyn_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.services.core.LatLonSharePoint var1 = (com.amap.api.services.core.LatLonSharePoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch ref = (com.amap.api.services.share.ShareSearch) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.searchLocationShareUrlAsyn(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch::searchPoiShareUrl_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.services.core.PoiItem var1 = (com.amap.api.services.core.PoiItem) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch ref = (com.amap.api.services.share.ShareSearch) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.searchPoiShareUrl(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch::searchNaviShareUrl_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.services.share.ShareSearch.ShareNaviQuery var1 = (com.amap.api.services.share.ShareSearch.ShareNaviQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch ref = (com.amap.api.services.share.ShareSearch) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.searchNaviShareUrl(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch::searchLocationShareUrl_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.services.core.LatLonSharePoint var1 = (com.amap.api.services.core.LatLonSharePoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch ref = (com.amap.api.services.share.ShareSearch) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.searchLocationShareUrl(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch::searchBusRouteShareUrl_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.services.share.ShareSearch.ShareBusRouteQuery var1 = (com.amap.api.services.share.ShareSearch.ShareBusRouteQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch ref = (com.amap.api.services.share.ShareSearch) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.searchBusRouteShareUrl(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch::searchDrivingRouteShareUrl_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery var1 = (com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch ref = (com.amap.api.services.share.ShareSearch) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.searchDrivingRouteShareUrl(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch::searchWalkRouteShareUrl_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery var1 = (com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch ref = (com.amap.api.services.share.ShareSearch) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.searchWalkRouteShareUrl(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareFromAndTo::setFromName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareFromAndTo ref = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setFromName(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareFromAndTo::setToName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareFromAndTo ref = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setToName(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareFromAndTo::getFrom_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareFromAndTo ref = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.services.core.LatLonPoint result;
                    try {
                        result = ref.getFrom();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareFromAndTo::getTo_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareFromAndTo ref = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.services.core.LatLonPoint result;
                    try {
                        result = ref.getTo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareFromAndTo::getFromName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareFromAndTo ref = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getFromName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareFromAndTo::getToName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareFromAndTo ref = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getToName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery::getWalkMode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery ref = (com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getWalkMode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery::getShareFromAndTo_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery ref = (com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.services.share.ShareSearch.ShareFromAndTo result;
                    try {
                        result = ref.getShareFromAndTo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery::getDrivingMode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery ref = (com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getDrivingMode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery::getShareFromAndTo_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery ref = (com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.services.share.ShareSearch.ShareFromAndTo result;
                    try {
                        result = ref.getShareFromAndTo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_traffic_TrafficStatusInfo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_traffic_TrafficStatusInfo__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.traffic.TrafficStatusInfo obj = new com.amap.api.services.traffic.TrafficStatusInfo();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_traffic_TrafficStatusResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_traffic_TrafficStatusResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.traffic.TrafficStatusResult obj = new com.amap.api.services.traffic.TrafficStatusResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_traffic_TrafficSearch__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_traffic_TrafficSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.traffic.TrafficSearch obj = new com.amap.api.services.traffic.TrafficSearch(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_traffic_RoadTrafficQuery__String__String__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_traffic_RoadTrafficQuery__String__String__int");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.traffic.RoadTrafficQuery obj = new com.amap.api.services.traffic.RoadTrafficQuery(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_traffic_CircleTrafficQuery__com_amap_api_services_core_LatLonPoint__int__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_traffic_CircleTrafficQuery__com_amap_api_services_core_LatLonPoint__int__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.traffic.CircleTrafficQuery obj = new com.amap.api.services.traffic.CircleTrafficQuery(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_traffic_TrafficStatusEvaluation__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_traffic_TrafficStatusEvaluation__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.traffic.TrafficStatusEvaluation obj = new com.amap.api.services.traffic.TrafficStatusEvaluation();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_busline_BusLineItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_busline_BusLineItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.busline.BusLineItem obj = new com.amap.api.services.busline.BusLineItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_busline_BusStationSearch__android_content_Context__com_amap_api_services_busline_BusStationQuery", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_busline_BusStationSearch__android_content_Context__com_amap_api_services_busline_BusStationQuery");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.busline.BusStationQuery var2 = (com.amap.api.services.busline.BusStationQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.busline.BusStationSearch obj = new com.amap.api.services.busline.BusStationSearch(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_busline_BusLineSearch__android_content_Context__com_amap_api_services_busline_BusLineQuery", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_busline_BusLineSearch__android_content_Context__com_amap_api_services_busline_BusLineQuery");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.busline.BusLineQuery var2 = (com.amap.api.services.busline.BusLineQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.busline.BusLineSearch obj = new com.amap.api.services.busline.BusLineSearch(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_busline_BusLineQuery__String__com_amap_api_services_busline_BusLineQuery_SearchType__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_busline_BusLineQuery__String__com_amap_api_services_busline_BusLineQuery_SearchType__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // enum arg
                com.amap.api.services.busline.BusLineQuery.SearchType var2 = com.amap.api.services.busline.BusLineQuery.SearchType.values()[(int) ((Map<String, Object>) args).get("var2")];
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.busline.BusLineQuery obj = new com.amap.api.services.busline.BusLineQuery(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_busline_BusStationItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_busline_BusStationItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.busline.BusStationItem obj = new com.amap.api.services.busline.BusStationItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_busline_BusStationQuery__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_busline_BusStationQuery__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.busline.BusStationQuery obj = new com.amap.api.services.busline.BusStationQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_core_AMapException__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_core_AMapException__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.amap.api.services.core.AMapException obj = new com.amap.api.services.core.AMapException(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_core_AMapException__String__int__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_core_AMapException__String__int__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.core.AMapException obj = new com.amap.api.services.core.AMapException(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_core_AMapException__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_core_AMapException__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.core.AMapException obj = new com.amap.api.services.core.AMapException();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_core_SearchUtils__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_core_SearchUtils__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.core.SearchUtils obj = new com.amap.api.services.core.SearchUtils();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_core_LatLonSharePoint__double__double__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_core_LatLonSharePoint__double__double__String");
                }
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                String var5 = (String) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.amap.api.services.core.LatLonSharePoint obj = new com.amap.api.services.core.LatLonSharePoint(var1, var3, var5);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_core_LatLonPoint__double__double", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_core_LatLonPoint__double__double");
                }
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.core.LatLonPoint obj = new com.amap.api.services.core.LatLonPoint(var1, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_core_PoiItem__String__com_amap_api_services_core_LatLonPoint__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_core_PoiItem__String__com_amap_api_services_core_LatLonPoint__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.services.core.PoiItem obj = new com.amap.api.services.core.PoiItem(var1, var2, var3, var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_core_SuggestionCity__String__String__String__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_core_SuggestionCity__String__String__String__int");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.services.core.SuggestionCity obj = new com.amap.api.services.core.SuggestionCity(var1, var2, var3, var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_Photo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_Photo__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.poisearch.Photo obj = new com.amap.api.services.poisearch.Photo();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_Photo__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_Photo__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.poisearch.Photo obj = new com.amap.api.services.poisearch.Photo(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_SubPoiItem__String__com_amap_api_services_core_LatLonPoint__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_SubPoiItem__String__com_amap_api_services_core_LatLonPoint__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.services.poisearch.SubPoiItem obj = new com.amap.api.services.poisearch.SubPoiItem(var1, var2, var3, var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_PoiItemExtension__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_PoiItemExtension__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.poisearch.PoiItemExtension obj = new com.amap.api.services.poisearch.PoiItemExtension(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.poisearch.PoiSearch.SearchBound obj = new com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int__boolean", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int__boolean");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                boolean var3 = (boolean) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.poisearch.PoiSearch.SearchBound obj = new com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.poisearch.PoiSearch.SearchBound obj = new com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_SearchBound__java_util_List_com_amap_api_services_core_LatLonPoint_", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_PoiSearch_SearchBound__java_util_List_com_amap_api_services_core_LatLonPoint_");
                }
            
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.util.List<com.amap.api.services.core.LatLonPoint> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.services.core.LatLonPoint>) var1).add((com.amap.api.services.core.LatLonPoint) getHEAP().get(refId));
                }
            
                // create target object
                com.amap.api.services.poisearch.PoiSearch.SearchBound obj = new com.amap.api.services.poisearch.PoiSearch.SearchBound((ArrayList) var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch__android_content_Context__com_amap_api_services_poisearch_PoiSearch_Query", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_PoiSearch__android_content_Context__com_amap_api_services_poisearch_PoiSearch_Query");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.poisearch.PoiSearch.Query var2 = (com.amap.api.services.poisearch.PoiSearch.Query) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.poisearch.PoiSearch obj = new com.amap.api.services.poisearch.PoiSearch(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_Query__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_PoiSearch_Query__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.poisearch.PoiSearch.Query obj = new com.amap.api.services.poisearch.PoiSearch.Query(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_PoiSearch_Query__String__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_PoiSearch_Query__String__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.poisearch.PoiSearch.Query obj = new com.amap.api.services.poisearch.PoiSearch.Query(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_poisearch_IndoorData__String__int__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_poisearch_IndoorData__String__int__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.poisearch.IndoorData obj = new com.amap.api.services.poisearch.IndoorData(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_Railway__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_Railway__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.Railway obj = new com.amap.api.services.route.Railway();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_BusPath__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_BusPath__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.BusPath obj = new com.amap.api.services.route.BusPath();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DriveRoutePlanResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DriveRoutePlanResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DriveRoutePlanResult obj = new com.amap.api.services.route.DriveRoutePlanResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_TruckRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__java_util_List_com_amap_api_services_core_LatLonPoint___int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_TruckRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__java_util_List_com_amap_api_services_core_LatLonPoint___int");
                }
            
                // args
                // ref arg
                com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // list arg
                List<Integer> var3RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var3");
                java.util.List<com.amap.api.services.core.LatLonPoint> var3 = new ArrayList<>();
                for (int refId : var3RefIdList) {
                    ((ArrayList<com.amap.api.services.core.LatLonPoint>) var3).add((com.amap.api.services.core.LatLonPoint) getHEAP().get(refId));
                }
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.services.route.RouteSearch.TruckRouteQuery obj = new com.amap.api.services.route.RouteSearch.TruckRouteQuery(var1, var2, (ArrayList) var3, var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_TMC__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_TMC__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.TMC obj = new com.amap.api.services.route.TMC();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteBusWalkItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteBusWalkItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteBusWalkItem obj = new com.amap.api.services.route.RouteBusWalkItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteResult obj = new com.amap.api.services.route.RouteResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.route.RouteSearch obj = new com.amap.api.services.route.RouteSearch(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_BusStep__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_BusStep__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.BusStep obj = new com.amap.api.services.route.BusStep();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_TaxiItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_TaxiItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.TaxiItem obj = new com.amap.api.services.route.TaxiItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_BusRouteResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_BusRouteResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.BusRouteResult obj = new com.amap.api.services.route.BusRouteResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RoutePlanResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RoutePlanResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RoutePlanResult obj = new com.amap.api.services.route.RoutePlanResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RailwaySpace__String__float", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RailwaySpace__String__float");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.route.RailwaySpace obj = new com.amap.api.services.route.RailwaySpace(var1, new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_TruckRouteRestult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_TruckRouteRestult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.TruckRouteRestult obj = new com.amap.api.services.route.TruckRouteRestult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_RideRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_RideRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.route.RouteSearch.RideRouteQuery obj = new com.amap.api.services.route.RouteSearch.RideRouteQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_RideRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_RideRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo");
                }
            
                // args
                // ref arg
                com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.route.RouteSearch.RideRouteQuery obj = new com.amap.api.services.route.RouteSearch.RideRouteQuery(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_RideRouteQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_RideRouteQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteSearch.RideRouteQuery obj = new com.amap.api.services.route.RouteSearch.RideRouteQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_DriveRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__java_util_List_com_amap_api_services_core_LatLonPoint___java_util_List_java_util_List_com_amap_api_services_core_LatLonPoint____String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_DriveRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__java_util_List_com_amap_api_services_core_LatLonPoint___java_util_List_java_util_List_com_amap_api_services_core_LatLonPoint____String");
                }
            
                // args
                // ref arg
                com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // list arg
                List<Integer> var3RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var3");
                java.util.List<com.amap.api.services.core.LatLonPoint> var3 = new ArrayList<>();
                for (int refId : var3RefIdList) {
                    ((ArrayList<com.amap.api.services.core.LatLonPoint>) var3).add((com.amap.api.services.core.LatLonPoint) getHEAP().get(refId));
                }
                java.util.List<java.util.List<com.amap.api.services.core.LatLonPoint>> var4 = new ArrayList<>();
                // jsonable arg
                String var5 = (String) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.amap.api.services.route.RouteSearch.DriveRouteQuery obj = new com.amap.api.services.route.RouteSearch.DriveRouteQuery(var1, var2, (ArrayList) var3, (ArrayList) var4, var5);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_DriveRouteQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_DriveRouteQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteSearch.DriveRouteQuery obj = new com.amap.api.services.route.RouteSearch.DriveRouteQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteRailwayItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteRailwayItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteRailwayItem obj = new com.amap.api.services.route.RouteRailwayItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_WalkStep__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_WalkStep__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.WalkStep obj = new com.amap.api.services.route.WalkStep();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RailwayStationItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RailwayStationItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RailwayStationItem obj = new com.amap.api.services.route.RailwayStationItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RideRouteResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RideRouteResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RideRouteResult obj = new com.amap.api.services.route.RideRouteResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_FromAndTo__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_FromAndTo__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.route.RouteSearch.FromAndTo obj = new com.amap.api.services.route.RouteSearch.FromAndTo(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_FromAndTo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_FromAndTo__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteSearch.FromAndTo obj = new com.amap.api.services.route.RouteSearch.FromAndTo();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RidePath__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RidePath__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RidePath obj = new com.amap.api.services.route.RidePath();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_BusRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__String__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_BusRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__String__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.services.route.RouteSearch.BusRouteQuery obj = new com.amap.api.services.route.RouteSearch.BusRouteQuery(var1, var2, var3, var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_BusRouteQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_BusRouteQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteSearch.BusRouteQuery obj = new com.amap.api.services.route.RouteSearch.BusRouteQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RideStep__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RideStep__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RideStep obj = new com.amap.api.services.route.RideStep();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearchCity__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearchCity__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteSearchCity obj = new com.amap.api.services.route.RouteSearchCity();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DistanceResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DistanceResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DistanceResult obj = new com.amap.api.services.route.DistanceResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_WalkRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_WalkRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.route.RouteSearch.WalkRouteQuery obj = new com.amap.api.services.route.RouteSearch.WalkRouteQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_WalkRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_WalkRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo");
                }
            
                // args
                // ref arg
                com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.route.RouteSearch.WalkRouteQuery obj = new com.amap.api.services.route.RouteSearch.WalkRouteQuery(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_WalkRouteQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_WalkRouteQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteSearch.WalkRouteQuery obj = new com.amap.api.services.route.RouteSearch.WalkRouteQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_District__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_District__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.District obj = new com.amap.api.services.route.District();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_WalkRouteResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_WalkRouteResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.WalkRouteResult obj = new com.amap.api.services.route.WalkRouteResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DistanceSearch_DistanceQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DistanceSearch_DistanceQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DistanceSearch.DistanceQuery obj = new com.amap.api.services.route.DistanceSearch.DistanceQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_SearchCity__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_SearchCity__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.SearchCity obj = new com.amap.api.services.route.SearchCity();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DistanceSearch__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DistanceSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.route.DistanceSearch obj = new com.amap.api.services.route.DistanceSearch(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_WalkPath__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_WalkPath__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.WalkPath obj = new com.amap.api.services.route.WalkPath();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteBusLineItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteBusLineItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteBusLineItem obj = new com.amap.api.services.route.RouteBusLineItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_DrivePlanQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__int__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_DrivePlanQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__int__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.services.route.RouteSearch.DrivePlanQuery obj = new com.amap.api.services.route.RouteSearch.DrivePlanQuery(var1, var2, var3, var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_RouteSearch_DrivePlanQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_RouteSearch_DrivePlanQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.RouteSearch.DrivePlanQuery obj = new com.amap.api.services.route.RouteSearch.DrivePlanQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DrivePlanStep__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DrivePlanStep__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DrivePlanStep obj = new com.amap.api.services.route.DrivePlanStep();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_TimeInfo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_TimeInfo__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.TimeInfo obj = new com.amap.api.services.route.TimeInfo();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DriveStep__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DriveStep__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DriveStep obj = new com.amap.api.services.route.DriveStep();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_TruckStep__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_TruckStep__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.TruckStep obj = new com.amap.api.services.route.TruckStep();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DriveRouteResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DriveRouteResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DriveRouteResult obj = new com.amap.api.services.route.DriveRouteResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DrivePath__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DrivePath__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DrivePath obj = new com.amap.api.services.route.DrivePath();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_TruckPath__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_TruckPath__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.TruckPath obj = new com.amap.api.services.route.TruckPath();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_Doorway__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_Doorway__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.Doorway obj = new com.amap.api.services.route.Doorway();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DrivePlanPath__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DrivePlanPath__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DrivePlanPath obj = new com.amap.api.services.route.DrivePlanPath();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_TimeInfosElement__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_TimeInfosElement__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.TimeInfosElement obj = new com.amap.api.services.route.TimeInfosElement();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_DistanceItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_DistanceItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.DistanceItem obj = new com.amap.api.services.route.DistanceItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_route_Path__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_route_Path__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.route.Path obj = new com.amap.api.services.route.Path();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_road_Road__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_road_Road__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.road.Road obj = new com.amap.api.services.road.Road();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_road_Road__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_road_Road__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.road.Road obj = new com.amap.api.services.road.Road(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_road_Crossroad__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_road_Crossroad__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.road.Crossroad obj = new com.amap.api.services.road.Crossroad();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_nearby_NearbyInfo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_nearby_NearbyInfo__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.nearby.NearbyInfo obj = new com.amap.api.services.nearby.NearbyInfo();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_nearby_UploadInfo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_nearby_UploadInfo__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.nearby.UploadInfo obj = new com.amap.api.services.nearby.UploadInfo();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_nearby_NearbySearchResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_nearby_NearbySearchResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.nearby.NearbySearchResult obj = new com.amap.api.services.nearby.NearbySearchResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_nearby_NearbySearch_NearbyQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_nearby_NearbySearch_NearbyQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.nearby.NearbySearch.NearbyQuery obj = new com.amap.api.services.nearby.NearbySearch.NearbyQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_routepoisearch_RoutePOIItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_routepoisearch_RoutePOIItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.routepoisearch.RoutePOIItem obj = new com.amap.api.services.routepoisearch.RoutePOIItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_routepoisearch_RoutePOISearch__android_content_Context__com_amap_api_services_routepoisearch_RoutePOISearchQuery", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_routepoisearch_RoutePOISearch__android_content_Context__com_amap_api_services_routepoisearch_RoutePOISearchQuery");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.routepoisearch.RoutePOISearchQuery var2 = (com.amap.api.services.routepoisearch.RoutePOISearchQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.routepoisearch.RoutePOISearch obj = new com.amap.api.services.routepoisearch.RoutePOISearch(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_routepoisearch_RoutePOISearchResult__java_util_ArrayList_com_amap_api_services_routepoisearch_RoutePOIItem___com_amap_api_services_routepoisearch_RoutePOISearchQuery", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_routepoisearch_RoutePOISearchResult__java_util_ArrayList_com_amap_api_services_routepoisearch_RoutePOIItem___com_amap_api_services_routepoisearch_RoutePOISearchQuery");
                }
            
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.util.ArrayList<com.amap.api.services.routepoisearch.RoutePOIItem> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.services.routepoisearch.RoutePOIItem>) var1).add((com.amap.api.services.routepoisearch.RoutePOIItem) getHEAP().get(refId));
                }
                // ref arg
                com.amap.api.services.routepoisearch.RoutePOISearchQuery var2 = (com.amap.api.services.routepoisearch.RoutePOISearchQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.routepoisearch.RoutePOISearchResult obj = new com.amap.api.services.routepoisearch.RoutePOISearchResult((ArrayList) var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_routepoisearch_RoutePOISearchQuery__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint__int__com_amap_api_services_routepoisearch_RoutePOISearch_RoutePOISearchType__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_routepoisearch_RoutePOISearchQuery__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint__int__com_amap_api_services_routepoisearch_RoutePOISearch_RoutePOISearchType__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // enum arg
                com.amap.api.services.routepoisearch.RoutePOISearch.RoutePOISearchType var4 = com.amap.api.services.routepoisearch.RoutePOISearch.RoutePOISearchType.values()[(int) ((Map<String, Object>) args).get("var4")];
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.amap.api.services.routepoisearch.RoutePOISearchQuery obj = new com.amap.api.services.routepoisearch.RoutePOISearchQuery(var1, var2, var3, var4, var5);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_routepoisearch_RoutePOISearchQuery__java_util_List_com_amap_api_services_core_LatLonPoint___com_amap_api_services_routepoisearch_RoutePOISearch_RoutePOISearchType__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_routepoisearch_RoutePOISearchQuery__java_util_List_com_amap_api_services_core_LatLonPoint___com_amap_api_services_routepoisearch_RoutePOISearch_RoutePOISearchType__int");
                }
            
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.util.List<com.amap.api.services.core.LatLonPoint> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.services.core.LatLonPoint>) var1).add((com.amap.api.services.core.LatLonPoint) getHEAP().get(refId));
                }
                // enum arg
                com.amap.api.services.routepoisearch.RoutePOISearch.RoutePOISearchType var2 = com.amap.api.services.routepoisearch.RoutePOISearch.RoutePOISearchType.values()[(int) ((Map<String, Object>) args).get("var2")];
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.routepoisearch.RoutePOISearchQuery obj = new com.amap.api.services.routepoisearch.RoutePOISearchQuery((ArrayList) var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudItem__String__com_amap_api_services_core_LatLonPoint__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudItem__String__com_amap_api_services_core_LatLonPoint__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.services.cloud.CloudItem obj = new com.amap.api.services.cloud.CloudItem(var1, var2, var3, var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_Query__String__String__com_amap_api_services_cloud_CloudSearch_SearchBound", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudSearch_Query__String__String__com_amap_api_services_cloud_CloudSearch_SearchBound");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // ref arg
                com.amap.api.services.cloud.CloudSearch.SearchBound var3 = (com.amap.api.services.cloud.CloudSearch.SearchBound) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                // create target object
                com.amap.api.services.cloud.CloudSearch.Query obj = new com.amap.api.services.cloud.CloudSearch.Query(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudSearch__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.cloud.CloudSearch obj = new com.amap.api.services.cloud.CloudSearch(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.cloud.CloudSearch.SearchBound obj = new com.amap.api.services.cloud.CloudSearch.SearchBound(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_SearchBound__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudSearch_SearchBound__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.cloud.CloudSearch.SearchBound obj = new com.amap.api.services.cloud.CloudSearch.SearchBound(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_SearchBound__java_util_List_com_amap_api_services_core_LatLonPoint_", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudSearch_SearchBound__java_util_List_com_amap_api_services_core_LatLonPoint_");
                }
            
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                java.util.List<com.amap.api.services.core.LatLonPoint> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    ((ArrayList<com.amap.api.services.core.LatLonPoint>) var1).add((com.amap.api.services.core.LatLonPoint) getHEAP().get(refId));
                }
            
                // create target object
                com.amap.api.services.cloud.CloudSearch.SearchBound obj = new com.amap.api.services.cloud.CloudSearch.SearchBound((ArrayList) var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_SearchBound__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudSearch_SearchBound__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.amap.api.services.cloud.CloudSearch.SearchBound obj = new com.amap.api.services.cloud.CloudSearch.SearchBound(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudImage__String__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudImage__String__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.cloud.CloudImage obj = new com.amap.api.services.cloud.CloudImage(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_Sortingrules__String__boolean", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudSearch_Sortingrules__String__boolean");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.cloud.CloudSearch.Sortingrules obj = new com.amap.api.services.cloud.CloudSearch.Sortingrules(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudSearch_Sortingrules__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudSearch_Sortingrules__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.amap.api.services.cloud.CloudSearch.Sortingrules obj = new com.amap.api.services.cloud.CloudSearch.Sortingrules(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_cloud_CloudItemDetail__String__com_amap_api_services_core_LatLonPoint__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_cloud_CloudItemDetail__String__com_amap_api_services_core_LatLonPoint__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                // create target object
                com.amap.api.services.cloud.CloudItemDetail obj = new com.amap.api.services.cloud.CloudItemDetail(var1, var2, var3, var4);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_weather_LocalDayWeatherForecast__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_weather_LocalDayWeatherForecast__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.weather.LocalDayWeatherForecast obj = new com.amap.api.services.weather.LocalDayWeatherForecast();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_weather_WeatherSearchQuery__String__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_weather_WeatherSearchQuery__String__int");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.weather.WeatherSearchQuery obj = new com.amap.api.services.weather.WeatherSearchQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_weather_WeatherSearchQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_weather_WeatherSearchQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.weather.WeatherSearchQuery obj = new com.amap.api.services.weather.WeatherSearchQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_weather_LocalWeatherForecast__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_weather_LocalWeatherForecast__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.weather.LocalWeatherForecast obj = new com.amap.api.services.weather.LocalWeatherForecast();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_weather_WeatherSearch__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_weather_WeatherSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.weather.WeatherSearch obj = new com.amap.api.services.weather.WeatherSearch(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_weather_LocalWeatherLive__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_weather_LocalWeatherLive__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.weather.LocalWeatherLive obj = new com.amap.api.services.weather.LocalWeatherLive();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_BusinessArea__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_BusinessArea__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.geocoder.BusinessArea obj = new com.amap.api.services.geocoder.BusinessArea();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_GeocodeQuery__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_GeocodeQuery__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.geocoder.GeocodeQuery obj = new com.amap.api.services.geocoder.GeocodeQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_GeocodeSearch__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_GeocodeSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.geocoder.GeocodeSearch obj = new com.amap.api.services.geocoder.GeocodeSearch(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_RegeocodeResult__com_amap_api_services_geocoder_RegeocodeQuery__com_amap_api_services_geocoder_RegeocodeAddress", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_RegeocodeResult__com_amap_api_services_geocoder_RegeocodeQuery__com_amap_api_services_geocoder_RegeocodeAddress");
                }
            
                // args
                // ref arg
                com.amap.api.services.geocoder.RegeocodeQuery var1 = (com.amap.api.services.geocoder.RegeocodeQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.geocoder.RegeocodeAddress var2 = (com.amap.api.services.geocoder.RegeocodeAddress) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.geocoder.RegeocodeResult obj = new com.amap.api.services.geocoder.RegeocodeResult(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_GeocodeResult__com_amap_api_services_geocoder_GeocodeQuery__java_util_List_com_amap_api_services_geocoder_GeocodeAddress_", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_GeocodeResult__com_amap_api_services_geocoder_GeocodeQuery__java_util_List_com_amap_api_services_geocoder_GeocodeAddress_");
                }
            
                // args
                // ref arg
                com.amap.api.services.geocoder.GeocodeQuery var1 = (com.amap.api.services.geocoder.GeocodeQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // list arg
                List<Integer> var2RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var2");
                java.util.List<com.amap.api.services.geocoder.GeocodeAddress> var2 = new ArrayList<>();
                for (int refId : var2RefIdList) {
                    ((ArrayList<com.amap.api.services.geocoder.GeocodeAddress>) var2).add((com.amap.api.services.geocoder.GeocodeAddress) getHEAP().get(refId));
                }
            
                // create target object
                com.amap.api.services.geocoder.GeocodeResult obj = new com.amap.api.services.geocoder.GeocodeResult(var1, (ArrayList) var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_AoiItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_AoiItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.geocoder.AoiItem obj = new com.amap.api.services.geocoder.AoiItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_RegeocodeRoad__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_RegeocodeRoad__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.geocoder.RegeocodeRoad obj = new com.amap.api.services.geocoder.RegeocodeRoad();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_GeocodeAddress__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_GeocodeAddress__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.geocoder.GeocodeAddress obj = new com.amap.api.services.geocoder.GeocodeAddress();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_RegeocodeQuery__com_amap_api_services_core_LatLonPoint__float__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_RegeocodeQuery__com_amap_api_services_core_LatLonPoint__float__String");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.geocoder.RegeocodeQuery obj = new com.amap.api.services.geocoder.RegeocodeQuery(var1, new Double(var2).floatValue(), var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_StreetNumber__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_StreetNumber__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.geocoder.StreetNumber obj = new com.amap.api.services.geocoder.StreetNumber();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_geocoder_RegeocodeAddress__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_geocoder_RegeocodeAddress__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.geocoder.RegeocodeAddress obj = new com.amap.api.services.geocoder.RegeocodeAddress();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_district_DistrictSearchQuery__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_district_DistrictSearchQuery__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.district.DistrictSearchQuery obj = new com.amap.api.services.district.DistrictSearchQuery();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_district_DistrictSearchQuery__String__String__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_district_DistrictSearchQuery__String__String__int");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.amap.api.services.district.DistrictSearchQuery obj = new com.amap.api.services.district.DistrictSearchQuery(var1, var2, var3);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_district_DistrictSearchQuery__String__String__int__boolean__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_district_DistrictSearchQuery__String__String__int__boolean__int");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.amap.api.services.district.DistrictSearchQuery obj = new com.amap.api.services.district.DistrictSearchQuery(var1, var2, var3, var4, var5);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_district_DistrictSearch__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_district_DistrictSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.district.DistrictSearch obj = new com.amap.api.services.district.DistrictSearch(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_district_DistrictResult__com_amap_api_services_district_DistrictSearchQuery__java_util_ArrayList_com_amap_api_services_district_DistrictItem_", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_district_DistrictResult__com_amap_api_services_district_DistrictSearchQuery__java_util_ArrayList_com_amap_api_services_district_DistrictItem_");
                }
            
                // args
                // ref arg
                com.amap.api.services.district.DistrictSearchQuery var1 = (com.amap.api.services.district.DistrictSearchQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // list arg
                List<Integer> var2RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var2");
                java.util.ArrayList<com.amap.api.services.district.DistrictItem> var2 = new ArrayList<>();
                for (int refId : var2RefIdList) {
                    ((ArrayList<com.amap.api.services.district.DistrictItem>) var2).add((com.amap.api.services.district.DistrictItem) getHEAP().get(refId));
                }
            
                // create target object
                com.amap.api.services.district.DistrictResult obj = new com.amap.api.services.district.DistrictResult(var1, (ArrayList) var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_district_DistrictResult__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_district_DistrictResult__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.district.DistrictResult obj = new com.amap.api.services.district.DistrictResult();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_district_DistrictItem__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_district_DistrictItem__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.district.DistrictItem obj = new com.amap.api.services.district.DistrictItem();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_district_DistrictItem__String__String__String__com_amap_api_services_core_LatLonPoint__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_district_DistrictItem__String__String__String__com_amap_api_services_core_LatLonPoint__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
                // ref arg
                com.amap.api.services.core.LatLonPoint var4 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
                // jsonable arg
                String var5 = (String) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.amap.api.services.district.DistrictItem obj = new com.amap.api.services.district.DistrictItem(var1, var2, var3, var4, var5);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_help_Tip__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_help_Tip__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.services.help.Tip obj = new com.amap.api.services.help.Tip();
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_help_InputtipsQuery__String__String", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_help_InputtipsQuery__String__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.help.InputtipsQuery obj = new com.amap.api.services.help.InputtipsQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_help_Inputtips__android_content_Context__com_amap_api_services_help_InputtipsQuery", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_help_Inputtips__android_content_Context__com_amap_api_services_help_InputtipsQuery");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.help.InputtipsQuery var2 = (com.amap.api.services.help.InputtipsQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.help.Inputtips obj = new com.amap.api.services.help.Inputtips(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareNaviQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_share_ShareSearch_ShareNaviQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.share.ShareSearch.ShareFromAndTo var1 = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.share.ShareSearch.ShareNaviQuery obj = new com.amap.api.services.share.ShareSearch.ShareNaviQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareBusRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_share_ShareSearch_ShareBusRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.share.ShareSearch.ShareFromAndTo var1 = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.share.ShareSearch.ShareBusRouteQuery obj = new com.amap.api.services.share.ShareSearch.ShareBusRouteQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_share_ShareSearch__android_content_Context", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_share_ShareSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.amap.api.services.share.ShareSearch obj = new com.amap.api.services.share.ShareSearch(var1);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareFromAndTo__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_share_ShareSearch_ShareFromAndTo__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint");
                }
            
                // args
                // ref arg
                com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.amap.api.services.share.ShareSearch.ShareFromAndTo obj = new com.amap.api.services.share.ShareSearch.ShareFromAndTo(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareWalkRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_share_ShareSearch_ShareWalkRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.share.ShareSearch.ShareFromAndTo var1 = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery obj = new com.amap.api.services.share.ShareSearch.ShareWalkRouteQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_services_share_ShareSearch_ShareDrivingRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_services_share_ShareSearch_ShareDrivingRouteQuery__com_amap_api_services_share_ShareSearch_ShareFromAndTo__int");
                }
            
                // args
                // ref arg
                com.amap.api.services.share.ShareSearch.ShareFromAndTo var1 = (com.amap.api.services.share.ShareSearch.ShareFromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery obj = new com.amap.api.services.share.ShareSearch.ShareDrivingRouteQuery(var1, var2);
                getHEAP().put(System.identityHashCode(obj), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(System.identityHashCode(obj));
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_traffic_TrafficStatusInfo__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.traffic.TrafficStatusInfo obj = new com.amap.api.services.traffic.TrafficStatusInfo();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_traffic_TrafficStatusResult__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.traffic.TrafficStatusResult obj = new com.amap.api.services.traffic.TrafficStatusResult();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_traffic_TrafficSearch__android_content_Context", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // create target object
                    com.amap.api.services.traffic.TrafficSearch obj = new com.amap.api.services.traffic.TrafficSearch(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_traffic_RoadTrafficQuery__String__String__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.amap.api.services.traffic.RoadTrafficQuery obj = new com.amap.api.services.traffic.RoadTrafficQuery(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_traffic_CircleTrafficQuery__com_amap_api_services_core_LatLonPoint__int__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.amap.api.services.traffic.CircleTrafficQuery obj = new com.amap.api.services.traffic.CircleTrafficQuery(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_traffic_TrafficStatusEvaluation__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.traffic.TrafficStatusEvaluation obj = new com.amap.api.services.traffic.TrafficStatusEvaluation();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_busline_BusLineItem__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.busline.BusLineItem obj = new com.amap.api.services.busline.BusLineItem();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_busline_BusStationSearch__android_content_Context__com_amap_api_services_busline_BusStationQuery", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // ref arg
                    com.amap.api.services.busline.BusStationQuery var2 = (com.amap.api.services.busline.BusStationQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // create target object
                    com.amap.api.services.busline.BusStationSearch obj = new com.amap.api.services.busline.BusStationSearch(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_busline_BusLineSearch__android_content_Context__com_amap_api_services_busline_BusLineQuery", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // ref arg
                    com.amap.api.services.busline.BusLineQuery var2 = (com.amap.api.services.busline.BusLineQuery) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // create target object
                    com.amap.api.services.busline.BusLineSearch obj = new com.amap.api.services.busline.BusLineSearch(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_busline_BusLineQuery__String__com_amap_api_services_busline_BusLineQuery_SearchType__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // enum arg
                    com.amap.api.services.busline.BusLineQuery.SearchType var2 = com.amap.api.services.busline.BusLineQuery.SearchType.values()[(int) ((Map<String, Object>) args).get("var2")];
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.amap.api.services.busline.BusLineQuery obj = new com.amap.api.services.busline.BusLineQuery(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_busline_BusStationItem__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.busline.BusStationItem obj = new com.amap.api.services.busline.BusStationItem();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_busline_BusStationQuery__String__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.amap.api.services.busline.BusStationQuery obj = new com.amap.api.services.busline.BusStationQuery(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_core_AMapException__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    com.amap.api.services.core.AMapException obj = new com.amap.api.services.core.AMapException(var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_core_AMapException__String__int__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.amap.api.services.core.AMapException obj = new com.amap.api.services.core.AMapException(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_core_AMapException__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.core.AMapException obj = new com.amap.api.services.core.AMapException();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_core_SearchUtils__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.core.SearchUtils obj = new com.amap.api.services.core.SearchUtils();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_core_LatLonSharePoint__double__double__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    double var3 = (double) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var5 = (String) ((Map<String, Object>) args).get("var5");
            
                    // create target object
                    com.amap.api.services.core.LatLonSharePoint obj = new com.amap.api.services.core.LatLonSharePoint(var1, var3, var5);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_core_LatLonPoint__double__double", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    double var3 = (double) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.amap.api.services.core.LatLonPoint obj = new com.amap.api.services.core.LatLonPoint(var1, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_core_PoiItem__String__com_amap_api_services_core_LatLonPoint__String__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.amap.api.services.core.PoiItem obj = new com.amap.api.services.core.PoiItem(var1, var2, var3, var4);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_core_SuggestionCity__String__String__String__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.amap.api.services.core.SuggestionCity obj = new com.amap.api.services.core.SuggestionCity(var1, var2, var3, var4);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_Photo__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.poisearch.Photo obj = new com.amap.api.services.poisearch.Photo();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_Photo__String__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.amap.api.services.poisearch.Photo obj = new com.amap.api.services.poisearch.Photo(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_SubPoiItem__String__com_amap_api_services_core_LatLonPoint__String__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.amap.api.services.poisearch.SubPoiItem obj = new com.amap.api.services.poisearch.SubPoiItem(var1, var2, var3, var4);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_PoiItemExtension__String__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.amap.api.services.poisearch.PoiItemExtension obj = new com.amap.api.services.poisearch.PoiItemExtension(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.amap.api.services.poisearch.PoiSearch.SearchBound obj = new com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__int__boolean", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    boolean var3 = (boolean) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.amap.api.services.poisearch.PoiSearch.SearchBound obj = new com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_PoiSearch_SearchBound__com_amap_api_services_core_LatLonPoint__com_amap_api_services_core_LatLonPoint", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.amap.api.services.core.LatLonPoint var1 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // ref arg
                    com.amap.api.services.core.LatLonPoint var2 = (com.amap.api.services.core.LatLonPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // create target object
                    com.amap.api.services.poisearch.PoiSearch.SearchBound obj = new com.amap.api.services.poisearch.PoiSearch.SearchBound(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_PoiSearch_SearchBound__java_util_List_com_amap_api_services_core_LatLonPoint_", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // list arg
                    List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                    java.util.List<com.amap.api.services.core.LatLonPoint> var1 = new ArrayList<>();
                    for (int refId : var1RefIdList) {
                        ((ArrayList<com.amap.api.services.core.LatLonPoint>) var1).add((com.amap.api.services.core.LatLonPoint) getHEAP().get(refId));
                    }
            
                    // create target object
                    com.amap.api.services.poisearch.PoiSearch.SearchBound obj = new com.amap.api.services.poisearch.PoiSearch.SearchBound((ArrayList) var1);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_PoiSearch__android_content_Context__com_amap_api_services_poisearch_PoiSearch_Query", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // ref arg
                    com.amap.api.services.poisearch.PoiSearch.Query var2 = (com.amap.api.services.poisearch.PoiSearch.Query) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // create target object
                    com.amap.api.services.poisearch.PoiSearch obj = new com.amap.api.services.poisearch.PoiSearch(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_PoiSearch_Query__String__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    com.amap.api.services.poisearch.PoiSearch.Query obj = new com.amap.api.services.poisearch.PoiSearch.Query(var1, var2);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_PoiSearch_Query__String__String__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.amap.api.services.poisearch.PoiSearch.Query obj = new com.amap.api.services.poisearch.PoiSearch.Query(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_poisearch_IndoorData__String__int__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // create target object
                    com.amap.api.services.poisearch.IndoorData obj = new com.amap.api.services.poisearch.IndoorData(var1, var2, var3);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_route_Railway__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.route.Railway obj = new com.amap.api.services.route.Railway();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_route_BusPath__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.route.BusPath obj = new com.amap.api.services.route.BusPath();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_route_DriveRoutePlanResult__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.route.DriveRoutePlanResult obj = new com.amap.api.services.route.DriveRoutePlanResult();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_route_RouteSearch_TruckRouteQuery__com_amap_api_services_route_RouteSearch_FromAndTo__int__java_util_List_com_amap_api_services_core_LatLonPoint___int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.amap.api.services.route.RouteSearch.FromAndTo var1 = (com.amap.api.services.route.RouteSearch.FromAndTo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // list arg
                    List<Integer> var3RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var3");
                    java.util.List<com.amap.api.services.core.LatLonPoint> var3 = new ArrayList<>();
                    for (int refId : var3RefIdList) {
                        ((ArrayList<com.amap.api.services.core.LatLonPoint>) var3).add((com.amap.api.services.core.LatLonPoint) getHEAP().get(refId));
                    }
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // create target object
                    com.amap.api.services.route.RouteSearch.TruckRouteQuery obj = new com.amap.api.services.route.RouteSearch.TruckRouteQuery(var1, var2, (ArrayList) var3, var4);
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_route_TMC__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.route.TMC obj = new com.amap.api.services.route.TMC();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_amap_api_services_route_RouteBusWalkItem__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int __i__ = 0; __i__ < length; __i__++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.amap.api.services.route.RouteBusWalkItem obj = new com.amap.api.services.route.RouteBusWalkItem();
                    getHEAP().put(System.identityHashCode(obj), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(System.identityHashCode(obj));
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
