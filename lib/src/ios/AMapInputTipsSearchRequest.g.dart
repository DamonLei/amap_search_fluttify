// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_search_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class AMapInputTipsSearchRequest extends AMapSearchObject with NSCoding, NSCopying {
  //region constants
  
  //endregion

  //region creators
  static Future<AMapInputTipsSearchRequest> create__() async {
    final int refId = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('ObjectFactory::createAMapInputTipsSearchRequest');
    final object = AMapInputTipsSearchRequest()..refId = refId..tag = 'amap_search_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<AMapInputTipsSearchRequest>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('ObjectFactory::create_batchAMapInputTipsSearchRequest', {'length': length});
  
    final List<AMapInputTipsSearchRequest> typedResult = resultBatch.map((result) => AMapInputTipsSearchRequest()..refId = result..tag = 'amap_search_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_keywords() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_keywords", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_city() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_city", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_types() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_types", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_cityLimit() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_cityLimit", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_location() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_location", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_keywords(String keywords) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_keywords', {'refId': refId, "keywords": keywords});
  
  
  }
  
  Future<void> set_city(String city) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_city', {'refId': refId, "city": city});
  
  
  }
  
  Future<void> set_types(String types) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_types', {'refId': refId, "types": types});
  
  
  }
  
  Future<void> set_cityLimit(bool cityLimit) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_cityLimit', {'refId': refId, "cityLimit": cityLimit});
  
  
  }
  
  Future<void> set_location(String location) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_location', {'refId': refId, "location": location});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension AMapInputTipsSearchRequest_Batch on List<AMapInputTipsSearchRequest> {
  //region getters
  Future<List<String>> get_keywords_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_keywords_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_city_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_city_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_types_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_types_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_cityLimit_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_cityLimit_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_location_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapInputTipsSearchRequest::get_location_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_keywords_batch(List<String> keywords) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_keywords_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "keywords": keywords[i]}]);
  
  
  }
  
  Future<void> set_city_batch(List<String> city) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_city_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "city": city[i]}]);
  
  
  }
  
  Future<void> set_types_batch(List<String> types) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_types_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "types": types[i]}]);
  
  
  }
  
  Future<void> set_cityLimit_batch(List<bool> cityLimit) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_cityLimit_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "cityLimit": cityLimit[i]}]);
  
  
  }
  
  Future<void> set_location_batch(List<String> location) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapInputTipsSearchRequest::set_location_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "location": location[i]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}