// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_search_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class AMapPOISearchBaseRequest extends AMapSearchObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<AMapPOISearchBaseRequest> create__() async {
    final int refId = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('ObjectFactory::createAMapPOISearchBaseRequest');
    final object = AMapPOISearchBaseRequest()..refId = refId..tag = 'amap_search_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<AMapPOISearchBaseRequest>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('ObjectFactory::create_batchAMapPOISearchBaseRequest', {'length': length});
  
    final List<AMapPOISearchBaseRequest> typedResult = resultBatch.map((result) => AMapPOISearchBaseRequest()..refId = result..tag = 'amap_search_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_types() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_types", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_sortrule() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_sortrule", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_offset() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_offset", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_page() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_page", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_building() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_building", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_requireExtension() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_requireExtension", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_requireSubPOIs() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_requireSubPOIs", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_types(String types) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapPOISearchBaseRequest::set_types', {'refId': refId, "types": types});
  
  
  }
  
  Future<void> set_sortrule(int sortrule) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapPOISearchBaseRequest::set_sortrule', {'refId': refId, "sortrule": sortrule});
  
  
  }
  
  Future<void> set_offset(int offset) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapPOISearchBaseRequest::set_offset', {'refId': refId, "offset": offset});
  
  
  }
  
  Future<void> set_page(int page) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapPOISearchBaseRequest::set_page', {'refId': refId, "page": page});
  
  
  }
  
  Future<void> set_building(String building) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapPOISearchBaseRequest::set_building', {'refId': refId, "building": building});
  
  
  }
  
  Future<void> set_requireExtension(bool requireExtension) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapPOISearchBaseRequest::set_requireExtension', {'refId': refId, "requireExtension": requireExtension});
  
  
  }
  
  Future<void> set_requireSubPOIs(bool requireSubPOIs) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapPOISearchBaseRequest::set_requireSubPOIs', {'refId': refId, "requireSubPOIs": requireSubPOIs});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension AMapPOISearchBaseRequest_Batch on List<AMapPOISearchBaseRequest> {
  //region getters
  Future<List<String>> get_types_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_types_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_sortrule_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_sortrule_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_offset_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_offset_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_page_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_page_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_building_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_building_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_requireExtension_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_requireExtension_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_requireSubPOIs_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapPOISearchBaseRequest::get_requireSubPOIs_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}