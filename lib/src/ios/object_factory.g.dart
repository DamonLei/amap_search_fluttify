//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:flutter/services.dart';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class ObjectFactory_iOS {
  static final _channel = MethodChannel('me.yohom/amap_search_fluttify');

  static Future<CLLocationCoordinate2D> createCLLocationCoordinate2D(double latitude, double longitude) async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createCLLocationCoordinate2D', {'latitude': latitude, 'longitude': longitude});
    return CLLocationCoordinate2D()..refId = refId;
  }

  static Future<UIImage> createUIImage(Uint8List bitmapBytes) async {
    final refId =
        await _channel.invokeMethod('ObjectFactory::createUIImage', {'bitmapBytes': bitmapBytes});
    return UIImage()..refId = refId;
  }

  static Future<void> release(Ref_iOS ref) async {
    await _channel.invokeMethod('ObjectFactory::release', {'refId': ref.refId});
  }

  static Future<void> clearHeap() async {
    await _channel.invokeMethod('ObjectFactory::clearHeap');
  }

  static Future<void> pushStack(String name, Ref_iOS ref) async {
    await _channel.invokeMethod('ObjectFactory::pushStack', {'name': name, 'refId': ref.refId});
  }

  static Future<void> pushStackJsonable(String name, dynamic jsonable) async {
    await _channel.invokeMethod('ObjectFactory::pushStackJsonable', {'name': name, 'data': jsonable});
  }

  static Future<void> clearStack() async {
    await _channel.invokeMethod('ObjectFactory::clearStack');
  }

  static Future<AMapPOISearchBaseRequest> createAMapPOISearchBaseRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOISearchBaseRequest');
    final object = AMapPOISearchBaseRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOIIDSearchRequest> createAMapPOIIDSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOIIDSearchRequest');
    final object = AMapPOIIDSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOIKeywordsSearchRequest> createAMapPOIKeywordsSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOIKeywordsSearchRequest');
    final object = AMapPOIKeywordsSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOIAroundSearchRequest> createAMapPOIAroundSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOIAroundSearchRequest');
    final object = AMapPOIAroundSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOIPolygonSearchRequest> createAMapPOIPolygonSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOIPolygonSearchRequest');
    final object = AMapPOIPolygonSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOISearchResponse> createAMapPOISearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOISearchResponse');
    final object = AMapPOISearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoutePOISearchRequest> createAMapRoutePOISearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoutePOISearchRequest');
    final object = AMapRoutePOISearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoutePOISearchResponse> createAMapRoutePOISearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoutePOISearchResponse');
    final object = AMapRoutePOISearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapInputTipsSearchRequest> createAMapInputTipsSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapInputTipsSearchRequest');
    final object = AMapInputTipsSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapInputTipsSearchResponse> createAMapInputTipsSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapInputTipsSearchResponse');
    final object = AMapInputTipsSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeocodeSearchRequest> createAMapGeocodeSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeocodeSearchRequest');
    final object = AMapGeocodeSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeocodeSearchResponse> createAMapGeocodeSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeocodeSearchResponse');
    final object = AMapGeocodeSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapReGeocodeSearchRequest> createAMapReGeocodeSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapReGeocodeSearchRequest');
    final object = AMapReGeocodeSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapReGeocodeSearchResponse> createAMapReGeocodeSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapReGeocodeSearchResponse');
    final object = AMapReGeocodeSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusStopSearchRequest> createAMapBusStopSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusStopSearchRequest');
    final object = AMapBusStopSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusStopSearchResponse> createAMapBusStopSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusStopSearchResponse');
    final object = AMapBusStopSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusLineBaseSearchRequest> createAMapBusLineBaseSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusLineBaseSearchRequest');
    final object = AMapBusLineBaseSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusLineNameSearchRequest> createAMapBusLineNameSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusLineNameSearchRequest');
    final object = AMapBusLineNameSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusLineIDSearchRequest> createAMapBusLineIDSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusLineIDSearchRequest');
    final object = AMapBusLineIDSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusLineSearchResponse> createAMapBusLineSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusLineSearchResponse');
    final object = AMapBusLineSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapDistrictSearchRequest> createAMapDistrictSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapDistrictSearchRequest');
    final object = AMapDistrictSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapDistrictSearchResponse> createAMapDistrictSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapDistrictSearchResponse');
    final object = AMapDistrictSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRouteSearchBaseRequest> createAMapRouteSearchBaseRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRouteSearchBaseRequest');
    final object = AMapRouteSearchBaseRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapDrivingRouteSearchRequest> createAMapDrivingRouteSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapDrivingRouteSearchRequest');
    final object = AMapDrivingRouteSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapWalkingRouteSearchRequest> createAMapWalkingRouteSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapWalkingRouteSearchRequest');
    final object = AMapWalkingRouteSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTransitRouteSearchRequest> createAMapTransitRouteSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTransitRouteSearchRequest');
    final object = AMapTransitRouteSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRidingRouteSearchRequest> createAMapRidingRouteSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRidingRouteSearchRequest');
    final object = AMapRidingRouteSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRouteSearchResponse> createAMapRouteSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRouteSearchResponse');
    final object = AMapRouteSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRidingRouteSearchResponse> createAMapRidingRouteSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRidingRouteSearchResponse');
    final object = AMapRidingRouteSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTruckRouteSearchRequest> createAMapTruckRouteSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTruckRouteSearchRequest');
    final object = AMapTruckRouteSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapDistanceSearchRequest> createAMapDistanceSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapDistanceSearchRequest');
    final object = AMapDistanceSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapDistanceSearchResponse> createAMapDistanceSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapDistanceSearchResponse');
    final object = AMapDistanceSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapWeatherSearchRequest> createAMapWeatherSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapWeatherSearchRequest');
    final object = AMapWeatherSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapWeatherSearchResponse> createAMapWeatherSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapWeatherSearchResponse');
    final object = AMapWeatherSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoadTrafficSearchBaseRequest> createAMapRoadTrafficSearchBaseRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoadTrafficSearchBaseRequest');
    final object = AMapRoadTrafficSearchBaseRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoadTrafficSearchRequest> createAMapRoadTrafficSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoadTrafficSearchRequest');
    final object = AMapRoadTrafficSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoadTrafficCircleSearchRequest> createAMapRoadTrafficCircleSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoadTrafficCircleSearchRequest');
    final object = AMapRoadTrafficCircleSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoadTrafficSearchResponse> createAMapRoadTrafficSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoadTrafficSearchResponse');
    final object = AMapRoadTrafficSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapNearbySearchRequest> createAMapNearbySearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapNearbySearchRequest');
    final object = AMapNearbySearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapNearbySearchResponse> createAMapNearbySearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapNearbySearchResponse');
    final object = AMapNearbySearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCloudSearchBaseRequest> createAMapCloudSearchBaseRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCloudSearchBaseRequest');
    final object = AMapCloudSearchBaseRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCloudPOIAroundSearchRequest> createAMapCloudPOIAroundSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCloudPOIAroundSearchRequest');
    final object = AMapCloudPOIAroundSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCloudPOIPolygonSearchRequest> createAMapCloudPOIPolygonSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCloudPOIPolygonSearchRequest');
    final object = AMapCloudPOIPolygonSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCloudPOIIDSearchRequest> createAMapCloudPOIIDSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCloudPOIIDSearchRequest');
    final object = AMapCloudPOIIDSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCloudPOILocalSearchRequest> createAMapCloudPOILocalSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCloudPOILocalSearchRequest');
    final object = AMapCloudPOILocalSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCloudPOISearchResponse> createAMapCloudPOISearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCloudPOISearchResponse');
    final object = AMapCloudPOISearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapShareSearchBaseRequest> createAMapShareSearchBaseRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapShareSearchBaseRequest');
    final object = AMapShareSearchBaseRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocationShareSearchRequest> createAMapLocationShareSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocationShareSearchRequest');
    final object = AMapLocationShareSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOIShareSearchRequest> createAMapPOIShareSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOIShareSearchRequest');
    final object = AMapPOIShareSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRouteShareSearchRequest> createAMapRouteShareSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRouteShareSearchRequest');
    final object = AMapRouteShareSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapNavigationShareSearchRequest> createAMapNavigationShareSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapNavigationShareSearchRequest');
    final object = AMapNavigationShareSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapShareSearchResponse> createAMapShareSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapShareSearchResponse');
    final object = AMapShareSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapFutureRouteSearchRequest> createAMapFutureRouteSearchRequest() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapFutureRouteSearchRequest');
    final object = AMapFutureRouteSearchRequest()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapFutureRouteSearchResponse> createAMapFutureRouteSearchResponse() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapFutureRouteSearchResponse');
    final object = AMapFutureRouteSearchResponse()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapSearchObject> createAMapSearchObject() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapSearchObject');
    final object = AMapSearchObject()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeoPoint> createAMapGeoPoint() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeoPoint');
    final object = AMapGeoPoint()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeoPolygon> createAMapGeoPolygon() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeoPolygon');
    final object = AMapGeoPolygon()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCity> createAMapCity() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCity');
    final object = AMapCity()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapSuggestion> createAMapSuggestion() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapSuggestion');
    final object = AMapSuggestion()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTip> createAMapTip() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTip');
    final object = AMapTip()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapImage> createAMapImage() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapImage');
    final object = AMapImage()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOIExtension> createAMapPOIExtension() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOIExtension');
    final object = AMapPOIExtension()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapIndoorData> createAMapIndoorData() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapIndoorData');
    final object = AMapIndoorData()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapSubPOI> createAMapSubPOI() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapSubPOI');
    final object = AMapSubPOI()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoutePOI> createAMapRoutePOI() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoutePOI');
    final object = AMapRoutePOI()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPOI> createAMapPOI() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPOI');
    final object = AMapPOI()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapAOI> createAMapAOI() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapAOI');
    final object = AMapAOI()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoad> createAMapRoad() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoad');
    final object = AMapRoad()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoadInter> createAMapRoadInter() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoadInter');
    final object = AMapRoadInter()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapStreetNumber> createAMapStreetNumber() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapStreetNumber');
    final object = AMapStreetNumber()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusinessArea> createAMapBusinessArea() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusinessArea');
    final object = AMapBusinessArea()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapAddressComponent> createAMapAddressComponent() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapAddressComponent');
    final object = AMapAddressComponent()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapReGeocode> createAMapReGeocode() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapReGeocode');
    final object = AMapReGeocode()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapGeocode> createAMapGeocode() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapGeocode');
    final object = AMapGeocode()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusStop> createAMapBusStop() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusStop');
    final object = AMapBusStop()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapBusLine> createAMapBusLine() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapBusLine');
    final object = AMapBusLine()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapDistrict> createAMapDistrict() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapDistrict');
    final object = AMapDistrict()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTMC> createAMapTMC() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTMC');
    final object = AMapTMC()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapStep> createAMapStep() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapStep');
    final object = AMapStep()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapPath> createAMapPath() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapPath');
    final object = AMapPath()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapFutureTimeInfoElement> createAMapFutureTimeInfoElement() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapFutureTimeInfoElement');
    final object = AMapFutureTimeInfoElement()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapFutureTimeInfo> createAMapFutureTimeInfo() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapFutureTimeInfo');
    final object = AMapFutureTimeInfo()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapWalking> createAMapWalking() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapWalking');
    final object = AMapWalking()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTaxi> createAMapTaxi() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTaxi');
    final object = AMapTaxi()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRailwayStation> createAMapRailwayStation() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRailwayStation');
    final object = AMapRailwayStation()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRailwaySpace> createAMapRailwaySpace() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRailwaySpace');
    final object = AMapRailwaySpace()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRailway> createAMapRailway() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRailway');
    final object = AMapRailway()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapSegment> createAMapSegment() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapSegment');
    final object = AMapSegment()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTransit> createAMapTransit() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTransit');
    final object = AMapTransit()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapRoute> createAMapRoute() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapRoute');
    final object = AMapRoute()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapDistanceResult> createAMapDistanceResult() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapDistanceResult');
    final object = AMapDistanceResult()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocalWeatherLive> createAMapLocalWeatherLive() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocalWeatherLive');
    final object = AMapLocalWeatherLive()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocalDayWeatherForecast> createAMapLocalDayWeatherForecast() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocalDayWeatherForecast');
    final object = AMapLocalDayWeatherForecast()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapLocalWeatherForecast> createAMapLocalWeatherForecast() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapLocalWeatherForecast');
    final object = AMapLocalWeatherForecast()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapNearbyUserInfo> createAMapNearbyUserInfo() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapNearbyUserInfo');
    final object = AMapNearbyUserInfo()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTrafficEvaluation> createAMapTrafficEvaluation() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTrafficEvaluation');
    final object = AMapTrafficEvaluation()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTrafficRoad> createAMapTrafficRoad() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTrafficRoad');
    final object = AMapTrafficRoad()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapTrafficInfo> createAMapTrafficInfo() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapTrafficInfo');
    final object = AMapTrafficInfo()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCloudImage> createAMapCloudImage() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCloudImage');
    final object = AMapCloudImage()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapCloudPOI> createAMapCloudPOI() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapCloudPOI');
    final object = AMapCloudPOI()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapNearbyUploadInfo> createAMapNearbyUploadInfo() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapNearbyUploadInfo');
    final object = AMapNearbyUploadInfo()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<AMapSearchAPI> createAMapSearchAPI() async {
    final int refId = await _channel.invokeMethod('ObjectFactory::createAMapSearchAPI');
    final object = AMapSearchAPI()..refId = refId;
  
    kNativeObjectPool.add(object);
    return object;
  }
  
}

class NSObject extends Ref_iOS {}

// STRUCT
class CLLocationCoordinate2D extends Ref_iOS {
  Future<double> get latitude {
    return MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocationCoordinate2D::get_latitude', {'refId': refId});
  }

  Future<double> get longitude {
    return MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocationCoordinate2D::get_longitude', {'refId': refId});
  }
}

class CLHeading extends Ref_iOS {}

class CGRect extends Ref_iOS {}

class CGPoint extends Ref_iOS {}

class CGSize extends Ref_iOS {}

class UIEdgeInsets extends Ref_iOS {}

// CLASS
class CLLocationManager extends NSObject {}

class CLLocation extends NSObject {
  Future<CLLocationCoordinate2D> get coordinate async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocation::get_coordinate', {'refId': refId});
    return CLLocationCoordinate2D()..refId = result;
  }

  Future<double> get altitude {
    return MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocation::get_altitude', {'refId': refId});
  }

  Future<double> get horizontalAccuracy {
    return MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocation::get_horizontalAccuracy', {'refId': refId});
  }

  Future<double> get verticalAccuracy {
    return MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocation::get_verticalAccuracy', {'refId': refId});
  }

  Future<double> get course {
    return MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocation::get_course', {'refId': refId});
  }

  Future<double> get speed {
    return MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocation::get_speed', {'refId': refId});
  }

  Future<CLFloor> get floor async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLLocation::get_floor', {'refId': refId});
    return CLFloor()..refId = result;
  }
}

class CLFloor extends NSObject {
  Future<String> get level {
    return MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('CLFloor::get_level', {'refId': refId});
  }
}

class NSError extends NSObject {}

mixin NSCoding on NSObject {}

mixin NSCopying on NSObject {}

class UIView extends NSObject {}

class UIControl extends NSObject {}

class UIImage extends NSObject {}

// ENUM
enum CLAuthorizationStatus {
  kCLAuthorizationStatusNotDetermined,
  kCLAuthorizationStatusRestricted,
  kCLAuthorizationStatusDenied,
  kCLAuthorizationStatusAuthorizedAlways,
  kCLAuthorizationStatusAuthorizedWhenInUse,
  kCLAuthorizationStatusAuthorized,
}
