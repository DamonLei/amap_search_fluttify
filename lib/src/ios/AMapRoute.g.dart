// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_search_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class AMapRoute extends AMapSearchObject with NSCoding, NSCopying {
  //region constants
  
  //endregion

  //region creators
  static Future<AMapRoute> create__() async {
    final int refId = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('ObjectFactory::createAMapRoute');
    final object = AMapRoute()..refId = refId..tag = 'amap_search_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<AMapRoute>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must has same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('ObjectFactory::create_batchAMapRoute', {'length': length});
  
    final List<AMapRoute> typedResult = resultBatch.map((result) => AMapRoute()..refId = result..tag = 'amap_search_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<AMapGeoPoint> get_origin() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_origin", {'refId': refId});
    kNativeObjectPool.add(AMapGeoPoint()..refId = result..tag = 'amap_search_fluttify');
    return AMapGeoPoint()..refId = result..tag = 'amap_search_fluttify';
  }
  
  Future<AMapGeoPoint> get_destination() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_destination", {'refId': refId});
    kNativeObjectPool.add(AMapGeoPoint()..refId = result..tag = 'amap_search_fluttify');
    return AMapGeoPoint()..refId = result..tag = 'amap_search_fluttify';
  }
  
  Future<double> get_taxiCost() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_taxiCost", {'refId': refId});
  
    return result;
  }
  
  Future<List<AMapPath>> get_paths() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_paths", {'refId': refId});
    kNativeObjectPool.addAll((result as List).cast<int>().map((it) => AMapPath()..refId = it..tag = 'amap_search_fluttify').toList());
    return (result as List).cast<int>().map((it) => AMapPath()..refId = it..tag = 'amap_search_fluttify').toList();
  }
  
  Future<List<AMapTransit>> get_transits() async {
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_transits", {'refId': refId});
    kNativeObjectPool.addAll((result as List).cast<int>().map((it) => AMapTransit()..refId = it..tag = 'amap_search_fluttify').toList());
    return (result as List).cast<int>().map((it) => AMapTransit()..refId = it..tag = 'amap_search_fluttify').toList();
  }
  
  //endregion

  //region setters
  Future<void> set_origin(AMapGeoPoint origin) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_origin', {'refId': refId, "origin": origin.refId});
  
  
  }
  
  Future<void> set_destination(AMapGeoPoint destination) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_destination', {'refId': refId, "destination": destination.refId});
  
  
  }
  
  Future<void> set_taxiCost(double taxiCost) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_taxiCost', {'refId': refId, "taxiCost": taxiCost});
  
  
  }
  
  Future<void> set_paths(List<AMapPath> paths) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_paths', {'refId': refId, "paths": paths.map((it) => it.refId).toList()});
  
  
  }
  
  Future<void> set_transits(List<AMapTransit> transits) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_transits', {'refId': refId, "transits": transits.map((it) => it.refId).toList()});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension AMapRoute_Batch on List<AMapRoute> {
  //region getters
  Future<List<AMapGeoPoint>> get_origin_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_origin_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => AMapGeoPoint()..refId = result..tag = 'amap_search_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<AMapGeoPoint>> get_destination_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_destination_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => AMapGeoPoint()..refId = result..tag = 'amap_search_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<double>> get_taxiCost_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_taxiCost_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<List<AMapPath>>> get_paths_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_paths_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => (result as List).cast<int>().map((it) => AMapPath()..refId = it..tag = 'amap_search_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  Future<List<List<AMapTransit>>> get_transits_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod("AMapRoute::get_transits_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => (result as List).cast<int>().map((it) => AMapTransit()..refId = it..tag = 'amap_search_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_origin_batch(List<AMapGeoPoint> origin) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_origin_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "origin": origin[i].refId}]);
  
  
  }
  
  Future<void> set_destination_batch(List<AMapGeoPoint> destination) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_destination_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "destination": destination[i].refId}]);
  
  
  }
  
  Future<void> set_taxiCost_batch(List<double> taxiCost) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_taxiCost_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "taxiCost": taxiCost[i]}]);
  
  
  }
  
  Future<void> set_paths_batch(List<List<AMapPath>> paths) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_paths_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "paths": paths[i].map((it) => it.refId).toList()}]);
  
  
  }
  
  Future<void> set_transits_batch(List<List<AMapTransit>> transits) async {
    await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('AMapRoute::set_transits_batch_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "transits": transits[i].map((it) => it.refId).toList()}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}