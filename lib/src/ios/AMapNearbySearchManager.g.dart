// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class AMapNearbySearchManager extends NSObject  {
  //region constants
  static const String name__ = 'AMapNearbySearchManager';

  @override
  final String tag__ = 'amap_search_fluttify';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  Future<double> get_uploadTimeInterval() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapNearbySearchManager::get_uploadTimeInterval", {'__this__': this});
    return __result__;
  }
  
  Future<bool> get_isAutoUploading() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapNearbySearchManager::get_isAutoUploading", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_uploadTimeInterval(double uploadTimeInterval) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::set_uploadTimeInterval', <String, dynamic>{'__this__': this, "uploadTimeInterval": uploadTimeInterval});
  
  
  }
  
  Future<void> set_delegate(AMapNearbySearchManagerDelegate delegate) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::set_delegate', <String, dynamic>{'__this__': this, });
  
    MethodChannel('AMapNearbySearchManagerDelegate::Callback', StandardMethodCodec(FluttifyMessageCodec('amap_search_fluttify')))
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::AMapNearbySearchManagerDelegate::nearbyInfoForUploading':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: nearbyInfoForUploading([\'manager\':${args['manager']}])');
              }
          
              // handle the native call
              delegate?.nearbyInfoForUploading(TypeOpAmapSearchFluttifyIOS((args['manager'] as Object))?.as__<AMapNearbySearchManager>());
              break;
            case 'Callback::AMapNearbySearchManagerDelegate::onNearbyInfoUploadedWithError':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onNearbyInfoUploadedWithError([\'error\':${args['error']}])');
              }
          
              // handle the native call
              delegate?.onNearbyInfoUploadedWithError(TypeOpAmapSearchFluttifyIOS((args['error'] as Object))?.as__<NSError>());
              break;
            case 'Callback::AMapNearbySearchManagerDelegate::onUserInfoClearedWithError':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onUserInfoClearedWithError([\'error\':${args['error']}])');
              }
          
              // handle the native call
              delegate?.onUserInfoClearedWithError(TypeOpAmapSearchFluttifyIOS((args['error'] as Object))?.as__<NSError>());
              break;
            default:
              break;
          }
        } catch (e) {
          debugPrint(e);
          rethrow;
        }
      });
  }
  
  //endregion

  //region methods
  
  static Future<AMapNearbySearchManager> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapNearbySearchManager::sharedInstance([])');
    }
  
    // invoke native method
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::sharedInstance', );
  
  
    // handle native call
  
  
    return __result__ == null ? null : (AMapNearbySearchManager()..refId = __result__.refId);
  }
  
  
  Future<void> startAutoUploadNearbyInfo() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapNearbySearchManager@$refId::startAutoUploadNearbyInfo([])');
    }
  
    // invoke native method
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::startAutoUploadNearbyInfo', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> stopAutoUploadNearbyInfo() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapNearbySearchManager@$refId::stopAutoUploadNearbyInfo([])');
    }
  
    // invoke native method
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::stopAutoUploadNearbyInfo', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> uploadNearbyInfo(AMapNearbyUploadInfo info) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapNearbySearchManager@$refId::uploadNearbyInfo([])');
    }
  
    // invoke native method
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::uploadNearbyInfo', {"info": info, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool> clearUserInfoWithID(String userID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapNearbySearchManager@$refId::clearUserInfoWithID([\'userID\':$userID])');
    }
  
    // invoke native method
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::clearUserInfoWithID', {"userID": userID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'AMapNearbySearchManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension AMapNearbySearchManager_Batch on List<AMapNearbySearchManager> {
  //region getters
  Future<List<double>> get_uploadTimeInterval_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapNearbySearchManager::get_uploadTimeInterval_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<bool>> get_isAutoUploading_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapNearbySearchManager::get_isAutoUploading_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_uploadTimeInterval_batch(List<double> uploadTimeInterval) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::set_uploadTimeInterval_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "uploadTimeInterval": uploadTimeInterval[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  static Future<List<AMapNearbySearchManager>> sharedInstance_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::sharedInstance_batch', );
  
  
    return (resultBatch as List).cast<Ref>().map((__result__) => __result__ == null ? null : (AMapNearbySearchManager()..refId = __result__.refId)).toList();
  }
  
  
  Future<List<void>> startAutoUploadNearbyInfo_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::startAutoUploadNearbyInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).cast<Ref>().map((__result__) => __result__).toList();
  }
  
  
  Future<List<void>> stopAutoUploadNearbyInfo_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::stopAutoUploadNearbyInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).cast<Ref>().map((__result__) => __result__).toList();
  }
  
  
  Future<List<bool>> uploadNearbyInfo_batch(List<AMapNearbyUploadInfo> info) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::uploadNearbyInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"info": info[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  }
  
  
  Future<List<bool>> clearUserInfoWithID_batch(List<String> userID) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod('AMapNearbySearchManager::clearUserInfoWithID_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"userID": userID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  }
  
  //endregion
}