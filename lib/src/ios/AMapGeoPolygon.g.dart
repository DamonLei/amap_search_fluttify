// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class AMapGeoPolygon extends AMapSearchObject with NSCoding, NSCopying {
  //region constants
  static const String name__ = 'AMapGeoPolygon';

  @override
  final String tag__ = 'amap_search_fluttify';

  
  //endregion

  //region creators
  static Future<AMapGeoPolygon> create__({ bool init = true /* ios only */ }) async {
    return kAmapSearchFluttifyChannel.invokeMethod('ObjectFactory::createAMapGeoPolygon', {'init': init});
  }
  
  static Future<List<AMapGeoPolygon>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    return kAmapSearchFluttifyChannel.invokeListMethod<AMapGeoPolygon>('ObjectFactory::create_batchAMapGeoPolygon', {'length': length, 'init': init});
  }
  
  //endregion

  //region getters
  Future<List<AMapGeoPoint>> get_points() async {
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod("AMapGeoPolygon::get_points", {'__this__': this});
    return (__result__ as List)?.cast<AMapGeoPoint>();
  }
  
  //endregion

  //region setters
  Future<void> set_points(List<AMapGeoPoint> points) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapGeoPolygon::set_points', <String, dynamic>{'__this__': this, "points": points});
  
  
  }
  
  //endregion

  //region methods
  
  static Future<AMapGeoPolygon> polygonWithPoints(List<dynamic> points) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: AMapGeoPolygon::polygonWithPoints([])');
    }
  
    // invoke native method
    final __result__ = await kAmapSearchFluttifyChannel.invokeMethod('AMapGeoPolygon::polygonWithPoints', {"points": points});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'AMapGeoPolygon{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension AMapGeoPolygon_Batch on List<AMapGeoPolygon> {
  //region getters
  Future<List<List<AMapGeoPoint>>> get_points_batch() async {
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod("AMapGeoPolygon::get_points_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).cast<List<AMapGeoPoint>>().map((__result__) => (__result__ as List)?.cast<AMapGeoPoint>()).toList();
  }
  
  //endregion

  //region setters
  Future<void> set_points_batch(List<List<AMapGeoPoint>> points) async {
    await kAmapSearchFluttifyChannel.invokeMethod('AMapGeoPolygon::set_points_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "points": points[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  static Future<List<AMapGeoPolygon>> polygonWithPoints_batch(List<List<dynamic>> points) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await kAmapSearchFluttifyChannel.invokeMethod('AMapGeoPolygon::polygonWithPoints_batch', [for (int __i__ = 0; __i__ < points.length; __i__++) {"points": points[__i__]}]);
  
  
    return (resultBatch as List).cast<AMapGeoPolygon>().map((__result__) => __result__).toList();
  }
  
  //endregion
}