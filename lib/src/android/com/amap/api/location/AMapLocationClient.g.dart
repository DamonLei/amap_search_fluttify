//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_search_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_search_fluttify/src/android/android.export.g.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class com_amap_api_location_AMapLocationClient extends java_lang_Object  {
  // generate getters
  

  // generate setters
  

  // generate methods
  Future<void> setLocationOption(com_amap_api_location_AMapLocationClientOption var1) async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::setLocationOption([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::setLocationOption', {"var1": var1.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setLocationListener(com_amap_api_location_AMapLocationListener var1) async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::setLocationListener([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::setLocationListener', {"refId": refId});
  
  
    // handle native call
    MethodChannel('com.amap.api.location.AMapLocationClient::setLocationListener::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::com.amap.api.location.AMapLocationListener::onLocationChanged':
              // print log
              print('fluttify-dart-callback: onLocationChanged([])');
        
              // handle the native call
              var1?.onLocationChanged(com_amap_api_location_AMapLocation()..refId = (args['var1']));
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> startLocation() async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::startLocation([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::startLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> stopLocation() async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::stopLocation([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::stopLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<com_amap_api_location_AMapLocation> getLastKnownLocation() async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::getLastKnownLocation([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::getLastKnownLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(com_amap_api_location_AMapLocation()..refId = result..tag = 'amap_search_fluttify');
      return com_amap_api_location_AMapLocation()..refId = result..tag = 'amap_search_fluttify';
    }
  }
  
  Future<void> startAssistantLocation() async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::startAssistantLocation([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::startAssistantLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> stopAssistantLocation() async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::stopAssistantLocation([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::stopAssistantLocation', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<String> getVersion() async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::getVersion([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::getVersion', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setApiKey(String var0) async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient::setApiKey([\'var0\':$var0])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::setApiKey', {"var0": var0});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> isStarted() async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::isStarted([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::isStarted', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> unRegisterLocationListener(com_amap_api_location_AMapLocationListener var1) async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::unRegisterLocationListener([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::unRegisterLocationListener', {"refId": refId});
  
  
    // handle native call
    MethodChannel('com.amap.api.location.AMapLocationClient::unRegisterLocationListener::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::com.amap.api.location.AMapLocationListener::onLocationChanged':
              // print log
              print('fluttify-dart-callback: onLocationChanged([])');
        
              // handle the native call
              var1?.onLocationChanged(com_amap_api_location_AMapLocation()..refId = (args['var1']));
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> onDestroy() async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::onDestroy([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::onDestroy', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> disableBackgroundLocation(bool var1) async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient@$refId::disableBackgroundLocation([\'var1\':$var1])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::disableBackgroundLocation', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> getDeviceId(android_content_Context var0) async {
    // print log
    print('fluttify-dart: com.amap.api.location.AMapLocationClient::getDeviceId([])');
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_search_fluttify').invokeMethod('com.amap.api.location.AMapLocationClient::getDeviceId', {"var0": var0.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}